/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type FlavorAPI interface {

	/*
		GetInstanceType Get instance type

		인스턴스 유형(Flavor)의 상세 정보(가상 CPU, 메모리, 디스크 용량, 네트워크 성능 등)를 조회합니다. <br/>
	자세한 사양은 [인스턴스 유형별 사양](https://docs.kakaocloud.com/service/bcs/bcs-instance/bcs-type) 문서를 참고해 주세요

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param flavorId 조회할 인스턴스 유형(Flavor)의 ID
		@return ApiGetInstanceTypeRequest
	*/
	GetInstanceType(ctx context.Context, flavorId string) ApiGetInstanceTypeRequest

	// GetInstanceTypeExecute executes the request
	//  @return ResponseFlavorModel
	GetInstanceTypeExecute(r ApiGetInstanceTypeRequest) (*ResponseFlavorModel, *http.Response, error)

	/*
		ListInstanceTypes List instance types (flavors)

		등록된 인스턴스 유형(Flavor) 목록을 조회합니다. <br/>

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiListInstanceTypesRequest
	*/
	ListInstanceTypes(ctx context.Context) ApiListInstanceTypesRequest

	// ListInstanceTypesExecute executes the request
	//  @return FlavorListModel
	ListInstanceTypesExecute(r ApiListInstanceTypesRequest) (*FlavorListModel, *http.Response, error)
}

// FlavorAPIService FlavorAPI service
type FlavorAPIService service

type ApiGetInstanceTypeRequest struct {
	ctx        context.Context
	ApiService FlavorAPI
	flavorId   string
	xAuthToken *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiGetInstanceTypeRequest) XAuthToken(xAuthToken string) ApiGetInstanceTypeRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiGetInstanceTypeRequest) Execute() (*ResponseFlavorModel, *http.Response, error) {
	return r.ApiService.GetInstanceTypeExecute(r)
}

/*
GetInstanceType Get instance type

인스턴스 유형(Flavor)의 상세 정보(가상 CPU, 메모리, 디스크 용량, 네트워크 성능 등)를 조회합니다. <br/>
자세한 사양은 [인스턴스 유형별 사양](https://docs.kakaocloud.com/service/bcs/bcs-instance/bcs-type) 문서를 참고해 주세요

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param flavorId 조회할 인스턴스 유형(Flavor)의 ID
	@return ApiGetInstanceTypeRequest
*/
func (a *FlavorAPIService) GetInstanceType(ctx context.Context, flavorId string) ApiGetInstanceTypeRequest {
	return ApiGetInstanceTypeRequest{
		ApiService: a,
		ctx:        ctx,
		flavorId:   flavorId,
	}
}

// Execute executes the request
//
//	@return ResponseFlavorModel
func (a *FlavorAPIService) GetInstanceTypeExecute(r ApiGetInstanceTypeRequest) (*ResponseFlavorModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResponseFlavorModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorAPIService.GetInstanceType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/flavors/{flavor_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"flavor_id"+"}", url.PathEscape(parameterValueToString(r.flavorId, "flavorId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListInstanceTypesRequest struct {
	ctx                      context.Context
	ApiService               FlavorAPI
	xAuthToken               *string
	id                       *string
	name                     *string
	isBurstable              *bool
	vcpus                    *int32
	architecture             *string
	memoryMb                 *int32
	instanceType             *InstanceType
	instanceFamily           *string
	instanceSize             *string
	manufacturer             *string
	maximumNetworkInterfaces *int32
	processor                *string
	createdAt                *string
	updatedAt                *string
	sortKeys                 *string
	sortDirs                 *string
	limit                    *int32
	offset                   *int32
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiListInstanceTypesRequest) XAuthToken(xAuthToken string) ApiListInstanceTypesRequest {
	r.xAuthToken = &xAuthToken
	return r
}

// 조회할 인스턴스 유형(Flavor) ID
func (r ApiListInstanceTypesRequest) Id(id string) ApiListInstanceTypesRequest {
	r.id = &id
	return r
}

// 인스턴스 유형의 이름
func (r ApiListInstanceTypesRequest) Name(name string) ApiListInstanceTypesRequest {
	r.name = &name
	return r
}

// [버스터블 인스턴스](https://docs.kakaocloud.com/service/bcs/bcs-instance/bcs-type/general-purpose/burstable-main) 여부
func (r ApiListInstanceTypesRequest) IsBurstable(isBurstable bool) ApiListInstanceTypesRequest {
	r.isBurstable = &isBurstable
	return r
}

// 가상 CPU 개수
func (r ApiListInstanceTypesRequest) Vcpus(vcpus int32) ApiListInstanceTypesRequest {
	r.vcpus = &vcpus
	return r
}

// 인스턴스 유형의 아키텍처(CPU 구조)
func (r ApiListInstanceTypesRequest) Architecture(architecture string) ApiListInstanceTypesRequest {
	r.architecture = &architecture
	return r
}

// 메모리 크기 (MB 단위)
func (r ApiListInstanceTypesRequest) MemoryMb(memoryMb int32) ApiListInstanceTypesRequest {
	r.memoryMb = &memoryMb
	return r
}

// 인스턴스 유형 &lt;br/&gt; - &#x60;vm&#x60;: Virtual Machine 유형  &lt;br/&gt; - &#x60;bm&#x60;: Bare Metal Server 유형 &lt;br/&gt; - &#x60;gpu&#x60;: GPU 유형
func (r ApiListInstanceTypesRequest) InstanceType(instanceType InstanceType) ApiListInstanceTypesRequest {
	r.instanceType = &instanceType
	return r
}

// [인스턴스 패밀리](https://docs.kakaocloud.com/service/bcs/bcs-instance/bcs-instance-overview#instance-family) &lt;br/&gt; - 예시:  &#x60;r2a&#x60;, &#x60;c2a&#x60;  등
func (r ApiListInstanceTypesRequest) InstanceFamily(instanceFamily string) ApiListInstanceTypesRequest {
	r.instanceFamily = &instanceFamily
	return r
}

// 인스턴스 크기
func (r ApiListInstanceTypesRequest) InstanceSize(instanceSize string) ApiListInstanceTypesRequest {
	r.instanceSize = &instanceSize
	return r
}

// 제조사 정보
func (r ApiListInstanceTypesRequest) Manufacturer(manufacturer string) ApiListInstanceTypesRequest {
	r.manufacturer = &manufacturer
	return r
}

// 최대 네트워크 인터페이스 개수
func (r ApiListInstanceTypesRequest) MaximumNetworkInterfaces(maximumNetworkInterfaces int32) ApiListInstanceTypesRequest {
	r.maximumNetworkInterfaces = &maximumNetworkInterfaces
	return r
}

// 프로세서 이름
func (r ApiListInstanceTypesRequest) Processor(processor string) ApiListInstanceTypesRequest {
	r.processor = &processor
	return r
}

// 리소스가 생성된 시간 &lt;br/&gt; - ISO_8601 형식  &lt;br/&gt; - UTC 기준
func (r ApiListInstanceTypesRequest) CreatedAt(createdAt string) ApiListInstanceTypesRequest {
	r.createdAt = &createdAt
	return r
}

// 리소스가 마지막으로 수정된 시간 &lt;br/&gt; - ISO_8601 형식  &lt;br/&gt; - UTC 기준
func (r ApiListInstanceTypesRequest) UpdatedAt(updatedAt string) ApiListInstanceTypesRequest {
	r.updatedAt = &updatedAt
	return r
}

// 정렬할 필드를 콤마(,)로 구분
func (r ApiListInstanceTypesRequest) SortKeys(sortKeys string) ApiListInstanceTypesRequest {
	r.sortKeys = &sortKeys
	return r
}

// 정렬 방향 (&#x60;asc&#x60;, &#x60;desc&#x60;)
func (r ApiListInstanceTypesRequest) SortDirs(sortDirs string) ApiListInstanceTypesRequest {
	r.sortDirs = &sortDirs
	return r
}

// 페이지당 최대 반환 항목 수
func (r ApiListInstanceTypesRequest) Limit(limit int32) ApiListInstanceTypesRequest {
	r.limit = &limit
	return r
}

// 조회 시작 위치
func (r ApiListInstanceTypesRequest) Offset(offset int32) ApiListInstanceTypesRequest {
	r.offset = &offset
	return r
}

func (r ApiListInstanceTypesRequest) Execute() (*FlavorListModel, *http.Response, error) {
	return r.ApiService.ListInstanceTypesExecute(r)
}

/*
ListInstanceTypes List instance types (flavors)

등록된 인스턴스 유형(Flavor) 목록을 조회합니다. <br/>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListInstanceTypesRequest
*/
func (a *FlavorAPIService) ListInstanceTypes(ctx context.Context) ApiListInstanceTypesRequest {
	return ApiListInstanceTypesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FlavorListModel
func (a *FlavorAPIService) ListInstanceTypesExecute(r ApiListInstanceTypesRequest) (*FlavorListModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FlavorListModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorAPIService.ListInstanceTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/flavors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.isBurstable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_burstable", r.isBurstable, "form", "")
	}
	if r.vcpus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vcpus", r.vcpus, "form", "")
	}
	if r.architecture != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "architecture", r.architecture, "form", "")
	}
	if r.memoryMb != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "memory_mb", r.memoryMb, "form", "")
	}
	if r.instanceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instance_type", r.instanceType, "form", "")
	}
	if r.instanceFamily != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instance_family", r.instanceFamily, "form", "")
	}
	if r.instanceSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instance_size", r.instanceSize, "form", "")
	}
	if r.manufacturer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", r.manufacturer, "form", "")
	}
	if r.maximumNetworkInterfaces != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_network_interfaces", r.maximumNetworkInterfaces, "form", "")
	}
	if r.processor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processor", r.processor, "form", "")
	}
	if r.createdAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at", r.createdAt, "form", "")
	}
	if r.updatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at", r.updatedAt, "form", "")
	}
	if r.sortKeys != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_keys", r.sortKeys, "form", "")
	} else {
		var defaultValue string = "created_at"
		r.sortKeys = &defaultValue
	}
	if r.sortDirs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_dirs", r.sortDirs, "form", "")
	} else {
		var defaultValue string = "desc"
		r.sortDirs = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 20
		r.limit = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
