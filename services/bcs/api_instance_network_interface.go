/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type InstanceNetworkInterfaceAPI interface {

	/*
		AttachNetworkInterface Attach network interface

		인스턴스에 [네트워크 인터페이스](https://docs.kakaocloud.com/service/bns/vpc/main/vpc-network-interface)를 연결합니다.
	네트워크 인터페이스는 가상 네트워크 카드로, VPC에서 리소스가 논리적으로 연결되어 통신할 수 있게 하는 구성 요소입니다. 연결 가능한 최대 개수는 인스턴스 유형(flavor) 및 네트워크 구성에 따라 달라집니다.

	:::info 안내
	인스턴스는 `Active`(실행 중) 또는 `Stopped`(정지) 상태에서만 네트워크 인터페이스를 추가 연결할 수 있습니다.
	인스턴스의 상태는 [Get instance API](https://docs.kakaocloud.com/openapi/bcs/get-instance)를 통해 확인할 수 있습니다.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param instanceId 인스턴스의 고유 ID
		@param networkInterfaceId 인스턴스에 연결할 네트워크 인터페이스 ID
		@return ApiAttachNetworkInterfaceRequest
	*/
	AttachNetworkInterface(ctx context.Context, instanceId string, networkInterfaceId string) ApiAttachNetworkInterfaceRequest

	// AttachNetworkInterfaceExecute executes the request
	//  @return BcsInstanceV1ApiAttachNetworkInterfaceModelResponseInstanceNetworkInterfaceModel
	AttachNetworkInterfaceExecute(r ApiAttachNetworkInterfaceRequest) (*BcsInstanceV1ApiAttachNetworkInterfaceModelResponseInstanceNetworkInterfaceModel, *http.Response, error)

	/*
		DetachNetworkInterface Detach network interface

		인스턴스에서 연결된 네트워크 인터페이스(Network Interface)를 분리합니다. 인스턴스에 연결된 기본(Primary) 네트워크 인터페이스는 분리할 수 없으며, 보조(Secondary) 네트워크 인터페이스만 분리가 가능합니다.

	:::info 안내
	인스턴스가 `Stopped`(정지) 상태일 때 분리 작업을 수행하는 것을 권장합니다.
	:::

	:::caution 주의
	- 이 작업은 인스턴스의 설정 및 네트워크 구성에 따라 정상적인 동작에 영향을 줄 수 있으므로, 네트워크 인터페이스를 분리하기 전에 충분한 영향도 검토가 필요합니다.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param instanceId 인스턴스의 고유 ID
		@param networkInterfaceId 인스턴스에서 분리할 네트워크 인터페이스 ID
		@return ApiDetachNetworkInterfaceRequest
	*/
	DetachNetworkInterface(ctx context.Context, instanceId string, networkInterfaceId string) ApiDetachNetworkInterfaceRequest

	// DetachNetworkInterfaceExecute executes the request
	//  @return interface{}
	DetachNetworkInterfaceExecute(r ApiDetachNetworkInterfaceRequest) (interface{}, *http.Response, error)

	/*
		ListInstanceNetworkInterfaces List instance network interfaces

		인스턴스의 [네트워크 인터페이스](https://docs.kakaocloud.com/service/bns/vpc/main/vpc-network-interface) 목록과 상세 정보(네트워크 인터페이스 ID, 상태, 네트워크 ID 등)를 조회합니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param instanceId 인스턴스의 고유 ID
		@return ApiListInstanceNetworkInterfacesRequest
	*/
	ListInstanceNetworkInterfaces(ctx context.Context, instanceId string) ApiListInstanceNetworkInterfacesRequest

	// ListInstanceNetworkInterfacesExecute executes the request
	//  @return InstanceNetworkInterfaceListModel
	ListInstanceNetworkInterfacesExecute(r ApiListInstanceNetworkInterfacesRequest) (*InstanceNetworkInterfaceListModel, *http.Response, error)

	/*
		UpdateNetworkInterfaceAllowedAddresses Update network interface allowed addresses

		인스턴스에 연결된 네트워크 인터페이스 패킷 송신 허용 IP를 업데이트합니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param instanceId 인스턴스의 고유 ID
		@param networkInterfaceId 인스턴스에 연결된 네트워크 인터페이스 ID
		@return ApiUpdateNetworkInterfaceAllowedAddressesRequest
	*/
	UpdateNetworkInterfaceAllowedAddresses(ctx context.Context, instanceId string, networkInterfaceId string) ApiUpdateNetworkInterfaceAllowedAddressesRequest

	// UpdateNetworkInterfaceAllowedAddressesExecute executes the request
	//  @return BcsInstanceV1ApiUpdateNetworkInterfaceAllowedAddressesModelResponseInstanceNetworkInterfaceModel
	UpdateNetworkInterfaceAllowedAddressesExecute(r ApiUpdateNetworkInterfaceAllowedAddressesRequest) (*BcsInstanceV1ApiUpdateNetworkInterfaceAllowedAddressesModelResponseInstanceNetworkInterfaceModel, *http.Response, error)
}

// InstanceNetworkInterfaceAPIService InstanceNetworkInterfaceAPI service
type InstanceNetworkInterfaceAPIService service

type ApiAttachNetworkInterfaceRequest struct {
	ctx                context.Context
	ApiService         InstanceNetworkInterfaceAPI
	instanceId         string
	networkInterfaceId string
	xAuthToken         *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiAttachNetworkInterfaceRequest) XAuthToken(xAuthToken string) ApiAttachNetworkInterfaceRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiAttachNetworkInterfaceRequest) Execute() (*BcsInstanceV1ApiAttachNetworkInterfaceModelResponseInstanceNetworkInterfaceModel, *http.Response, error) {
	return r.ApiService.AttachNetworkInterfaceExecute(r)
}

/*
AttachNetworkInterface Attach network interface

인스턴스에 [네트워크 인터페이스](https://docs.kakaocloud.com/service/bns/vpc/main/vpc-network-interface)를 연결합니다.
네트워크 인터페이스는 가상 네트워크 카드로, VPC에서 리소스가 논리적으로 연결되어 통신할 수 있게 하는 구성 요소입니다. 연결 가능한 최대 개수는 인스턴스 유형(flavor) 및 네트워크 구성에 따라 달라집니다.

:::info 안내
인스턴스는 `Active`(실행 중) 또는 `Stopped`(정지) 상태에서만 네트워크 인터페이스를 추가 연결할 수 있습니다.
인스턴스의 상태는 [Get instance API](https://docs.kakaocloud.com/openapi/bcs/get-instance)를 통해 확인할 수 있습니다.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId 인스턴스의 고유 ID
	@param networkInterfaceId 인스턴스에 연결할 네트워크 인터페이스 ID
	@return ApiAttachNetworkInterfaceRequest
*/
func (a *InstanceNetworkInterfaceAPIService) AttachNetworkInterface(ctx context.Context, instanceId string, networkInterfaceId string) ApiAttachNetworkInterfaceRequest {
	return ApiAttachNetworkInterfaceRequest{
		ApiService:         a,
		ctx:                ctx,
		instanceId:         instanceId,
		networkInterfaceId: networkInterfaceId,
	}
}

// Execute executes the request
//
//	@return BcsInstanceV1ApiAttachNetworkInterfaceModelResponseInstanceNetworkInterfaceModel
func (a *InstanceNetworkInterfaceAPIService) AttachNetworkInterfaceExecute(r ApiAttachNetworkInterfaceRequest) (*BcsInstanceV1ApiAttachNetworkInterfaceModelResponseInstanceNetworkInterfaceModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BcsInstanceV1ApiAttachNetworkInterfaceModelResponseInstanceNetworkInterfaceModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstanceNetworkInterfaceAPIService.AttachNetworkInterface")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/instances/{instance_id}/network-interfaces/{network_interface_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_id"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"network_interface_id"+"}", url.PathEscape(parameterValueToString(r.networkInterfaceId, "networkInterfaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDetachNetworkInterfaceRequest struct {
	ctx                context.Context
	ApiService         InstanceNetworkInterfaceAPI
	instanceId         string
	networkInterfaceId string
	xAuthToken         *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiDetachNetworkInterfaceRequest) XAuthToken(xAuthToken string) ApiDetachNetworkInterfaceRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiDetachNetworkInterfaceRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.DetachNetworkInterfaceExecute(r)
}

/*
DetachNetworkInterface Detach network interface

인스턴스에서 연결된 네트워크 인터페이스(Network Interface)를 분리합니다. 인스턴스에 연결된 기본(Primary) 네트워크 인터페이스는 분리할 수 없으며, 보조(Secondary) 네트워크 인터페이스만 분리가 가능합니다.

:::info 안내
인스턴스가 `Stopped`(정지) 상태일 때 분리 작업을 수행하는 것을 권장합니다.
:::

:::caution 주의
- 이 작업은 인스턴스의 설정 및 네트워크 구성에 따라 정상적인 동작에 영향을 줄 수 있으므로, 네트워크 인터페이스를 분리하기 전에 충분한 영향도 검토가 필요합니다.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId 인스턴스의 고유 ID
	@param networkInterfaceId 인스턴스에서 분리할 네트워크 인터페이스 ID
	@return ApiDetachNetworkInterfaceRequest
*/
func (a *InstanceNetworkInterfaceAPIService) DetachNetworkInterface(ctx context.Context, instanceId string, networkInterfaceId string) ApiDetachNetworkInterfaceRequest {
	return ApiDetachNetworkInterfaceRequest{
		ApiService:         a,
		ctx:                ctx,
		instanceId:         instanceId,
		networkInterfaceId: networkInterfaceId,
	}
}

// Execute executes the request
//
//	@return interface{}
func (a *InstanceNetworkInterfaceAPIService) DetachNetworkInterfaceExecute(r ApiDetachNetworkInterfaceRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstanceNetworkInterfaceAPIService.DetachNetworkInterface")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/instances/{instance_id}/network-interfaces/{network_interface_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_id"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"network_interface_id"+"}", url.PathEscape(parameterValueToString(r.networkInterfaceId, "networkInterfaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListInstanceNetworkInterfacesRequest struct {
	ctx        context.Context
	ApiService InstanceNetworkInterfaceAPI
	instanceId string
	xAuthToken *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiListInstanceNetworkInterfacesRequest) XAuthToken(xAuthToken string) ApiListInstanceNetworkInterfacesRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiListInstanceNetworkInterfacesRequest) Execute() (*InstanceNetworkInterfaceListModel, *http.Response, error) {
	return r.ApiService.ListInstanceNetworkInterfacesExecute(r)
}

/*
ListInstanceNetworkInterfaces List instance network interfaces

인스턴스의 [네트워크 인터페이스](https://docs.kakaocloud.com/service/bns/vpc/main/vpc-network-interface) 목록과 상세 정보(네트워크 인터페이스 ID, 상태, 네트워크 ID 등)를 조회합니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId 인스턴스의 고유 ID
	@return ApiListInstanceNetworkInterfacesRequest
*/
func (a *InstanceNetworkInterfaceAPIService) ListInstanceNetworkInterfaces(ctx context.Context, instanceId string) ApiListInstanceNetworkInterfacesRequest {
	return ApiListInstanceNetworkInterfacesRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//
//	@return InstanceNetworkInterfaceListModel
func (a *InstanceNetworkInterfaceAPIService) ListInstanceNetworkInterfacesExecute(r ApiListInstanceNetworkInterfacesRequest) (*InstanceNetworkInterfaceListModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InstanceNetworkInterfaceListModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstanceNetworkInterfaceAPIService.ListInstanceNetworkInterfaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/instances/{instance_id}/network-interfaces"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_id"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateNetworkInterfaceAllowedAddressesRequest struct {
	ctx                                        context.Context
	ApiService                                 InstanceNetworkInterfaceAPI
	instanceId                                 string
	networkInterfaceId                         string
	xAuthToken                                 *string
	bodyUpdateNetworkInterfaceAllowedAddresses *BodyUpdateNetworkInterfaceAllowedAddresses
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiUpdateNetworkInterfaceAllowedAddressesRequest) XAuthToken(xAuthToken string) ApiUpdateNetworkInterfaceAllowedAddressesRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiUpdateNetworkInterfaceAllowedAddressesRequest) BodyUpdateNetworkInterfaceAllowedAddresses(bodyUpdateNetworkInterfaceAllowedAddresses BodyUpdateNetworkInterfaceAllowedAddresses) ApiUpdateNetworkInterfaceAllowedAddressesRequest {
	r.bodyUpdateNetworkInterfaceAllowedAddresses = &bodyUpdateNetworkInterfaceAllowedAddresses
	return r
}

func (r ApiUpdateNetworkInterfaceAllowedAddressesRequest) Execute() (*BcsInstanceV1ApiUpdateNetworkInterfaceAllowedAddressesModelResponseInstanceNetworkInterfaceModel, *http.Response, error) {
	return r.ApiService.UpdateNetworkInterfaceAllowedAddressesExecute(r)
}

/*
UpdateNetworkInterfaceAllowedAddresses Update network interface allowed addresses

인스턴스에 연결된 네트워크 인터페이스 패킷 송신 허용 IP를 업데이트합니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId 인스턴스의 고유 ID
	@param networkInterfaceId 인스턴스에 연결된 네트워크 인터페이스 ID
	@return ApiUpdateNetworkInterfaceAllowedAddressesRequest
*/
func (a *InstanceNetworkInterfaceAPIService) UpdateNetworkInterfaceAllowedAddresses(ctx context.Context, instanceId string, networkInterfaceId string) ApiUpdateNetworkInterfaceAllowedAddressesRequest {
	return ApiUpdateNetworkInterfaceAllowedAddressesRequest{
		ApiService:         a,
		ctx:                ctx,
		instanceId:         instanceId,
		networkInterfaceId: networkInterfaceId,
	}
}

// Execute executes the request
//
//	@return BcsInstanceV1ApiUpdateNetworkInterfaceAllowedAddressesModelResponseInstanceNetworkInterfaceModel
func (a *InstanceNetworkInterfaceAPIService) UpdateNetworkInterfaceAllowedAddressesExecute(r ApiUpdateNetworkInterfaceAllowedAddressesRequest) (*BcsInstanceV1ApiUpdateNetworkInterfaceAllowedAddressesModelResponseInstanceNetworkInterfaceModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BcsInstanceV1ApiUpdateNetworkInterfaceAllowedAddressesModelResponseInstanceNetworkInterfaceModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstanceNetworkInterfaceAPIService.UpdateNetworkInterfaceAllowedAddresses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/instances/{instance_id}/network-interfaces/{network_interface_id}/allowed-address-pairs"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_id"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"network_interface_id"+"}", url.PathEscape(parameterValueToString(r.networkInterfaceId, "networkInterfaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}
	if r.bodyUpdateNetworkInterfaceAllowedAddresses == nil {
		return localVarReturnValue, nil, reportError("bodyUpdateNetworkInterfaceAllowedAddresses is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	// body params
	localVarPostBody = r.bodyUpdateNetworkInterfaceAllowedAddresses
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
