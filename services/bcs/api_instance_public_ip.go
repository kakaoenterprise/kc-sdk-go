/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type InstancePublicIPAPI interface {

	/*
		AssociateNewPublicIp Associate new public IP

		인스턴스의 네트워크 인터페이스에 새 퍼블릭 IP를 연결합니다. <br/>
	퍼블릭 IP가 아직 연결되지 않은 네트워크 인터페이스에만 사용할 수 있습니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param instanceId 인스턴스의 고유 ID
		@param networkInterfaceId 퍼블릭 IP를 연결할 대상 네트워크 인터페이스 ID
		@return ApiAssociateNewPublicIpRequest
	*/
	AssociateNewPublicIp(ctx context.Context, instanceId string, networkInterfaceId string) ApiAssociateNewPublicIpRequest

	// AssociateNewPublicIpExecute executes the request
	//  @return BcsInstanceV1ApiAssociateNewPublicIpModelResponsePublicIpModel
	AssociateNewPublicIpExecute(r ApiAssociateNewPublicIpRequest) (*BcsInstanceV1ApiAssociateNewPublicIpModelResponsePublicIpModel, *http.Response, error)

	/*
		AssociatePublicIp Associate public IP

		지정한 인스턴스의 네트워크 인터페이스에 기존 퍼블릭 IP를 연결합니다.
	퍼블릭 IP가 아직 연결되지 않은 네트워크 인터페이스에만 사용할 수 있습니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param instanceId 인스턴스의 고유 ID
		@param networkInterfaceId 퍼블릭 IP를 연결할 대상 네트워크 인터페이스 ID
		@param publicIpId 인스턴스에 연결할 퍼블릭 IP의 ID
		@return ApiAssociatePublicIpRequest
	*/
	AssociatePublicIp(ctx context.Context, instanceId string, networkInterfaceId string, publicIpId string) ApiAssociatePublicIpRequest

	// AssociatePublicIpExecute executes the request
	//  @return BcsInstanceV1ApiAssociatePublicIpModelResponsePublicIpModel
	AssociatePublicIpExecute(r ApiAssociatePublicIpRequest) (*BcsInstanceV1ApiAssociatePublicIpModelResponsePublicIpModel, *http.Response, error)

	/*
		RemovePublicIp Remove public IP

		인스턴스에 연결된 퍼블릭 IP를 연결 해제 또는 해제 후 삭제합니다.

	:::caution 주의
	퍼블릭 IP 연결 해제 시, 해당 IP를 사용하던 서비스에 접속 장애가 발생할 수 있습니다. 서비스 중단을 피하려면 퍼블릭 IP를 제거하기 전에 다른 대체 IP를 설정하거나 다른 네트워크 인터페이스에 할당해 주세요.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param instanceId 인스턴스의 고유 ID
		@param networkInterfaceId 퍼블릭 IP를 분리할 네트워크 인터페이스 ID
		@return ApiRemovePublicIpRequest
	*/
	RemovePublicIp(ctx context.Context, instanceId string, networkInterfaceId string) ApiRemovePublicIpRequest

	// RemovePublicIpExecute executes the request
	//  @return BcsInstanceV1ApiRemovePublicIpModelResponsePublicIpModel
	RemovePublicIpExecute(r ApiRemovePublicIpRequest) (*BcsInstanceV1ApiRemovePublicIpModelResponsePublicIpModel, *http.Response, error)
}

// InstancePublicIPAPIService InstancePublicIPAPI service
type InstancePublicIPAPIService service

type ApiAssociateNewPublicIpRequest struct {
	ctx                context.Context
	ApiService         InstancePublicIPAPI
	instanceId         string
	networkInterfaceId string
	xAuthToken         *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiAssociateNewPublicIpRequest) XAuthToken(xAuthToken string) ApiAssociateNewPublicIpRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiAssociateNewPublicIpRequest) Execute() (*BcsInstanceV1ApiAssociateNewPublicIpModelResponsePublicIpModel, *http.Response, error) {
	return r.ApiService.AssociateNewPublicIpExecute(r)
}

/*
AssociateNewPublicIp Associate new public IP

인스턴스의 네트워크 인터페이스에 새 퍼블릭 IP를 연결합니다. <br/>
퍼블릭 IP가 아직 연결되지 않은 네트워크 인터페이스에만 사용할 수 있습니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId 인스턴스의 고유 ID
	@param networkInterfaceId 퍼블릭 IP를 연결할 대상 네트워크 인터페이스 ID
	@return ApiAssociateNewPublicIpRequest
*/
func (a *InstancePublicIPAPIService) AssociateNewPublicIp(ctx context.Context, instanceId string, networkInterfaceId string) ApiAssociateNewPublicIpRequest {
	return ApiAssociateNewPublicIpRequest{
		ApiService:         a,
		ctx:                ctx,
		instanceId:         instanceId,
		networkInterfaceId: networkInterfaceId,
	}
}

// Execute executes the request
//
//	@return BcsInstanceV1ApiAssociateNewPublicIpModelResponsePublicIpModel
func (a *InstancePublicIPAPIService) AssociateNewPublicIpExecute(r ApiAssociateNewPublicIpRequest) (*BcsInstanceV1ApiAssociateNewPublicIpModelResponsePublicIpModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BcsInstanceV1ApiAssociateNewPublicIpModelResponsePublicIpModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstancePublicIPAPIService.AssociateNewPublicIp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/instances/{instance_id}/network-interfaces/{network_interface_id}/public-ips"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_id"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"network_interface_id"+"}", url.PathEscape(parameterValueToString(r.networkInterfaceId, "networkInterfaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAssociatePublicIpRequest struct {
	ctx                context.Context
	ApiService         InstancePublicIPAPI
	instanceId         string
	networkInterfaceId string
	publicIpId         string
	xAuthToken         *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiAssociatePublicIpRequest) XAuthToken(xAuthToken string) ApiAssociatePublicIpRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiAssociatePublicIpRequest) Execute() (*BcsInstanceV1ApiAssociatePublicIpModelResponsePublicIpModel, *http.Response, error) {
	return r.ApiService.AssociatePublicIpExecute(r)
}

/*
AssociatePublicIp Associate public IP

지정한 인스턴스의 네트워크 인터페이스에 기존 퍼블릭 IP를 연결합니다.
퍼블릭 IP가 아직 연결되지 않은 네트워크 인터페이스에만 사용할 수 있습니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId 인스턴스의 고유 ID
	@param networkInterfaceId 퍼블릭 IP를 연결할 대상 네트워크 인터페이스 ID
	@param publicIpId 인스턴스에 연결할 퍼블릭 IP의 ID
	@return ApiAssociatePublicIpRequest
*/
func (a *InstancePublicIPAPIService) AssociatePublicIp(ctx context.Context, instanceId string, networkInterfaceId string, publicIpId string) ApiAssociatePublicIpRequest {
	return ApiAssociatePublicIpRequest{
		ApiService:         a,
		ctx:                ctx,
		instanceId:         instanceId,
		networkInterfaceId: networkInterfaceId,
		publicIpId:         publicIpId,
	}
}

// Execute executes the request
//
//	@return BcsInstanceV1ApiAssociatePublicIpModelResponsePublicIpModel
func (a *InstancePublicIPAPIService) AssociatePublicIpExecute(r ApiAssociatePublicIpRequest) (*BcsInstanceV1ApiAssociatePublicIpModelResponsePublicIpModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BcsInstanceV1ApiAssociatePublicIpModelResponsePublicIpModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstancePublicIPAPIService.AssociatePublicIp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/instances/{instance_id}/network-interfaces/{network_interface_id}/public-ips/{public_ip_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_id"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"network_interface_id"+"}", url.PathEscape(parameterValueToString(r.networkInterfaceId, "networkInterfaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"public_ip_id"+"}", url.PathEscape(parameterValueToString(r.publicIpId, "publicIpId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemovePublicIpRequest struct {
	ctx                context.Context
	ApiService         InstancePublicIPAPI
	instanceId         string
	networkInterfaceId string
	xAuthToken         *string
	isDelete           *bool
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiRemovePublicIpRequest) XAuthToken(xAuthToken string) ApiRemovePublicIpRequest {
	r.xAuthToken = &xAuthToken
	return r
}

// 퍼블릭 IP 연결 해제 후 즉시 삭제할지 여부
func (r ApiRemovePublicIpRequest) IsDelete(isDelete bool) ApiRemovePublicIpRequest {
	r.isDelete = &isDelete
	return r
}

func (r ApiRemovePublicIpRequest) Execute() (*BcsInstanceV1ApiRemovePublicIpModelResponsePublicIpModel, *http.Response, error) {
	return r.ApiService.RemovePublicIpExecute(r)
}

/*
RemovePublicIp Remove public IP

인스턴스에 연결된 퍼블릭 IP를 연결 해제 또는 해제 후 삭제합니다.

:::caution 주의
퍼블릭 IP 연결 해제 시, 해당 IP를 사용하던 서비스에 접속 장애가 발생할 수 있습니다. 서비스 중단을 피하려면 퍼블릭 IP를 제거하기 전에 다른 대체 IP를 설정하거나 다른 네트워크 인터페이스에 할당해 주세요.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId 인스턴스의 고유 ID
	@param networkInterfaceId 퍼블릭 IP를 분리할 네트워크 인터페이스 ID
	@return ApiRemovePublicIpRequest
*/
func (a *InstancePublicIPAPIService) RemovePublicIp(ctx context.Context, instanceId string, networkInterfaceId string) ApiRemovePublicIpRequest {
	return ApiRemovePublicIpRequest{
		ApiService:         a,
		ctx:                ctx,
		instanceId:         instanceId,
		networkInterfaceId: networkInterfaceId,
	}
}

// Execute executes the request
//
//	@return BcsInstanceV1ApiRemovePublicIpModelResponsePublicIpModel
func (a *InstancePublicIPAPIService) RemovePublicIpExecute(r ApiRemovePublicIpRequest) (*BcsInstanceV1ApiRemovePublicIpModelResponsePublicIpModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BcsInstanceV1ApiRemovePublicIpModelResponsePublicIpModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstancePublicIPAPIService.RemovePublicIp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/instances/{instance_id}/network-interfaces/{network_interface_id}/public-ips"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_id"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"network_interface_id"+"}", url.PathEscape(parameterValueToString(r.networkInterfaceId, "networkInterfaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	if r.isDelete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_delete", r.isDelete, "form", "")
	} else {
		var defaultValue bool = false
		r.isDelete = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
