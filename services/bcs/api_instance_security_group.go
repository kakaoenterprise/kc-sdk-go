/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type InstanceSecurityGroupAPI interface {

	/*
		AttachSecurityGroup Attach security group

		인스턴스에 보안 그룹을 연결합니다.

	:::info 안내
	Bare Metal Server(BMS) 인스턴스의 경우,  보안 그룹을 할당해도 규칙이 적용되지 않습니다. 이 기능은 추후 지원 예정입니다.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param instanceId 인스턴스의 고유 ID
		@param networkInterfaceId 보안 그룹을 연결할 네트워크 인터페이스 ID
		@param securityGroupId 보안 그룹의 고유 ID
		@return ApiAttachSecurityGroupRequest
	*/
	AttachSecurityGroup(ctx context.Context, instanceId string, networkInterfaceId string, securityGroupId string) ApiAttachSecurityGroupRequest

	// AttachSecurityGroupExecute executes the request
	//  @return ResponseSecurityGroup
	AttachSecurityGroupExecute(r ApiAttachSecurityGroupRequest) (*ResponseSecurityGroup, *http.Response, error)

	/*
		DetachSecurityGroup Detach security group

		인스턴스에 연결된 보안 그룹을 연결 해제합니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param instanceId 인스턴스의 고유 ID
		@param networkInterfaceId 보안 그룹 연결을 해제할 네트워크 인터페이스 ID
		@param securityGroupId 보안 그룹의 고유 ID
		@return ApiDetachSecurityGroupRequest
	*/
	DetachSecurityGroup(ctx context.Context, instanceId string, networkInterfaceId string, securityGroupId string) ApiDetachSecurityGroupRequest

	// DetachSecurityGroupExecute executes the request
	//  @return ResponseSecurityGroup
	DetachSecurityGroupExecute(r ApiDetachSecurityGroupRequest) (*ResponseSecurityGroup, *http.Response, error)
}

// InstanceSecurityGroupAPIService InstanceSecurityGroupAPI service
type InstanceSecurityGroupAPIService service

type ApiAttachSecurityGroupRequest struct {
	ctx                context.Context
	ApiService         InstanceSecurityGroupAPI
	instanceId         string
	networkInterfaceId string
	securityGroupId    string
	xAuthToken         *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiAttachSecurityGroupRequest) XAuthToken(xAuthToken string) ApiAttachSecurityGroupRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiAttachSecurityGroupRequest) Execute() (*ResponseSecurityGroup, *http.Response, error) {
	return r.ApiService.AttachSecurityGroupExecute(r)
}

/*
AttachSecurityGroup Attach security group

인스턴스에 보안 그룹을 연결합니다.

:::info 안내
Bare Metal Server(BMS) 인스턴스의 경우,  보안 그룹을 할당해도 규칙이 적용되지 않습니다. 이 기능은 추후 지원 예정입니다.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId 인스턴스의 고유 ID
	@param networkInterfaceId 보안 그룹을 연결할 네트워크 인터페이스 ID
	@param securityGroupId 보안 그룹의 고유 ID
	@return ApiAttachSecurityGroupRequest
*/
func (a *InstanceSecurityGroupAPIService) AttachSecurityGroup(ctx context.Context, instanceId string, networkInterfaceId string, securityGroupId string) ApiAttachSecurityGroupRequest {
	return ApiAttachSecurityGroupRequest{
		ApiService:         a,
		ctx:                ctx,
		instanceId:         instanceId,
		networkInterfaceId: networkInterfaceId,
		securityGroupId:    securityGroupId,
	}
}

// Execute executes the request
//
//	@return ResponseSecurityGroup
func (a *InstanceSecurityGroupAPIService) AttachSecurityGroupExecute(r ApiAttachSecurityGroupRequest) (*ResponseSecurityGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResponseSecurityGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstanceSecurityGroupAPIService.AttachSecurityGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/instances/{instance_id}/network-interfaces/{network_interface_id}/security-groups/{security_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_id"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"network_interface_id"+"}", url.PathEscape(parameterValueToString(r.networkInterfaceId, "networkInterfaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"security_group_id"+"}", url.PathEscape(parameterValueToString(r.securityGroupId, "securityGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDetachSecurityGroupRequest struct {
	ctx                context.Context
	ApiService         InstanceSecurityGroupAPI
	instanceId         string
	networkInterfaceId string
	securityGroupId    string
	xAuthToken         *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiDetachSecurityGroupRequest) XAuthToken(xAuthToken string) ApiDetachSecurityGroupRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiDetachSecurityGroupRequest) Execute() (*ResponseSecurityGroup, *http.Response, error) {
	return r.ApiService.DetachSecurityGroupExecute(r)
}

/*
DetachSecurityGroup Detach security group

인스턴스에 연결된 보안 그룹을 연결 해제합니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId 인스턴스의 고유 ID
	@param networkInterfaceId 보안 그룹 연결을 해제할 네트워크 인터페이스 ID
	@param securityGroupId 보안 그룹의 고유 ID
	@return ApiDetachSecurityGroupRequest
*/
func (a *InstanceSecurityGroupAPIService) DetachSecurityGroup(ctx context.Context, instanceId string, networkInterfaceId string, securityGroupId string) ApiDetachSecurityGroupRequest {
	return ApiDetachSecurityGroupRequest{
		ApiService:         a,
		ctx:                ctx,
		instanceId:         instanceId,
		networkInterfaceId: networkInterfaceId,
		securityGroupId:    securityGroupId,
	}
}

// Execute executes the request
//
//	@return ResponseSecurityGroup
func (a *InstanceSecurityGroupAPIService) DetachSecurityGroupExecute(r ApiDetachSecurityGroupRequest) (*ResponseSecurityGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResponseSecurityGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstanceSecurityGroupAPIService.DetachSecurityGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/instances/{instance_id}/network-interfaces/{network_interface_id}/security-groups/{security_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_id"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"network_interface_id"+"}", url.PathEscape(parameterValueToString(r.networkInterfaceId, "networkInterfaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"security_group_id"+"}", url.PathEscape(parameterValueToString(r.securityGroupId, "securityGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
