/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type KeypairAPI interface {

	/*
		CreateKeypair Create keypair

		새로운 키 페어를 생성합니다. 키 페어는 VM 인스턴스에 접속할 때 사용되는 자격 증명으로, 인스턴스의 접근 보안을 강화하는 데 중요한 역할을 합니다.
	키 페어는 퍼블릭 키(Public key)와 프라이빗 키(Private key)로 구성되어 있습니다.

	:::caution 주의
	- 키 페어 생성 시 반환되는 프라이빗 키(`private_key`)는 한 번만 제공되며, 이후 다시 조회할 수 없습니다. 반드시 안전한 위치에 저장해 주세요.
	- 프라이빗 키를 분실하거나 유출된 경우, 해당 키로는 인스턴스에 접근할 수 없습니다. 이 경우, 새로운 키 페어를 생성한 뒤 인스턴스에 재등록해야 합니다.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiCreateKeypairRequest
	*/
	CreateKeypair(ctx context.Context) ApiCreateKeypairRequest

	// CreateKeypairExecute executes the request
	//  @return BcsInstanceV1ApiCreateKeypairModelResponseKeypairModel
	CreateKeypairExecute(r ApiCreateKeypairRequest) (*BcsInstanceV1ApiCreateKeypairModelResponseKeypairModel, *http.Response, error)

	/*
		DeleteKeypair Delete keypair

		키 페어를 삭제합니다. 삭제된 키 페어는 더 이상 해당 인스턴스나 시스템에 사용될 수 없습니다.

	:::caution 주의
	- 삭제된 키 페어는 복구할 수 없으며, 삭제 후에는 다시 생성해야 합니다.
	- 삭제된 키 페어가 등록된 인스턴스는 계속 동작하지만, 삭제된 키 페어로는 인스턴스에 접속할 수 없습니다.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param keypairName 삭제할 키 페어의 이름
		@return ApiDeleteKeypairRequest
	*/
	DeleteKeypair(ctx context.Context, keypairName string) ApiDeleteKeypairRequest

	// DeleteKeypairExecute executes the request
	DeleteKeypairExecute(r ApiDeleteKeypairRequest) (*http.Response, error)

	/*
		GetKeypair Get keypair

		키 페어의 상세 정보를 조회합니다. 조회 항목에는 키 페어 이름, 사용자 ID, 생성/수정 시간, 퍼블릭 키, 핑거프린트, 키 유형 등이 포함됩니다.

	:::info 안내
	- 보안상의 이유로 프라이빗 키는 반환되지 않으며, 퍼블릭 키(`public_key`)만 제공됩니다.
	- 프라이빗 키를 분실하거나 유출한 경우, 해당 키로는 인스턴스에 접근할 수 없으므로 새로운 키 페어를 생성한 뒤 인스턴스에 다시 등록해야 합니다.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param keypairName 조회할 키 페어의 이름
		@return ApiGetKeypairRequest
	*/
	GetKeypair(ctx context.Context, keypairName string) ApiGetKeypairRequest

	// GetKeypairExecute executes the request
	//  @return BcsInstanceV1ApiGetKeypairModelResponseKeypairModel
	GetKeypairExecute(r ApiGetKeypairRequest) (*BcsInstanceV1ApiGetKeypairModelResponseKeypairModel, *http.Response, error)

	/*
		ListKeypairs List keypairs

		사용자가 카카오클라우드에서 생성한 키 페어 목록과 각 키 페어의 상세 정보를 조회합니다. <br/>
	키 페어는 퍼블릭 키와 프라이빗 키로 구성된 보안 자격 증명으로, 인스턴스에 SSH 또는 RDP로 안전하게 접속할 때 사용됩니다. 자세한 설명은 [키 페어](https://docs.kakaocloud.com/service/bcs/vm/vm-main#key-pair)를 참고해 주세요.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiListKeypairsRequest
	*/
	ListKeypairs(ctx context.Context) ApiListKeypairsRequest

	// ListKeypairsExecute executes the request
	//  @return KeypairListModel
	ListKeypairsExecute(r ApiListKeypairsRequest) (*KeypairListModel, *http.Response, error)
}

// KeypairAPIService KeypairAPI service
type KeypairAPIService service

type ApiCreateKeypairRequest struct {
	ctx               context.Context
	ApiService        KeypairAPI
	xAuthToken        *string
	bodyCreateKeypair *BodyCreateKeypair
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiCreateKeypairRequest) XAuthToken(xAuthToken string) ApiCreateKeypairRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiCreateKeypairRequest) BodyCreateKeypair(bodyCreateKeypair BodyCreateKeypair) ApiCreateKeypairRequest {
	r.bodyCreateKeypair = &bodyCreateKeypair
	return r
}

func (r ApiCreateKeypairRequest) Execute() (*BcsInstanceV1ApiCreateKeypairModelResponseKeypairModel, *http.Response, error) {
	return r.ApiService.CreateKeypairExecute(r)
}

/*
CreateKeypair Create keypair

새로운 키 페어를 생성합니다. 키 페어는 VM 인스턴스에 접속할 때 사용되는 자격 증명으로, 인스턴스의 접근 보안을 강화하는 데 중요한 역할을 합니다.
키 페어는 퍼블릭 키(Public key)와 프라이빗 키(Private key)로 구성되어 있습니다.

:::caution 주의
- 키 페어 생성 시 반환되는 프라이빗 키(`private_key`)는 한 번만 제공되며, 이후 다시 조회할 수 없습니다. 반드시 안전한 위치에 저장해 주세요.
- 프라이빗 키를 분실하거나 유출된 경우, 해당 키로는 인스턴스에 접근할 수 없습니다. 이 경우, 새로운 키 페어를 생성한 뒤 인스턴스에 재등록해야 합니다.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateKeypairRequest
*/
func (a *KeypairAPIService) CreateKeypair(ctx context.Context) ApiCreateKeypairRequest {
	return ApiCreateKeypairRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BcsInstanceV1ApiCreateKeypairModelResponseKeypairModel
func (a *KeypairAPIService) CreateKeypairExecute(r ApiCreateKeypairRequest) (*BcsInstanceV1ApiCreateKeypairModelResponseKeypairModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BcsInstanceV1ApiCreateKeypairModelResponseKeypairModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeypairAPIService.CreateKeypair")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/keypairs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}
	if r.bodyCreateKeypair == nil {
		return localVarReturnValue, nil, reportError("bodyCreateKeypair is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	// body params
	localVarPostBody = r.bodyCreateKeypair
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteKeypairRequest struct {
	ctx         context.Context
	ApiService  KeypairAPI
	keypairName string
	xAuthToken  *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiDeleteKeypairRequest) XAuthToken(xAuthToken string) ApiDeleteKeypairRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiDeleteKeypairRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteKeypairExecute(r)
}

/*
DeleteKeypair Delete keypair

키 페어를 삭제합니다. 삭제된 키 페어는 더 이상 해당 인스턴스나 시스템에 사용될 수 없습니다.

:::caution 주의
- 삭제된 키 페어는 복구할 수 없으며, 삭제 후에는 다시 생성해야 합니다.
- 삭제된 키 페어가 등록된 인스턴스는 계속 동작하지만, 삭제된 키 페어로는 인스턴스에 접속할 수 없습니다.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param keypairName 삭제할 키 페어의 이름
	@return ApiDeleteKeypairRequest
*/
func (a *KeypairAPIService) DeleteKeypair(ctx context.Context, keypairName string) ApiDeleteKeypairRequest {
	return ApiDeleteKeypairRequest{
		ApiService:  a,
		ctx:         ctx,
		keypairName: keypairName,
	}
}

// Execute executes the request
func (a *KeypairAPIService) DeleteKeypairExecute(r ApiDeleteKeypairRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeypairAPIService.DeleteKeypair")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/keypairs/{keypair_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"keypair_name"+"}", url.PathEscape(parameterValueToString(r.keypairName, "keypairName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetKeypairRequest struct {
	ctx         context.Context
	ApiService  KeypairAPI
	keypairName string
	xAuthToken  *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiGetKeypairRequest) XAuthToken(xAuthToken string) ApiGetKeypairRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiGetKeypairRequest) Execute() (*BcsInstanceV1ApiGetKeypairModelResponseKeypairModel, *http.Response, error) {
	return r.ApiService.GetKeypairExecute(r)
}

/*
GetKeypair Get keypair

키 페어의 상세 정보를 조회합니다. 조회 항목에는 키 페어 이름, 사용자 ID, 생성/수정 시간, 퍼블릭 키, 핑거프린트, 키 유형 등이 포함됩니다.

:::info 안내
- 보안상의 이유로 프라이빗 키는 반환되지 않으며, 퍼블릭 키(`public_key`)만 제공됩니다.
- 프라이빗 키를 분실하거나 유출한 경우, 해당 키로는 인스턴스에 접근할 수 없으므로 새로운 키 페어를 생성한 뒤 인스턴스에 다시 등록해야 합니다.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param keypairName 조회할 키 페어의 이름
	@return ApiGetKeypairRequest
*/
func (a *KeypairAPIService) GetKeypair(ctx context.Context, keypairName string) ApiGetKeypairRequest {
	return ApiGetKeypairRequest{
		ApiService:  a,
		ctx:         ctx,
		keypairName: keypairName,
	}
}

// Execute executes the request
//
//	@return BcsInstanceV1ApiGetKeypairModelResponseKeypairModel
func (a *KeypairAPIService) GetKeypairExecute(r ApiGetKeypairRequest) (*BcsInstanceV1ApiGetKeypairModelResponseKeypairModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BcsInstanceV1ApiGetKeypairModelResponseKeypairModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeypairAPIService.GetKeypair")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/keypairs/{keypair_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"keypair_name"+"}", url.PathEscape(parameterValueToString(r.keypairName, "keypairName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListKeypairsRequest struct {
	ctx         context.Context
	ApiService  KeypairAPI
	xAuthToken  *string
	id          *string
	name        *string
	type_       *string
	fingerprint *string
	createdAt   *string
	sortKeys    *string
	sortDirs    *string
	limit       *int32
	offset      *int32
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiListKeypairsRequest) XAuthToken(xAuthToken string) ApiListKeypairsRequest {
	r.xAuthToken = &xAuthToken
	return r
}

// 키 페어의 고유 ID
func (r ApiListKeypairsRequest) Id(id string) ApiListKeypairsRequest {
	r.id = &id
	return r
}

// 키 페어의 이름
func (r ApiListKeypairsRequest) Name(name string) ApiListKeypairsRequest {
	r.name = &name
	return r
}

// 키 페어의 유형 &lt;br/&gt; - 예시: ssh, x509 등
func (r ApiListKeypairsRequest) Type_(type_ string) ApiListKeypairsRequest {
	r.type_ = &type_
	return r
}

// 퍼블릭 키의 핑거프린트
func (r ApiListKeypairsRequest) Fingerprint(fingerprint string) ApiListKeypairsRequest {
	r.fingerprint = &fingerprint
	return r
}

// 리소스가 생성된 시간 &lt;br/&gt; - ISO_8601 형식  &lt;br/&gt; - UTC 기준
func (r ApiListKeypairsRequest) CreatedAt(createdAt string) ApiListKeypairsRequest {
	r.createdAt = &createdAt
	return r
}

// 정렬할 필드를 콤마(,)로 구분
func (r ApiListKeypairsRequest) SortKeys(sortKeys string) ApiListKeypairsRequest {
	r.sortKeys = &sortKeys
	return r
}

// 정렬 방향 (&#x60;asc&#x60;, &#x60;desc&#x60;)
func (r ApiListKeypairsRequest) SortDirs(sortDirs string) ApiListKeypairsRequest {
	r.sortDirs = &sortDirs
	return r
}

// 페이지당 최대 반환 항목 수
func (r ApiListKeypairsRequest) Limit(limit int32) ApiListKeypairsRequest {
	r.limit = &limit
	return r
}

// 조회 시작 위치
func (r ApiListKeypairsRequest) Offset(offset int32) ApiListKeypairsRequest {
	r.offset = &offset
	return r
}

func (r ApiListKeypairsRequest) Execute() (*KeypairListModel, *http.Response, error) {
	return r.ApiService.ListKeypairsExecute(r)
}

/*
ListKeypairs List keypairs

사용자가 카카오클라우드에서 생성한 키 페어 목록과 각 키 페어의 상세 정보를 조회합니다. <br/>
키 페어는 퍼블릭 키와 프라이빗 키로 구성된 보안 자격 증명으로, 인스턴스에 SSH 또는 RDP로 안전하게 접속할 때 사용됩니다. 자세한 설명은 [키 페어](https://docs.kakaocloud.com/service/bcs/vm/vm-main#key-pair)를 참고해 주세요.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListKeypairsRequest
*/
func (a *KeypairAPIService) ListKeypairs(ctx context.Context) ApiListKeypairsRequest {
	return ApiListKeypairsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return KeypairListModel
func (a *KeypairAPIService) ListKeypairsExecute(r ApiListKeypairsRequest) (*KeypairListModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *KeypairListModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeypairAPIService.ListKeypairs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/keypairs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.fingerprint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fingerprint", r.fingerprint, "form", "")
	}
	if r.createdAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at", r.createdAt, "form", "")
	}
	if r.sortKeys != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_keys", r.sortKeys, "form", "")
	} else {
		var defaultValue string = "created_at"
		r.sortKeys = &defaultValue
	}
	if r.sortDirs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_dirs", r.sortDirs, "form", "")
	} else {
		var defaultValue string = "desc"
		r.sortDirs = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 20
		r.limit = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
