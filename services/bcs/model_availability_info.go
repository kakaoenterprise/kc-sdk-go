/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AvailabilityInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailabilityInfo{}

// AvailabilityInfo struct for AvailabilityInfo
type AvailabilityInfo struct {
	KrCentral2A int32 `json:"kr_central_2_a"`
	KrCentral2B int32 `json:"kr_central_2_b"`
	KrCentral2C int32 `json:"kr_central_2_c"`
}

type _AvailabilityInfo AvailabilityInfo

// NewAvailabilityInfo instantiates a new AvailabilityInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailabilityInfo(krCentral2A int32, krCentral2B int32, krCentral2C int32) *AvailabilityInfo {
	this := AvailabilityInfo{}
	this.KrCentral2A = krCentral2A
	this.KrCentral2B = krCentral2B
	this.KrCentral2C = krCentral2C
	return &this
}

// NewAvailabilityInfoWithDefaults instantiates a new AvailabilityInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailabilityInfoWithDefaults() *AvailabilityInfo {
	this := AvailabilityInfo{}
	return &this
}

// GetKrCentral2A returns the KrCentral2A field value
func (o *AvailabilityInfo) GetKrCentral2A() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.KrCentral2A
}

// GetKrCentral2AOk returns a tuple with the KrCentral2A field value
// and a boolean to check if the value has been set.
func (o *AvailabilityInfo) GetKrCentral2AOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KrCentral2A, true
}

// SetKrCentral2A sets field value
func (o *AvailabilityInfo) SetKrCentral2A(v int32) {
	o.KrCentral2A = v
}

// GetKrCentral2B returns the KrCentral2B field value
func (o *AvailabilityInfo) GetKrCentral2B() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.KrCentral2B
}

// GetKrCentral2BOk returns a tuple with the KrCentral2B field value
// and a boolean to check if the value has been set.
func (o *AvailabilityInfo) GetKrCentral2BOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KrCentral2B, true
}

// SetKrCentral2B sets field value
func (o *AvailabilityInfo) SetKrCentral2B(v int32) {
	o.KrCentral2B = v
}

// GetKrCentral2C returns the KrCentral2C field value
func (o *AvailabilityInfo) GetKrCentral2C() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.KrCentral2C
}

// GetKrCentral2COk returns a tuple with the KrCentral2C field value
// and a boolean to check if the value has been set.
func (o *AvailabilityInfo) GetKrCentral2COk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KrCentral2C, true
}

// SetKrCentral2C sets field value
func (o *AvailabilityInfo) SetKrCentral2C(v int32) {
	o.KrCentral2C = v
}

func (o AvailabilityInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailabilityInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kr_central_2_a"] = o.KrCentral2A
	toSerialize["kr_central_2_b"] = o.KrCentral2B
	toSerialize["kr_central_2_c"] = o.KrCentral2C
	return toSerialize, nil
}

func (o *AvailabilityInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kr_central_2_a",
		"kr_central_2_b",
		"kr_central_2_c",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAvailabilityInfo := _AvailabilityInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAvailabilityInfo)

	if err != nil {
		return err
	}

	*o = AvailabilityInfo(varAvailabilityInfo)

	return err
}

type NullableAvailabilityInfo struct {
	value *AvailabilityInfo
	isSet bool
}

func (v NullableAvailabilityInfo) Get() *AvailabilityInfo {
	return v.value
}

func (v *NullableAvailabilityInfo) Set(val *AvailabilityInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailabilityInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailabilityInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailabilityInfo(val *AvailabilityInfo) *NullableAvailabilityInfo {
	return &NullableAvailabilityInfo{value: val, isSet: true}
}

func (v NullableAvailabilityInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailabilityInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
