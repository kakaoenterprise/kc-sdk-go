/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
	"fmt"
)

// checks if the BcsInstanceV1ApiCreateKeypairModelKeypairModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BcsInstanceV1ApiCreateKeypairModelKeypairModel{}

// BcsInstanceV1ApiCreateKeypairModelKeypairModel struct for BcsInstanceV1ApiCreateKeypairModelKeypairModel
type BcsInstanceV1ApiCreateKeypairModelKeypairModel struct {
	// 사용자가 지정한 키 페어 이름
	Name string `json:"name"`
	// 키 페어를 생성한 사용자의 ID
	UserId string `json:"user_id"`
	// 퍼블릭 키의 고유 핑거프린트 <br/> - SSH 클라이언트에서 키 검증 시 사용
	Fingerprint string `json:"fingerprint"`
	// 생성된 키 페어의 퍼블릭 키 <br/> - 인스턴스에 등록되어 SSH 접속 시 인증에 사용
	PublicKey  string         `json:"public_key"`
	PrivateKey NullableString `json:"private_key,omitempty"`
	// SSH 키 형식
	Type                 string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _BcsInstanceV1ApiCreateKeypairModelKeypairModel BcsInstanceV1ApiCreateKeypairModelKeypairModel

// NewBcsInstanceV1ApiCreateKeypairModelKeypairModel instantiates a new BcsInstanceV1ApiCreateKeypairModelKeypairModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBcsInstanceV1ApiCreateKeypairModelKeypairModel(name string, userId string, fingerprint string, publicKey string, type_ string) *BcsInstanceV1ApiCreateKeypairModelKeypairModel {
	this := BcsInstanceV1ApiCreateKeypairModelKeypairModel{}
	this.Name = name
	this.UserId = userId
	this.Fingerprint = fingerprint
	this.PublicKey = publicKey
	this.Type = type_
	return &this
}

// NewBcsInstanceV1ApiCreateKeypairModelKeypairModelWithDefaults instantiates a new BcsInstanceV1ApiCreateKeypairModelKeypairModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBcsInstanceV1ApiCreateKeypairModelKeypairModelWithDefaults() *BcsInstanceV1ApiCreateKeypairModelKeypairModel {
	this := BcsInstanceV1ApiCreateKeypairModelKeypairModel{}
	return &this
}

// GetName returns the Name field value
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) SetName(v string) {
	o.Name = v
}

// GetUserId returns the UserId field value
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) SetUserId(v string) {
	o.UserId = v
}

// GetFingerprint returns the Fingerprint field value
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) GetFingerprint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value
// and a boolean to check if the value has been set.
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) GetFingerprintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fingerprint, true
}

// SetFingerprint sets field value
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) SetFingerprint(v string) {
	o.Fingerprint = v
}

// GetPublicKey returns the PublicKey field value
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) GetPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) SetPublicKey(v string) {
	o.PublicKey = v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) GetPrivateKey() string {
	if o == nil || IsNil(o.PrivateKey.Get()) {
		var ret string
		return ret
	}
	return *o.PrivateKey.Get()
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrivateKey.Get(), o.PrivateKey.IsSet()
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) HasPrivateKey() bool {
	if o != nil && o.PrivateKey.IsSet() {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given NullableString and assigns it to the PrivateKey field.
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) SetPrivateKey(v string) {
	o.PrivateKey.Set(&v)
}

// SetPrivateKeyNil sets the value for PrivateKey to be an explicit nil
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) SetPrivateKeyNil() {
	o.PrivateKey.Set(nil)
}

// UnsetPrivateKey ensures that no value is present for PrivateKey, not even an explicit nil
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) UnsetPrivateKey() {
	o.PrivateKey.Unset()
}

// GetType returns the Type field value
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) SetType(v string) {
	o.Type = v
}

func (o BcsInstanceV1ApiCreateKeypairModelKeypairModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BcsInstanceV1ApiCreateKeypairModelKeypairModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["user_id"] = o.UserId
	toSerialize["fingerprint"] = o.Fingerprint
	toSerialize["public_key"] = o.PublicKey
	if o.PrivateKey.IsSet() {
		toSerialize["private_key"] = o.PrivateKey.Get()
	}
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BcsInstanceV1ApiCreateKeypairModelKeypairModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"user_id",
		"fingerprint",
		"public_key",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBcsInstanceV1ApiCreateKeypairModelKeypairModel := _BcsInstanceV1ApiCreateKeypairModelKeypairModel{}

	err = json.Unmarshal(data, &varBcsInstanceV1ApiCreateKeypairModelKeypairModel)

	if err != nil {
		return err
	}

	*o = BcsInstanceV1ApiCreateKeypairModelKeypairModel(varBcsInstanceV1ApiCreateKeypairModelKeypairModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "user_id")
		delete(additionalProperties, "fingerprint")
		delete(additionalProperties, "public_key")
		delete(additionalProperties, "private_key")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBcsInstanceV1ApiCreateKeypairModelKeypairModel struct {
	value *BcsInstanceV1ApiCreateKeypairModelKeypairModel
	isSet bool
}

func (v NullableBcsInstanceV1ApiCreateKeypairModelKeypairModel) Get() *BcsInstanceV1ApiCreateKeypairModelKeypairModel {
	return v.value
}

func (v *NullableBcsInstanceV1ApiCreateKeypairModelKeypairModel) Set(val *BcsInstanceV1ApiCreateKeypairModelKeypairModel) {
	v.value = val
	v.isSet = true
}

func (v NullableBcsInstanceV1ApiCreateKeypairModelKeypairModel) IsSet() bool {
	return v.isSet
}

func (v *NullableBcsInstanceV1ApiCreateKeypairModelKeypairModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBcsInstanceV1ApiCreateKeypairModelKeypairModel(val *BcsInstanceV1ApiCreateKeypairModelKeypairModel) *NullableBcsInstanceV1ApiCreateKeypairModelKeypairModel {
	return &NullableBcsInstanceV1ApiCreateKeypairModelKeypairModel{value: val, isSet: true}
}

func (v NullableBcsInstanceV1ApiCreateKeypairModelKeypairModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBcsInstanceV1ApiCreateKeypairModelKeypairModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
