/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the BcsInstanceV1ApiGetInstanceTypeModelFlavorModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BcsInstanceV1ApiGetInstanceTypeModelFlavorModel{}

// BcsInstanceV1ApiGetInstanceTypeModelFlavorModel struct for BcsInstanceV1ApiGetInstanceTypeModelFlavorModel
type BcsInstanceV1ApiGetInstanceTypeModelFlavorModel struct {
	// 인스턴스 유형 ID
	Id                               string               `json:"id"`
	Name                             NullableString       `json:"name,omitempty"`
	Vcpus                            NullableInt32        `json:"vcpus,omitempty"`
	Description                      NullableString       `json:"description,omitempty"`
	IsBurstable                      NullableBool         `json:"is_burstable,omitempty"`
	Architecture                     NullableString       `json:"architecture,omitempty"`
	Manufacturer                     NullableString       `json:"manufacturer,omitempty"`
	Group                            NullableString       `json:"group,omitempty"`
	InstanceType                     NullableInstanceType `json:"instance_type,omitempty"`
	Processor                        NullableString       `json:"processor,omitempty"`
	MemoryMb                         NullableInt64        `json:"memory_mb,omitempty"`
	CreatedAt                        NullableTime         `json:"created_at,omitempty"`
	UpdatedAt                        NullableTime         `json:"updated_at,omitempty"`
	AvailabilityZone                 []AvailabilityZone   `json:"availability_zone,omitempty"`
	Available                        map[string]int32     `json:"available,omitempty"`
	InstanceFamily                   NullableString       `json:"instance_family,omitempty"`
	InstanceSize                     NullableString       `json:"instance_size,omitempty"`
	DiskType                         NullableString       `json:"disk_type,omitempty"`
	RootGb                           NullableInt32        `json:"root_gb,omitempty"`
	OsDistro                         NullableString       `json:"os_distro,omitempty"`
	HwCount                          NullableInt32        `json:"hw_count,omitempty"`
	HwType                           NullableString       `json:"hw_type,omitempty"`
	HwName                           NullableString       `json:"hw_name,omitempty"`
	MaximumNetworkInterfaces         NullableInt32        `json:"maximum_network_interfaces,omitempty"`
	IsHyperThreadingDisabled         NullableBool         `json:"is_hyper_threading_disabled,omitempty"`
	IsHyperThreadingSupported        NullableBool         `json:"is_hyper_threading_supported,omitempty"`
	IsHyperThreadingDisableSupported NullableBool         `json:"is_hyper_threading_disable_supported,omitempty"`
	AdditionalProperties             map[string]interface{}
}

type _BcsInstanceV1ApiGetInstanceTypeModelFlavorModel BcsInstanceV1ApiGetInstanceTypeModelFlavorModel

// NewBcsInstanceV1ApiGetInstanceTypeModelFlavorModel instantiates a new BcsInstanceV1ApiGetInstanceTypeModelFlavorModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBcsInstanceV1ApiGetInstanceTypeModelFlavorModel(id string) *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel {
	this := BcsInstanceV1ApiGetInstanceTypeModelFlavorModel{}
	this.Id = id
	return &this
}

// NewBcsInstanceV1ApiGetInstanceTypeModelFlavorModelWithDefaults instantiates a new BcsInstanceV1ApiGetInstanceTypeModelFlavorModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBcsInstanceV1ApiGetInstanceTypeModelFlavorModelWithDefaults() *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel {
	this := BcsInstanceV1ApiGetInstanceTypeModelFlavorModel{}
	return &this
}

// GetId returns the Id field value
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetName() {
	o.Name.Unset()
}

// GetVcpus returns the Vcpus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetVcpus() int32 {
	if o == nil || IsNil(o.Vcpus.Get()) {
		var ret int32
		return ret
	}
	return *o.Vcpus.Get()
}

// GetVcpusOk returns a tuple with the Vcpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetVcpusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vcpus.Get(), o.Vcpus.IsSet()
}

// HasVcpus returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasVcpus() bool {
	if o != nil && o.Vcpus.IsSet() {
		return true
	}

	return false
}

// SetVcpus gets a reference to the given NullableInt32 and assigns it to the Vcpus field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetVcpus(v int32) {
	o.Vcpus.Set(&v)
}

// SetVcpusNil sets the value for Vcpus to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetVcpusNil() {
	o.Vcpus.Set(nil)
}

// UnsetVcpus ensures that no value is present for Vcpus, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetVcpus() {
	o.Vcpus.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetDescription() {
	o.Description.Unset()
}

// GetIsBurstable returns the IsBurstable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetIsBurstable() bool {
	if o == nil || IsNil(o.IsBurstable.Get()) {
		var ret bool
		return ret
	}
	return *o.IsBurstable.Get()
}

// GetIsBurstableOk returns a tuple with the IsBurstable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetIsBurstableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsBurstable.Get(), o.IsBurstable.IsSet()
}

// HasIsBurstable returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasIsBurstable() bool {
	if o != nil && o.IsBurstable.IsSet() {
		return true
	}

	return false
}

// SetIsBurstable gets a reference to the given NullableBool and assigns it to the IsBurstable field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetIsBurstable(v bool) {
	o.IsBurstable.Set(&v)
}

// SetIsBurstableNil sets the value for IsBurstable to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetIsBurstableNil() {
	o.IsBurstable.Set(nil)
}

// UnsetIsBurstable ensures that no value is present for IsBurstable, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetIsBurstable() {
	o.IsBurstable.Unset()
}

// GetArchitecture returns the Architecture field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetArchitecture() string {
	if o == nil || IsNil(o.Architecture.Get()) {
		var ret string
		return ret
	}
	return *o.Architecture.Get()
}

// GetArchitectureOk returns a tuple with the Architecture field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetArchitectureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Architecture.Get(), o.Architecture.IsSet()
}

// HasArchitecture returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasArchitecture() bool {
	if o != nil && o.Architecture.IsSet() {
		return true
	}

	return false
}

// SetArchitecture gets a reference to the given NullableString and assigns it to the Architecture field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetArchitecture(v string) {
	o.Architecture.Set(&v)
}

// SetArchitectureNil sets the value for Architecture to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetArchitectureNil() {
	o.Architecture.Set(nil)
}

// UnsetArchitecture ensures that no value is present for Architecture, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetArchitecture() {
	o.Architecture.Unset()
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetManufacturer() string {
	if o == nil || IsNil(o.Manufacturer.Get()) {
		var ret string
		return ret
	}
	return *o.Manufacturer.Get()
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetManufacturerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Manufacturer.Get(), o.Manufacturer.IsSet()
}

// HasManufacturer returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasManufacturer() bool {
	if o != nil && o.Manufacturer.IsSet() {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given NullableString and assigns it to the Manufacturer field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetManufacturer(v string) {
	o.Manufacturer.Set(&v)
}

// SetManufacturerNil sets the value for Manufacturer to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetManufacturerNil() {
	o.Manufacturer.Set(nil)
}

// UnsetManufacturer ensures that no value is present for Manufacturer, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetManufacturer() {
	o.Manufacturer.Unset()
}

// GetGroup returns the Group field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetGroup() string {
	if o == nil || IsNil(o.Group.Get()) {
		var ret string
		return ret
	}
	return *o.Group.Get()
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Group.Get(), o.Group.IsSet()
}

// HasGroup returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasGroup() bool {
	if o != nil && o.Group.IsSet() {
		return true
	}

	return false
}

// SetGroup gets a reference to the given NullableString and assigns it to the Group field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetGroup(v string) {
	o.Group.Set(&v)
}

// SetGroupNil sets the value for Group to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetGroupNil() {
	o.Group.Set(nil)
}

// UnsetGroup ensures that no value is present for Group, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetGroup() {
	o.Group.Unset()
}

// GetInstanceType returns the InstanceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetInstanceType() InstanceType {
	if o == nil || IsNil(o.InstanceType.Get()) {
		var ret InstanceType
		return ret
	}
	return *o.InstanceType.Get()
}

// GetInstanceTypeOk returns a tuple with the InstanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetInstanceTypeOk() (*InstanceType, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstanceType.Get(), o.InstanceType.IsSet()
}

// HasInstanceType returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasInstanceType() bool {
	if o != nil && o.InstanceType.IsSet() {
		return true
	}

	return false
}

// SetInstanceType gets a reference to the given NullableInstanceType and assigns it to the InstanceType field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetInstanceType(v InstanceType) {
	o.InstanceType.Set(&v)
}

// SetInstanceTypeNil sets the value for InstanceType to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetInstanceTypeNil() {
	o.InstanceType.Set(nil)
}

// UnsetInstanceType ensures that no value is present for InstanceType, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetInstanceType() {
	o.InstanceType.Unset()
}

// GetProcessor returns the Processor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetProcessor() string {
	if o == nil || IsNil(o.Processor.Get()) {
		var ret string
		return ret
	}
	return *o.Processor.Get()
}

// GetProcessorOk returns a tuple with the Processor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetProcessorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Processor.Get(), o.Processor.IsSet()
}

// HasProcessor returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasProcessor() bool {
	if o != nil && o.Processor.IsSet() {
		return true
	}

	return false
}

// SetProcessor gets a reference to the given NullableString and assigns it to the Processor field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetProcessor(v string) {
	o.Processor.Set(&v)
}

// SetProcessorNil sets the value for Processor to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetProcessorNil() {
	o.Processor.Set(nil)
}

// UnsetProcessor ensures that no value is present for Processor, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetProcessor() {
	o.Processor.Unset()
}

// GetMemoryMb returns the MemoryMb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetMemoryMb() int64 {
	if o == nil || IsNil(o.MemoryMb.Get()) {
		var ret int64
		return ret
	}
	return *o.MemoryMb.Get()
}

// GetMemoryMbOk returns a tuple with the MemoryMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetMemoryMbOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MemoryMb.Get(), o.MemoryMb.IsSet()
}

// HasMemoryMb returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasMemoryMb() bool {
	if o != nil && o.MemoryMb.IsSet() {
		return true
	}

	return false
}

// SetMemoryMb gets a reference to the given NullableInt64 and assigns it to the MemoryMb field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetMemoryMb(v int64) {
	o.MemoryMb.Set(&v)
}

// SetMemoryMbNil sets the value for MemoryMb to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetMemoryMbNil() {
	o.MemoryMb.Set(nil)
}

// UnsetMemoryMb ensures that no value is present for MemoryMb, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetMemoryMb() {
	o.MemoryMb.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given NullableTime and assigns it to the CreatedAt field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetCreatedAt(v time.Time) {
	o.CreatedAt.Set(&v)
}

// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given NullableTime and assigns it to the UpdatedAt field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}

// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

// GetAvailabilityZone returns the AvailabilityZone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetAvailabilityZone() []AvailabilityZone {
	if o == nil {
		var ret []AvailabilityZone
		return ret
	}
	return o.AvailabilityZone
}

// GetAvailabilityZoneOk returns a tuple with the AvailabilityZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetAvailabilityZoneOk() ([]AvailabilityZone, bool) {
	if o == nil || IsNil(o.AvailabilityZone) {
		return nil, false
	}
	return o.AvailabilityZone, true
}

// HasAvailabilityZone returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasAvailabilityZone() bool {
	if o != nil && !IsNil(o.AvailabilityZone) {
		return true
	}

	return false
}

// SetAvailabilityZone gets a reference to the given []AvailabilityZone and assigns it to the AvailabilityZone field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetAvailabilityZone(v []AvailabilityZone) {
	o.AvailabilityZone = v
}

// GetAvailable returns the Available field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetAvailable() map[string]int32 {
	if o == nil {
		var ret map[string]int32
		return ret
	}
	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetAvailableOk() (map[string]int32, bool) {
	if o == nil || IsNil(o.Available) {
		return map[string]int32{}, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given map[string]int32 and assigns it to the Available field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetAvailable(v map[string]int32) {
	o.Available = v
}

// GetInstanceFamily returns the InstanceFamily field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetInstanceFamily() string {
	if o == nil || IsNil(o.InstanceFamily.Get()) {
		var ret string
		return ret
	}
	return *o.InstanceFamily.Get()
}

// GetInstanceFamilyOk returns a tuple with the InstanceFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetInstanceFamilyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstanceFamily.Get(), o.InstanceFamily.IsSet()
}

// HasInstanceFamily returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasInstanceFamily() bool {
	if o != nil && o.InstanceFamily.IsSet() {
		return true
	}

	return false
}

// SetInstanceFamily gets a reference to the given NullableString and assigns it to the InstanceFamily field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetInstanceFamily(v string) {
	o.InstanceFamily.Set(&v)
}

// SetInstanceFamilyNil sets the value for InstanceFamily to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetInstanceFamilyNil() {
	o.InstanceFamily.Set(nil)
}

// UnsetInstanceFamily ensures that no value is present for InstanceFamily, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetInstanceFamily() {
	o.InstanceFamily.Unset()
}

// GetInstanceSize returns the InstanceSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetInstanceSize() string {
	if o == nil || IsNil(o.InstanceSize.Get()) {
		var ret string
		return ret
	}
	return *o.InstanceSize.Get()
}

// GetInstanceSizeOk returns a tuple with the InstanceSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetInstanceSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstanceSize.Get(), o.InstanceSize.IsSet()
}

// HasInstanceSize returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasInstanceSize() bool {
	if o != nil && o.InstanceSize.IsSet() {
		return true
	}

	return false
}

// SetInstanceSize gets a reference to the given NullableString and assigns it to the InstanceSize field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetInstanceSize(v string) {
	o.InstanceSize.Set(&v)
}

// SetInstanceSizeNil sets the value for InstanceSize to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetInstanceSizeNil() {
	o.InstanceSize.Set(nil)
}

// UnsetInstanceSize ensures that no value is present for InstanceSize, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetInstanceSize() {
	o.InstanceSize.Unset()
}

// GetDiskType returns the DiskType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetDiskType() string {
	if o == nil || IsNil(o.DiskType.Get()) {
		var ret string
		return ret
	}
	return *o.DiskType.Get()
}

// GetDiskTypeOk returns a tuple with the DiskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetDiskTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiskType.Get(), o.DiskType.IsSet()
}

// HasDiskType returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasDiskType() bool {
	if o != nil && o.DiskType.IsSet() {
		return true
	}

	return false
}

// SetDiskType gets a reference to the given NullableString and assigns it to the DiskType field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetDiskType(v string) {
	o.DiskType.Set(&v)
}

// SetDiskTypeNil sets the value for DiskType to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetDiskTypeNil() {
	o.DiskType.Set(nil)
}

// UnsetDiskType ensures that no value is present for DiskType, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetDiskType() {
	o.DiskType.Unset()
}

// GetRootGb returns the RootGb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetRootGb() int32 {
	if o == nil || IsNil(o.RootGb.Get()) {
		var ret int32
		return ret
	}
	return *o.RootGb.Get()
}

// GetRootGbOk returns a tuple with the RootGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetRootGbOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootGb.Get(), o.RootGb.IsSet()
}

// HasRootGb returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasRootGb() bool {
	if o != nil && o.RootGb.IsSet() {
		return true
	}

	return false
}

// SetRootGb gets a reference to the given NullableInt32 and assigns it to the RootGb field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetRootGb(v int32) {
	o.RootGb.Set(&v)
}

// SetRootGbNil sets the value for RootGb to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetRootGbNil() {
	o.RootGb.Set(nil)
}

// UnsetRootGb ensures that no value is present for RootGb, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetRootGb() {
	o.RootGb.Unset()
}

// GetOsDistro returns the OsDistro field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetOsDistro() string {
	if o == nil || IsNil(o.OsDistro.Get()) {
		var ret string
		return ret
	}
	return *o.OsDistro.Get()
}

// GetOsDistroOk returns a tuple with the OsDistro field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetOsDistroOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OsDistro.Get(), o.OsDistro.IsSet()
}

// HasOsDistro returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasOsDistro() bool {
	if o != nil && o.OsDistro.IsSet() {
		return true
	}

	return false
}

// SetOsDistro gets a reference to the given NullableString and assigns it to the OsDistro field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetOsDistro(v string) {
	o.OsDistro.Set(&v)
}

// SetOsDistroNil sets the value for OsDistro to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetOsDistroNil() {
	o.OsDistro.Set(nil)
}

// UnsetOsDistro ensures that no value is present for OsDistro, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetOsDistro() {
	o.OsDistro.Unset()
}

// GetHwCount returns the HwCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetHwCount() int32 {
	if o == nil || IsNil(o.HwCount.Get()) {
		var ret int32
		return ret
	}
	return *o.HwCount.Get()
}

// GetHwCountOk returns a tuple with the HwCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetHwCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HwCount.Get(), o.HwCount.IsSet()
}

// HasHwCount returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasHwCount() bool {
	if o != nil && o.HwCount.IsSet() {
		return true
	}

	return false
}

// SetHwCount gets a reference to the given NullableInt32 and assigns it to the HwCount field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetHwCount(v int32) {
	o.HwCount.Set(&v)
}

// SetHwCountNil sets the value for HwCount to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetHwCountNil() {
	o.HwCount.Set(nil)
}

// UnsetHwCount ensures that no value is present for HwCount, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetHwCount() {
	o.HwCount.Unset()
}

// GetHwType returns the HwType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetHwType() string {
	if o == nil || IsNil(o.HwType.Get()) {
		var ret string
		return ret
	}
	return *o.HwType.Get()
}

// GetHwTypeOk returns a tuple with the HwType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetHwTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HwType.Get(), o.HwType.IsSet()
}

// HasHwType returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasHwType() bool {
	if o != nil && o.HwType.IsSet() {
		return true
	}

	return false
}

// SetHwType gets a reference to the given NullableString and assigns it to the HwType field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetHwType(v string) {
	o.HwType.Set(&v)
}

// SetHwTypeNil sets the value for HwType to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetHwTypeNil() {
	o.HwType.Set(nil)
}

// UnsetHwType ensures that no value is present for HwType, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetHwType() {
	o.HwType.Unset()
}

// GetHwName returns the HwName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetHwName() string {
	if o == nil || IsNil(o.HwName.Get()) {
		var ret string
		return ret
	}
	return *o.HwName.Get()
}

// GetHwNameOk returns a tuple with the HwName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetHwNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HwName.Get(), o.HwName.IsSet()
}

// HasHwName returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasHwName() bool {
	if o != nil && o.HwName.IsSet() {
		return true
	}

	return false
}

// SetHwName gets a reference to the given NullableString and assigns it to the HwName field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetHwName(v string) {
	o.HwName.Set(&v)
}

// SetHwNameNil sets the value for HwName to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetHwNameNil() {
	o.HwName.Set(nil)
}

// UnsetHwName ensures that no value is present for HwName, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetHwName() {
	o.HwName.Unset()
}

// GetMaximumNetworkInterfaces returns the MaximumNetworkInterfaces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetMaximumNetworkInterfaces() int32 {
	if o == nil || IsNil(o.MaximumNetworkInterfaces.Get()) {
		var ret int32
		return ret
	}
	return *o.MaximumNetworkInterfaces.Get()
}

// GetMaximumNetworkInterfacesOk returns a tuple with the MaximumNetworkInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetMaximumNetworkInterfacesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaximumNetworkInterfaces.Get(), o.MaximumNetworkInterfaces.IsSet()
}

// HasMaximumNetworkInterfaces returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasMaximumNetworkInterfaces() bool {
	if o != nil && o.MaximumNetworkInterfaces.IsSet() {
		return true
	}

	return false
}

// SetMaximumNetworkInterfaces gets a reference to the given NullableInt32 and assigns it to the MaximumNetworkInterfaces field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetMaximumNetworkInterfaces(v int32) {
	o.MaximumNetworkInterfaces.Set(&v)
}

// SetMaximumNetworkInterfacesNil sets the value for MaximumNetworkInterfaces to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetMaximumNetworkInterfacesNil() {
	o.MaximumNetworkInterfaces.Set(nil)
}

// UnsetMaximumNetworkInterfaces ensures that no value is present for MaximumNetworkInterfaces, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetMaximumNetworkInterfaces() {
	o.MaximumNetworkInterfaces.Unset()
}

// GetIsHyperThreadingDisabled returns the IsHyperThreadingDisabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetIsHyperThreadingDisabled() bool {
	if o == nil || IsNil(o.IsHyperThreadingDisabled.Get()) {
		var ret bool
		return ret
	}
	return *o.IsHyperThreadingDisabled.Get()
}

// GetIsHyperThreadingDisabledOk returns a tuple with the IsHyperThreadingDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetIsHyperThreadingDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsHyperThreadingDisabled.Get(), o.IsHyperThreadingDisabled.IsSet()
}

// HasIsHyperThreadingDisabled returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasIsHyperThreadingDisabled() bool {
	if o != nil && o.IsHyperThreadingDisabled.IsSet() {
		return true
	}

	return false
}

// SetIsHyperThreadingDisabled gets a reference to the given NullableBool and assigns it to the IsHyperThreadingDisabled field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetIsHyperThreadingDisabled(v bool) {
	o.IsHyperThreadingDisabled.Set(&v)
}

// SetIsHyperThreadingDisabledNil sets the value for IsHyperThreadingDisabled to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetIsHyperThreadingDisabledNil() {
	o.IsHyperThreadingDisabled.Set(nil)
}

// UnsetIsHyperThreadingDisabled ensures that no value is present for IsHyperThreadingDisabled, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetIsHyperThreadingDisabled() {
	o.IsHyperThreadingDisabled.Unset()
}

// GetIsHyperThreadingSupported returns the IsHyperThreadingSupported field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetIsHyperThreadingSupported() bool {
	if o == nil || IsNil(o.IsHyperThreadingSupported.Get()) {
		var ret bool
		return ret
	}
	return *o.IsHyperThreadingSupported.Get()
}

// GetIsHyperThreadingSupportedOk returns a tuple with the IsHyperThreadingSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetIsHyperThreadingSupportedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsHyperThreadingSupported.Get(), o.IsHyperThreadingSupported.IsSet()
}

// HasIsHyperThreadingSupported returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasIsHyperThreadingSupported() bool {
	if o != nil && o.IsHyperThreadingSupported.IsSet() {
		return true
	}

	return false
}

// SetIsHyperThreadingSupported gets a reference to the given NullableBool and assigns it to the IsHyperThreadingSupported field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetIsHyperThreadingSupported(v bool) {
	o.IsHyperThreadingSupported.Set(&v)
}

// SetIsHyperThreadingSupportedNil sets the value for IsHyperThreadingSupported to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetIsHyperThreadingSupportedNil() {
	o.IsHyperThreadingSupported.Set(nil)
}

// UnsetIsHyperThreadingSupported ensures that no value is present for IsHyperThreadingSupported, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetIsHyperThreadingSupported() {
	o.IsHyperThreadingSupported.Unset()
}

// GetIsHyperThreadingDisableSupported returns the IsHyperThreadingDisableSupported field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetIsHyperThreadingDisableSupported() bool {
	if o == nil || IsNil(o.IsHyperThreadingDisableSupported.Get()) {
		var ret bool
		return ret
	}
	return *o.IsHyperThreadingDisableSupported.Get()
}

// GetIsHyperThreadingDisableSupportedOk returns a tuple with the IsHyperThreadingDisableSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) GetIsHyperThreadingDisableSupportedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsHyperThreadingDisableSupported.Get(), o.IsHyperThreadingDisableSupported.IsSet()
}

// HasIsHyperThreadingDisableSupported returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) HasIsHyperThreadingDisableSupported() bool {
	if o != nil && o.IsHyperThreadingDisableSupported.IsSet() {
		return true
	}

	return false
}

// SetIsHyperThreadingDisableSupported gets a reference to the given NullableBool and assigns it to the IsHyperThreadingDisableSupported field.
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetIsHyperThreadingDisableSupported(v bool) {
	o.IsHyperThreadingDisableSupported.Set(&v)
}

// SetIsHyperThreadingDisableSupportedNil sets the value for IsHyperThreadingDisableSupported to be an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) SetIsHyperThreadingDisableSupportedNil() {
	o.IsHyperThreadingDisableSupported.Set(nil)
}

// UnsetIsHyperThreadingDisableSupported ensures that no value is present for IsHyperThreadingDisableSupported, not even an explicit nil
func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnsetIsHyperThreadingDisableSupported() {
	o.IsHyperThreadingDisableSupported.Unset()
}

func (o BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Vcpus.IsSet() {
		toSerialize["vcpus"] = o.Vcpus.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.IsBurstable.IsSet() {
		toSerialize["is_burstable"] = o.IsBurstable.Get()
	}
	if o.Architecture.IsSet() {
		toSerialize["architecture"] = o.Architecture.Get()
	}
	if o.Manufacturer.IsSet() {
		toSerialize["manufacturer"] = o.Manufacturer.Get()
	}
	if o.Group.IsSet() {
		toSerialize["group"] = o.Group.Get()
	}
	if o.InstanceType.IsSet() {
		toSerialize["instance_type"] = o.InstanceType.Get()
	}
	if o.Processor.IsSet() {
		toSerialize["processor"] = o.Processor.Get()
	}
	if o.MemoryMb.IsSet() {
		toSerialize["memory_mb"] = o.MemoryMb.Get()
	}
	if o.CreatedAt.IsSet() {
		toSerialize["created_at"] = o.CreatedAt.Get()
	}
	if o.UpdatedAt.IsSet() {
		toSerialize["updated_at"] = o.UpdatedAt.Get()
	}
	if o.AvailabilityZone != nil {
		toSerialize["availability_zone"] = o.AvailabilityZone
	}
	if o.Available != nil {
		toSerialize["available"] = o.Available
	}
	if o.InstanceFamily.IsSet() {
		toSerialize["instance_family"] = o.InstanceFamily.Get()
	}
	if o.InstanceSize.IsSet() {
		toSerialize["instance_size"] = o.InstanceSize.Get()
	}
	if o.DiskType.IsSet() {
		toSerialize["disk_type"] = o.DiskType.Get()
	}
	if o.RootGb.IsSet() {
		toSerialize["root_gb"] = o.RootGb.Get()
	}
	if o.OsDistro.IsSet() {
		toSerialize["os_distro"] = o.OsDistro.Get()
	}
	if o.HwCount.IsSet() {
		toSerialize["hw_count"] = o.HwCount.Get()
	}
	if o.HwType.IsSet() {
		toSerialize["hw_type"] = o.HwType.Get()
	}
	if o.HwName.IsSet() {
		toSerialize["hw_name"] = o.HwName.Get()
	}
	if o.MaximumNetworkInterfaces.IsSet() {
		toSerialize["maximum_network_interfaces"] = o.MaximumNetworkInterfaces.Get()
	}
	if o.IsHyperThreadingDisabled.IsSet() {
		toSerialize["is_hyper_threading_disabled"] = o.IsHyperThreadingDisabled.Get()
	}
	if o.IsHyperThreadingSupported.IsSet() {
		toSerialize["is_hyper_threading_supported"] = o.IsHyperThreadingSupported.Get()
	}
	if o.IsHyperThreadingDisableSupported.IsSet() {
		toSerialize["is_hyper_threading_disable_supported"] = o.IsHyperThreadingDisableSupported.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBcsInstanceV1ApiGetInstanceTypeModelFlavorModel := _BcsInstanceV1ApiGetInstanceTypeModelFlavorModel{}

	err = json.Unmarshal(data, &varBcsInstanceV1ApiGetInstanceTypeModelFlavorModel)

	if err != nil {
		return err
	}

	*o = BcsInstanceV1ApiGetInstanceTypeModelFlavorModel(varBcsInstanceV1ApiGetInstanceTypeModelFlavorModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "vcpus")
		delete(additionalProperties, "description")
		delete(additionalProperties, "is_burstable")
		delete(additionalProperties, "architecture")
		delete(additionalProperties, "manufacturer")
		delete(additionalProperties, "group")
		delete(additionalProperties, "instance_type")
		delete(additionalProperties, "processor")
		delete(additionalProperties, "memory_mb")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "availability_zone")
		delete(additionalProperties, "available")
		delete(additionalProperties, "instance_family")
		delete(additionalProperties, "instance_size")
		delete(additionalProperties, "disk_type")
		delete(additionalProperties, "root_gb")
		delete(additionalProperties, "os_distro")
		delete(additionalProperties, "hw_count")
		delete(additionalProperties, "hw_type")
		delete(additionalProperties, "hw_name")
		delete(additionalProperties, "maximum_network_interfaces")
		delete(additionalProperties, "is_hyper_threading_disabled")
		delete(additionalProperties, "is_hyper_threading_supported")
		delete(additionalProperties, "is_hyper_threading_disable_supported")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBcsInstanceV1ApiGetInstanceTypeModelFlavorModel struct {
	value *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel
	isSet bool
}

func (v NullableBcsInstanceV1ApiGetInstanceTypeModelFlavorModel) Get() *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel {
	return v.value
}

func (v *NullableBcsInstanceV1ApiGetInstanceTypeModelFlavorModel) Set(val *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) {
	v.value = val
	v.isSet = true
}

func (v NullableBcsInstanceV1ApiGetInstanceTypeModelFlavorModel) IsSet() bool {
	return v.isSet
}

func (v *NullableBcsInstanceV1ApiGetInstanceTypeModelFlavorModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBcsInstanceV1ApiGetInstanceTypeModelFlavorModel(val *BcsInstanceV1ApiGetInstanceTypeModelFlavorModel) *NullableBcsInstanceV1ApiGetInstanceTypeModelFlavorModel {
	return &NullableBcsInstanceV1ApiGetInstanceTypeModelFlavorModel{value: val, isSet: true}
}

func (v NullableBcsInstanceV1ApiGetInstanceTypeModelFlavorModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBcsInstanceV1ApiGetInstanceTypeModelFlavorModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
