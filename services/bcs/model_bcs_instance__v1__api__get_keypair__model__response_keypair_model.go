/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
	"fmt"
)

// checks if the BcsInstanceV1ApiGetKeypairModelResponseKeypairModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BcsInstanceV1ApiGetKeypairModelResponseKeypairModel{}

// BcsInstanceV1ApiGetKeypairModelResponseKeypairModel struct for BcsInstanceV1ApiGetKeypairModelResponseKeypairModel
type BcsInstanceV1ApiGetKeypairModelResponseKeypairModel struct {
	Keypair              BcsInstanceV1ApiGetKeypairModelKeypairModel `json:"keypair"`
	AdditionalProperties map[string]interface{}
}

type _BcsInstanceV1ApiGetKeypairModelResponseKeypairModel BcsInstanceV1ApiGetKeypairModelResponseKeypairModel

// NewBcsInstanceV1ApiGetKeypairModelResponseKeypairModel instantiates a new BcsInstanceV1ApiGetKeypairModelResponseKeypairModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBcsInstanceV1ApiGetKeypairModelResponseKeypairModel(keypair BcsInstanceV1ApiGetKeypairModelKeypairModel) *BcsInstanceV1ApiGetKeypairModelResponseKeypairModel {
	this := BcsInstanceV1ApiGetKeypairModelResponseKeypairModel{}
	this.Keypair = keypair
	return &this
}

// NewBcsInstanceV1ApiGetKeypairModelResponseKeypairModelWithDefaults instantiates a new BcsInstanceV1ApiGetKeypairModelResponseKeypairModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBcsInstanceV1ApiGetKeypairModelResponseKeypairModelWithDefaults() *BcsInstanceV1ApiGetKeypairModelResponseKeypairModel {
	this := BcsInstanceV1ApiGetKeypairModelResponseKeypairModel{}
	return &this
}

// GetKeypair returns the Keypair field value
func (o *BcsInstanceV1ApiGetKeypairModelResponseKeypairModel) GetKeypair() BcsInstanceV1ApiGetKeypairModelKeypairModel {
	if o == nil {
		var ret BcsInstanceV1ApiGetKeypairModelKeypairModel
		return ret
	}

	return o.Keypair
}

// GetKeypairOk returns a tuple with the Keypair field value
// and a boolean to check if the value has been set.
func (o *BcsInstanceV1ApiGetKeypairModelResponseKeypairModel) GetKeypairOk() (*BcsInstanceV1ApiGetKeypairModelKeypairModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Keypair, true
}

// SetKeypair sets field value
func (o *BcsInstanceV1ApiGetKeypairModelResponseKeypairModel) SetKeypair(v BcsInstanceV1ApiGetKeypairModelKeypairModel) {
	o.Keypair = v
}

func (o BcsInstanceV1ApiGetKeypairModelResponseKeypairModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BcsInstanceV1ApiGetKeypairModelResponseKeypairModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["keypair"] = o.Keypair

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BcsInstanceV1ApiGetKeypairModelResponseKeypairModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"keypair",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBcsInstanceV1ApiGetKeypairModelResponseKeypairModel := _BcsInstanceV1ApiGetKeypairModelResponseKeypairModel{}

	err = json.Unmarshal(data, &varBcsInstanceV1ApiGetKeypairModelResponseKeypairModel)

	if err != nil {
		return err
	}

	*o = BcsInstanceV1ApiGetKeypairModelResponseKeypairModel(varBcsInstanceV1ApiGetKeypairModelResponseKeypairModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "keypair")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBcsInstanceV1ApiGetKeypairModelResponseKeypairModel struct {
	value *BcsInstanceV1ApiGetKeypairModelResponseKeypairModel
	isSet bool
}

func (v NullableBcsInstanceV1ApiGetKeypairModelResponseKeypairModel) Get() *BcsInstanceV1ApiGetKeypairModelResponseKeypairModel {
	return v.value
}

func (v *NullableBcsInstanceV1ApiGetKeypairModelResponseKeypairModel) Set(val *BcsInstanceV1ApiGetKeypairModelResponseKeypairModel) {
	v.value = val
	v.isSet = true
}

func (v NullableBcsInstanceV1ApiGetKeypairModelResponseKeypairModel) IsSet() bool {
	return v.isSet
}

func (v *NullableBcsInstanceV1ApiGetKeypairModelResponseKeypairModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBcsInstanceV1ApiGetKeypairModelResponseKeypairModel(val *BcsInstanceV1ApiGetKeypairModelResponseKeypairModel) *NullableBcsInstanceV1ApiGetKeypairModelResponseKeypairModel {
	return &NullableBcsInstanceV1ApiGetKeypairModelResponseKeypairModel{value: val, isSet: true}
}

func (v NullableBcsInstanceV1ApiGetKeypairModelResponseKeypairModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBcsInstanceV1ApiGetKeypairModelResponseKeypairModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
