/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
	"fmt"
)

// checks if the BcsInstanceV1ApiListInstancesModelInstanceFlavorModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BcsInstanceV1ApiListInstancesModelInstanceFlavorModel{}

// BcsInstanceV1ApiListInstancesModelInstanceFlavorModel struct for BcsInstanceV1ApiListInstancesModelInstanceFlavorModel
type BcsInstanceV1ApiListInstancesModelInstanceFlavorModel struct {
	// 인스턴스 유형 ID
	Id                        string         `json:"id"`
	Name                      NullableString `json:"name,omitempty"`
	Group                     NullableString `json:"group,omitempty"`
	Vcpus                     NullableInt32  `json:"vcpus,omitempty"`
	IsBurstable               NullableBool   `json:"is_burstable,omitempty"`
	Manufacturer              NullableString `json:"manufacturer,omitempty"`
	MemoryMb                  NullableInt32  `json:"memory_mb,omitempty"`
	RootGb                    NullableInt32  `json:"root_gb,omitempty"`
	DiskType                  NullableString `json:"disk_type,omitempty"`
	InstanceFamily            NullableString `json:"instance_family,omitempty"`
	OsDistro                  []string       `json:"os_distro,omitempty"`
	MaximumNetworkInterfaces  NullableInt32  `json:"maximum_network_interfaces,omitempty"`
	HwType                    NullableString `json:"hw_type,omitempty"`
	HwCount                   NullableInt32  `json:"hw_count,omitempty"`
	IsHyperThreadingSupported NullableBool   `json:"is_hyper_threading_supported,omitempty"`
	RealVcpus                 NullableInt32  `json:"real_vcpus,omitempty"`
	AdditionalProperties      map[string]interface{}
}

type _BcsInstanceV1ApiListInstancesModelInstanceFlavorModel BcsInstanceV1ApiListInstancesModelInstanceFlavorModel

// NewBcsInstanceV1ApiListInstancesModelInstanceFlavorModel instantiates a new BcsInstanceV1ApiListInstancesModelInstanceFlavorModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBcsInstanceV1ApiListInstancesModelInstanceFlavorModel(id string) *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel {
	this := BcsInstanceV1ApiListInstancesModelInstanceFlavorModel{}
	this.Id = id
	return &this
}

// NewBcsInstanceV1ApiListInstancesModelInstanceFlavorModelWithDefaults instantiates a new BcsInstanceV1ApiListInstancesModelInstanceFlavorModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBcsInstanceV1ApiListInstancesModelInstanceFlavorModelWithDefaults() *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel {
	this := BcsInstanceV1ApiListInstancesModelInstanceFlavorModel{}
	return &this
}

// GetId returns the Id field value
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) UnsetName() {
	o.Name.Unset()
}

// GetGroup returns the Group field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetGroup() string {
	if o == nil || IsNil(o.Group.Get()) {
		var ret string
		return ret
	}
	return *o.Group.Get()
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Group.Get(), o.Group.IsSet()
}

// HasGroup returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) HasGroup() bool {
	if o != nil && o.Group.IsSet() {
		return true
	}

	return false
}

// SetGroup gets a reference to the given NullableString and assigns it to the Group field.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetGroup(v string) {
	o.Group.Set(&v)
}

// SetGroupNil sets the value for Group to be an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetGroupNil() {
	o.Group.Set(nil)
}

// UnsetGroup ensures that no value is present for Group, not even an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) UnsetGroup() {
	o.Group.Unset()
}

// GetVcpus returns the Vcpus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetVcpus() int32 {
	if o == nil || IsNil(o.Vcpus.Get()) {
		var ret int32
		return ret
	}
	return *o.Vcpus.Get()
}

// GetVcpusOk returns a tuple with the Vcpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetVcpusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vcpus.Get(), o.Vcpus.IsSet()
}

// HasVcpus returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) HasVcpus() bool {
	if o != nil && o.Vcpus.IsSet() {
		return true
	}

	return false
}

// SetVcpus gets a reference to the given NullableInt32 and assigns it to the Vcpus field.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetVcpus(v int32) {
	o.Vcpus.Set(&v)
}

// SetVcpusNil sets the value for Vcpus to be an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetVcpusNil() {
	o.Vcpus.Set(nil)
}

// UnsetVcpus ensures that no value is present for Vcpus, not even an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) UnsetVcpus() {
	o.Vcpus.Unset()
}

// GetIsBurstable returns the IsBurstable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetIsBurstable() bool {
	if o == nil || IsNil(o.IsBurstable.Get()) {
		var ret bool
		return ret
	}
	return *o.IsBurstable.Get()
}

// GetIsBurstableOk returns a tuple with the IsBurstable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetIsBurstableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsBurstable.Get(), o.IsBurstable.IsSet()
}

// HasIsBurstable returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) HasIsBurstable() bool {
	if o != nil && o.IsBurstable.IsSet() {
		return true
	}

	return false
}

// SetIsBurstable gets a reference to the given NullableBool and assigns it to the IsBurstable field.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetIsBurstable(v bool) {
	o.IsBurstable.Set(&v)
}

// SetIsBurstableNil sets the value for IsBurstable to be an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetIsBurstableNil() {
	o.IsBurstable.Set(nil)
}

// UnsetIsBurstable ensures that no value is present for IsBurstable, not even an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) UnsetIsBurstable() {
	o.IsBurstable.Unset()
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetManufacturer() string {
	if o == nil || IsNil(o.Manufacturer.Get()) {
		var ret string
		return ret
	}
	return *o.Manufacturer.Get()
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetManufacturerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Manufacturer.Get(), o.Manufacturer.IsSet()
}

// HasManufacturer returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) HasManufacturer() bool {
	if o != nil && o.Manufacturer.IsSet() {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given NullableString and assigns it to the Manufacturer field.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetManufacturer(v string) {
	o.Manufacturer.Set(&v)
}

// SetManufacturerNil sets the value for Manufacturer to be an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetManufacturerNil() {
	o.Manufacturer.Set(nil)
}

// UnsetManufacturer ensures that no value is present for Manufacturer, not even an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) UnsetManufacturer() {
	o.Manufacturer.Unset()
}

// GetMemoryMb returns the MemoryMb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetMemoryMb() int32 {
	if o == nil || IsNil(o.MemoryMb.Get()) {
		var ret int32
		return ret
	}
	return *o.MemoryMb.Get()
}

// GetMemoryMbOk returns a tuple with the MemoryMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetMemoryMbOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MemoryMb.Get(), o.MemoryMb.IsSet()
}

// HasMemoryMb returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) HasMemoryMb() bool {
	if o != nil && o.MemoryMb.IsSet() {
		return true
	}

	return false
}

// SetMemoryMb gets a reference to the given NullableInt32 and assigns it to the MemoryMb field.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetMemoryMb(v int32) {
	o.MemoryMb.Set(&v)
}

// SetMemoryMbNil sets the value for MemoryMb to be an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetMemoryMbNil() {
	o.MemoryMb.Set(nil)
}

// UnsetMemoryMb ensures that no value is present for MemoryMb, not even an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) UnsetMemoryMb() {
	o.MemoryMb.Unset()
}

// GetRootGb returns the RootGb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetRootGb() int32 {
	if o == nil || IsNil(o.RootGb.Get()) {
		var ret int32
		return ret
	}
	return *o.RootGb.Get()
}

// GetRootGbOk returns a tuple with the RootGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetRootGbOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootGb.Get(), o.RootGb.IsSet()
}

// HasRootGb returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) HasRootGb() bool {
	if o != nil && o.RootGb.IsSet() {
		return true
	}

	return false
}

// SetRootGb gets a reference to the given NullableInt32 and assigns it to the RootGb field.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetRootGb(v int32) {
	o.RootGb.Set(&v)
}

// SetRootGbNil sets the value for RootGb to be an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetRootGbNil() {
	o.RootGb.Set(nil)
}

// UnsetRootGb ensures that no value is present for RootGb, not even an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) UnsetRootGb() {
	o.RootGb.Unset()
}

// GetDiskType returns the DiskType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetDiskType() string {
	if o == nil || IsNil(o.DiskType.Get()) {
		var ret string
		return ret
	}
	return *o.DiskType.Get()
}

// GetDiskTypeOk returns a tuple with the DiskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetDiskTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiskType.Get(), o.DiskType.IsSet()
}

// HasDiskType returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) HasDiskType() bool {
	if o != nil && o.DiskType.IsSet() {
		return true
	}

	return false
}

// SetDiskType gets a reference to the given NullableString and assigns it to the DiskType field.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetDiskType(v string) {
	o.DiskType.Set(&v)
}

// SetDiskTypeNil sets the value for DiskType to be an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetDiskTypeNil() {
	o.DiskType.Set(nil)
}

// UnsetDiskType ensures that no value is present for DiskType, not even an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) UnsetDiskType() {
	o.DiskType.Unset()
}

// GetInstanceFamily returns the InstanceFamily field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetInstanceFamily() string {
	if o == nil || IsNil(o.InstanceFamily.Get()) {
		var ret string
		return ret
	}
	return *o.InstanceFamily.Get()
}

// GetInstanceFamilyOk returns a tuple with the InstanceFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetInstanceFamilyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstanceFamily.Get(), o.InstanceFamily.IsSet()
}

// HasInstanceFamily returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) HasInstanceFamily() bool {
	if o != nil && o.InstanceFamily.IsSet() {
		return true
	}

	return false
}

// SetInstanceFamily gets a reference to the given NullableString and assigns it to the InstanceFamily field.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetInstanceFamily(v string) {
	o.InstanceFamily.Set(&v)
}

// SetInstanceFamilyNil sets the value for InstanceFamily to be an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetInstanceFamilyNil() {
	o.InstanceFamily.Set(nil)
}

// UnsetInstanceFamily ensures that no value is present for InstanceFamily, not even an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) UnsetInstanceFamily() {
	o.InstanceFamily.Unset()
}

// GetOsDistro returns the OsDistro field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetOsDistro() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.OsDistro
}

// GetOsDistroOk returns a tuple with the OsDistro field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetOsDistroOk() ([]string, bool) {
	if o == nil || IsNil(o.OsDistro) {
		return nil, false
	}
	return o.OsDistro, true
}

// HasOsDistro returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) HasOsDistro() bool {
	if o != nil && !IsNil(o.OsDistro) {
		return true
	}

	return false
}

// SetOsDistro gets a reference to the given []string and assigns it to the OsDistro field.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetOsDistro(v []string) {
	o.OsDistro = v
}

// GetMaximumNetworkInterfaces returns the MaximumNetworkInterfaces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetMaximumNetworkInterfaces() int32 {
	if o == nil || IsNil(o.MaximumNetworkInterfaces.Get()) {
		var ret int32
		return ret
	}
	return *o.MaximumNetworkInterfaces.Get()
}

// GetMaximumNetworkInterfacesOk returns a tuple with the MaximumNetworkInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetMaximumNetworkInterfacesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaximumNetworkInterfaces.Get(), o.MaximumNetworkInterfaces.IsSet()
}

// HasMaximumNetworkInterfaces returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) HasMaximumNetworkInterfaces() bool {
	if o != nil && o.MaximumNetworkInterfaces.IsSet() {
		return true
	}

	return false
}

// SetMaximumNetworkInterfaces gets a reference to the given NullableInt32 and assigns it to the MaximumNetworkInterfaces field.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetMaximumNetworkInterfaces(v int32) {
	o.MaximumNetworkInterfaces.Set(&v)
}

// SetMaximumNetworkInterfacesNil sets the value for MaximumNetworkInterfaces to be an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetMaximumNetworkInterfacesNil() {
	o.MaximumNetworkInterfaces.Set(nil)
}

// UnsetMaximumNetworkInterfaces ensures that no value is present for MaximumNetworkInterfaces, not even an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) UnsetMaximumNetworkInterfaces() {
	o.MaximumNetworkInterfaces.Unset()
}

// GetHwType returns the HwType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetHwType() string {
	if o == nil || IsNil(o.HwType.Get()) {
		var ret string
		return ret
	}
	return *o.HwType.Get()
}

// GetHwTypeOk returns a tuple with the HwType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetHwTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HwType.Get(), o.HwType.IsSet()
}

// HasHwType returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) HasHwType() bool {
	if o != nil && o.HwType.IsSet() {
		return true
	}

	return false
}

// SetHwType gets a reference to the given NullableString and assigns it to the HwType field.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetHwType(v string) {
	o.HwType.Set(&v)
}

// SetHwTypeNil sets the value for HwType to be an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetHwTypeNil() {
	o.HwType.Set(nil)
}

// UnsetHwType ensures that no value is present for HwType, not even an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) UnsetHwType() {
	o.HwType.Unset()
}

// GetHwCount returns the HwCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetHwCount() int32 {
	if o == nil || IsNil(o.HwCount.Get()) {
		var ret int32
		return ret
	}
	return *o.HwCount.Get()
}

// GetHwCountOk returns a tuple with the HwCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetHwCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HwCount.Get(), o.HwCount.IsSet()
}

// HasHwCount returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) HasHwCount() bool {
	if o != nil && o.HwCount.IsSet() {
		return true
	}

	return false
}

// SetHwCount gets a reference to the given NullableInt32 and assigns it to the HwCount field.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetHwCount(v int32) {
	o.HwCount.Set(&v)
}

// SetHwCountNil sets the value for HwCount to be an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetHwCountNil() {
	o.HwCount.Set(nil)
}

// UnsetHwCount ensures that no value is present for HwCount, not even an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) UnsetHwCount() {
	o.HwCount.Unset()
}

// GetIsHyperThreadingSupported returns the IsHyperThreadingSupported field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetIsHyperThreadingSupported() bool {
	if o == nil || IsNil(o.IsHyperThreadingSupported.Get()) {
		var ret bool
		return ret
	}
	return *o.IsHyperThreadingSupported.Get()
}

// GetIsHyperThreadingSupportedOk returns a tuple with the IsHyperThreadingSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetIsHyperThreadingSupportedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsHyperThreadingSupported.Get(), o.IsHyperThreadingSupported.IsSet()
}

// HasIsHyperThreadingSupported returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) HasIsHyperThreadingSupported() bool {
	if o != nil && o.IsHyperThreadingSupported.IsSet() {
		return true
	}

	return false
}

// SetIsHyperThreadingSupported gets a reference to the given NullableBool and assigns it to the IsHyperThreadingSupported field.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetIsHyperThreadingSupported(v bool) {
	o.IsHyperThreadingSupported.Set(&v)
}

// SetIsHyperThreadingSupportedNil sets the value for IsHyperThreadingSupported to be an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetIsHyperThreadingSupportedNil() {
	o.IsHyperThreadingSupported.Set(nil)
}

// UnsetIsHyperThreadingSupported ensures that no value is present for IsHyperThreadingSupported, not even an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) UnsetIsHyperThreadingSupported() {
	o.IsHyperThreadingSupported.Unset()
}

// GetRealVcpus returns the RealVcpus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetRealVcpus() int32 {
	if o == nil || IsNil(o.RealVcpus.Get()) {
		var ret int32
		return ret
	}
	return *o.RealVcpus.Get()
}

// GetRealVcpusOk returns a tuple with the RealVcpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) GetRealVcpusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RealVcpus.Get(), o.RealVcpus.IsSet()
}

// HasRealVcpus returns a boolean if a field has been set.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) HasRealVcpus() bool {
	if o != nil && o.RealVcpus.IsSet() {
		return true
	}

	return false
}

// SetRealVcpus gets a reference to the given NullableInt32 and assigns it to the RealVcpus field.
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetRealVcpus(v int32) {
	o.RealVcpus.Set(&v)
}

// SetRealVcpusNil sets the value for RealVcpus to be an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) SetRealVcpusNil() {
	o.RealVcpus.Set(nil)
}

// UnsetRealVcpus ensures that no value is present for RealVcpus, not even an explicit nil
func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) UnsetRealVcpus() {
	o.RealVcpus.Unset()
}

func (o BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Group.IsSet() {
		toSerialize["group"] = o.Group.Get()
	}
	if o.Vcpus.IsSet() {
		toSerialize["vcpus"] = o.Vcpus.Get()
	}
	if o.IsBurstable.IsSet() {
		toSerialize["is_burstable"] = o.IsBurstable.Get()
	}
	if o.Manufacturer.IsSet() {
		toSerialize["manufacturer"] = o.Manufacturer.Get()
	}
	if o.MemoryMb.IsSet() {
		toSerialize["memory_mb"] = o.MemoryMb.Get()
	}
	if o.RootGb.IsSet() {
		toSerialize["root_gb"] = o.RootGb.Get()
	}
	if o.DiskType.IsSet() {
		toSerialize["disk_type"] = o.DiskType.Get()
	}
	if o.InstanceFamily.IsSet() {
		toSerialize["instance_family"] = o.InstanceFamily.Get()
	}
	if o.OsDistro != nil {
		toSerialize["os_distro"] = o.OsDistro
	}
	if o.MaximumNetworkInterfaces.IsSet() {
		toSerialize["maximum_network_interfaces"] = o.MaximumNetworkInterfaces.Get()
	}
	if o.HwType.IsSet() {
		toSerialize["hw_type"] = o.HwType.Get()
	}
	if o.HwCount.IsSet() {
		toSerialize["hw_count"] = o.HwCount.Get()
	}
	if o.IsHyperThreadingSupported.IsSet() {
		toSerialize["is_hyper_threading_supported"] = o.IsHyperThreadingSupported.Get()
	}
	if o.RealVcpus.IsSet() {
		toSerialize["real_vcpus"] = o.RealVcpus.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBcsInstanceV1ApiListInstancesModelInstanceFlavorModel := _BcsInstanceV1ApiListInstancesModelInstanceFlavorModel{}

	err = json.Unmarshal(data, &varBcsInstanceV1ApiListInstancesModelInstanceFlavorModel)

	if err != nil {
		return err
	}

	*o = BcsInstanceV1ApiListInstancesModelInstanceFlavorModel(varBcsInstanceV1ApiListInstancesModelInstanceFlavorModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "group")
		delete(additionalProperties, "vcpus")
		delete(additionalProperties, "is_burstable")
		delete(additionalProperties, "manufacturer")
		delete(additionalProperties, "memory_mb")
		delete(additionalProperties, "root_gb")
		delete(additionalProperties, "disk_type")
		delete(additionalProperties, "instance_family")
		delete(additionalProperties, "os_distro")
		delete(additionalProperties, "maximum_network_interfaces")
		delete(additionalProperties, "hw_type")
		delete(additionalProperties, "hw_count")
		delete(additionalProperties, "is_hyper_threading_supported")
		delete(additionalProperties, "real_vcpus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBcsInstanceV1ApiListInstancesModelInstanceFlavorModel struct {
	value *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel
	isSet bool
}

func (v NullableBcsInstanceV1ApiListInstancesModelInstanceFlavorModel) Get() *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel {
	return v.value
}

func (v *NullableBcsInstanceV1ApiListInstancesModelInstanceFlavorModel) Set(val *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) {
	v.value = val
	v.isSet = true
}

func (v NullableBcsInstanceV1ApiListInstancesModelInstanceFlavorModel) IsSet() bool {
	return v.isSet
}

func (v *NullableBcsInstanceV1ApiListInstancesModelInstanceFlavorModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBcsInstanceV1ApiListInstancesModelInstanceFlavorModel(val *BcsInstanceV1ApiListInstancesModelInstanceFlavorModel) *NullableBcsInstanceV1ApiListInstancesModelInstanceFlavorModel {
	return &NullableBcsInstanceV1ApiListInstancesModelInstanceFlavorModel{value: val, isSet: true}
}

func (v NullableBcsInstanceV1ApiListInstancesModelInstanceFlavorModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBcsInstanceV1ApiListInstancesModelInstanceFlavorModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
