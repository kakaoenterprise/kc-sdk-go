/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
	"fmt"
)

// checks if the BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel{}

// BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel struct for BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel
type BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel struct {
	// 가상 CPU 수
	Vcpus int32 `json:"vcpus"`
	// 메모리 크기 (MB 단위)
	Ram int32 `json:"ram"`
	// 루트 디스크의 크기 (GB 단위)
	Disk int32 `json:"disk"`
	// 인스턴스 유형 이름
	OriginalName         string `json:"original_name"`
	AdditionalProperties map[string]interface{}
}

type _BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel

// NewBcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel instantiates a new BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel(vcpus int32, ram int32, disk int32, originalName string) *BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel {
	this := BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel{}
	this.Vcpus = vcpus
	this.Ram = ram
	this.Disk = disk
	this.OriginalName = originalName
	return &this
}

// NewBcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModelWithDefaults instantiates a new BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModelWithDefaults() *BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel {
	this := BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel{}
	return &this
}

// GetVcpus returns the Vcpus field value
func (o *BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) GetVcpus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Vcpus
}

// GetVcpusOk returns a tuple with the Vcpus field value
// and a boolean to check if the value has been set.
func (o *BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) GetVcpusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vcpus, true
}

// SetVcpus sets field value
func (o *BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) SetVcpus(v int32) {
	o.Vcpus = v
}

// GetRam returns the Ram field value
func (o *BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) GetRam() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ram
}

// GetRamOk returns a tuple with the Ram field value
// and a boolean to check if the value has been set.
func (o *BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) GetRamOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ram, true
}

// SetRam sets field value
func (o *BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) SetRam(v int32) {
	o.Ram = v
}

// GetDisk returns the Disk field value
func (o *BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) GetDisk() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Disk
}

// GetDiskOk returns a tuple with the Disk field value
// and a boolean to check if the value has been set.
func (o *BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) GetDiskOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disk, true
}

// SetDisk sets field value
func (o *BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) SetDisk(v int32) {
	o.Disk = v
}

// GetOriginalName returns the OriginalName field value
func (o *BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) GetOriginalName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalName
}

// GetOriginalNameOk returns a tuple with the OriginalName field value
// and a boolean to check if the value has been set.
func (o *BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) GetOriginalNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalName, true
}

// SetOriginalName sets field value
func (o *BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) SetOriginalName(v string) {
	o.OriginalName = v
}

func (o BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vcpus"] = o.Vcpus
	toSerialize["ram"] = o.Ram
	toSerialize["disk"] = o.Disk
	toSerialize["original_name"] = o.OriginalName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vcpus",
		"ram",
		"disk",
		"original_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel := _BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel{}

	err = json.Unmarshal(data, &varBcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel)

	if err != nil {
		return err
	}

	*o = BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel(varBcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vcpus")
		delete(additionalProperties, "ram")
		delete(additionalProperties, "disk")
		delete(additionalProperties, "original_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel struct {
	value *BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel
	isSet bool
}

func (v NullableBcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) Get() *BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel {
	return v.value
}

func (v *NullableBcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) Set(val *BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) {
	v.value = val
	v.isSet = true
}

func (v NullableBcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) IsSet() bool {
	return v.isSet
}

func (v *NullableBcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel(val *BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) *NullableBcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel {
	return &NullableBcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel{value: val, isSet: true}
}

func (v NullableBcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
