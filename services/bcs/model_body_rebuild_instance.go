/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
	"fmt"
)

// checks if the BodyRebuildInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BodyRebuildInstance{}

// BodyRebuildInstance struct for BodyRebuildInstance
type BodyRebuildInstance struct {
	Rebuild              RequestRebuildInstanceModel `json:"rebuild"`
	AdditionalProperties map[string]interface{}
}

type _BodyRebuildInstance BodyRebuildInstance

// NewBodyRebuildInstance instantiates a new BodyRebuildInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBodyRebuildInstance(rebuild RequestRebuildInstanceModel) *BodyRebuildInstance {
	this := BodyRebuildInstance{}
	this.Rebuild = rebuild
	return &this
}

// NewBodyRebuildInstanceWithDefaults instantiates a new BodyRebuildInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBodyRebuildInstanceWithDefaults() *BodyRebuildInstance {
	this := BodyRebuildInstance{}
	return &this
}

// GetRebuild returns the Rebuild field value
func (o *BodyRebuildInstance) GetRebuild() RequestRebuildInstanceModel {
	if o == nil {
		var ret RequestRebuildInstanceModel
		return ret
	}

	return o.Rebuild
}

// GetRebuildOk returns a tuple with the Rebuild field value
// and a boolean to check if the value has been set.
func (o *BodyRebuildInstance) GetRebuildOk() (*RequestRebuildInstanceModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rebuild, true
}

// SetRebuild sets field value
func (o *BodyRebuildInstance) SetRebuild(v RequestRebuildInstanceModel) {
	o.Rebuild = v
}

func (o BodyRebuildInstance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BodyRebuildInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rebuild"] = o.Rebuild

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BodyRebuildInstance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rebuild",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBodyRebuildInstance := _BodyRebuildInstance{}

	err = json.Unmarshal(data, &varBodyRebuildInstance)

	if err != nil {
		return err
	}

	*o = BodyRebuildInstance(varBodyRebuildInstance)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "rebuild")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBodyRebuildInstance struct {
	value *BodyRebuildInstance
	isSet bool
}

func (v NullableBodyRebuildInstance) Get() *BodyRebuildInstance {
	return v.value
}

func (v *NullableBodyRebuildInstance) Set(val *BodyRebuildInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableBodyRebuildInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableBodyRebuildInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBodyRebuildInstance(val *BodyRebuildInstance) *NullableBodyRebuildInstance {
	return &NullableBodyRebuildInstance{value: val, isSet: true}
}

func (v NullableBodyRebuildInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBodyRebuildInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
