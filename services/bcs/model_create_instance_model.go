/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateInstanceModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateInstanceModel{}

// CreateInstanceModel struct for CreateInstanceModel
type CreateInstanceModel struct {
	// 생성할 인스턴스의 이름 <br/> - 같은 프로젝트 내 중복된 인스턴스 이름 사용 가능
	Name        string         `json:"name"`
	Description NullableString `json:"description,omitempty"`
	// 생성할 인스턴스 수
	Count *int32 `json:"count,omitempty"`
	// 이미지의 고유 ID
	ImageId string `json:"image_id"`
	// 인스턴스 유형 ID <br/> - [List instance types](https://docs.kakaocloud.com/openapi/bcs/list-instance-types) API를 통해 조회 가능
	FlavorId         string                   `json:"flavor_id"`
	AvailabilityZone NullableAvailabilityZone `json:"availability_zone,omitempty"`
	// 연결할 서브넷 정보 목록
	Subnets []CreateInstanceSubnetModel `json:"subnets"`
	// 인스턴스에 연결할 볼륨
	Volumes []CreateInstanceVolumeModel `json:"volumes"`
	KeyName NullableString              `json:"key_name,omitempty"`
	// 인스턴스에 적용할 보안 그룹
	SecurityGroups []CreateInstanceSecurityGroupModel `json:"security_groups"`
	UserData       NullableString                     `json:"user_data,omitempty"`
	// 하이퍼스레딩 비활성화 여부
	IsDisableHyperThreading *bool `json:"is_disable_hyper_threading,omitempty"`
	// 네트워크 인터페이스 본딩 설정 여부 <br/> - 베어메탈(`bm`) 유형을 생성할 경우에만 입력 필요
	IsBonding            *bool `json:"is_bonding,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateInstanceModel CreateInstanceModel

// NewCreateInstanceModel instantiates a new CreateInstanceModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateInstanceModel(name string, imageId string, flavorId string, subnets []CreateInstanceSubnetModel, volumes []CreateInstanceVolumeModel, securityGroups []CreateInstanceSecurityGroupModel) *CreateInstanceModel {
	this := CreateInstanceModel{}
	this.Name = name
	var count int32 = 1
	this.Count = &count
	this.ImageId = imageId
	this.FlavorId = flavorId
	this.Subnets = subnets
	this.Volumes = volumes
	this.SecurityGroups = securityGroups
	var isDisableHyperThreading bool = true
	this.IsDisableHyperThreading = &isDisableHyperThreading
	return &this
}

// NewCreateInstanceModelWithDefaults instantiates a new CreateInstanceModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateInstanceModelWithDefaults() *CreateInstanceModel {
	this := CreateInstanceModel{}
	var count int32 = 1
	this.Count = &count
	var isDisableHyperThreading bool = true
	this.IsDisableHyperThreading = &isDisableHyperThreading
	return &this
}

// GetName returns the Name field value
func (o *CreateInstanceModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateInstanceModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateInstanceModel) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateInstanceModel) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateInstanceModel) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateInstanceModel) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CreateInstanceModel) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CreateInstanceModel) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CreateInstanceModel) UnsetDescription() {
	o.Description.Unset()
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *CreateInstanceModel) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstanceModel) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *CreateInstanceModel) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *CreateInstanceModel) SetCount(v int32) {
	o.Count = &v
}

// GetImageId returns the ImageId field value
func (o *CreateInstanceModel) GetImageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value
// and a boolean to check if the value has been set.
func (o *CreateInstanceModel) GetImageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageId, true
}

// SetImageId sets field value
func (o *CreateInstanceModel) SetImageId(v string) {
	o.ImageId = v
}

// GetFlavorId returns the FlavorId field value
func (o *CreateInstanceModel) GetFlavorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FlavorId
}

// GetFlavorIdOk returns a tuple with the FlavorId field value
// and a boolean to check if the value has been set.
func (o *CreateInstanceModel) GetFlavorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlavorId, true
}

// SetFlavorId sets field value
func (o *CreateInstanceModel) SetFlavorId(v string) {
	o.FlavorId = v
}

// GetAvailabilityZone returns the AvailabilityZone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateInstanceModel) GetAvailabilityZone() AvailabilityZone {
	if o == nil || IsNil(o.AvailabilityZone.Get()) {
		var ret AvailabilityZone
		return ret
	}
	return *o.AvailabilityZone.Get()
}

// GetAvailabilityZoneOk returns a tuple with the AvailabilityZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateInstanceModel) GetAvailabilityZoneOk() (*AvailabilityZone, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvailabilityZone.Get(), o.AvailabilityZone.IsSet()
}

// HasAvailabilityZone returns a boolean if a field has been set.
func (o *CreateInstanceModel) HasAvailabilityZone() bool {
	if o != nil && o.AvailabilityZone.IsSet() {
		return true
	}

	return false
}

// SetAvailabilityZone gets a reference to the given NullableAvailabilityZone and assigns it to the AvailabilityZone field.
func (o *CreateInstanceModel) SetAvailabilityZone(v AvailabilityZone) {
	o.AvailabilityZone.Set(&v)
}

// SetAvailabilityZoneNil sets the value for AvailabilityZone to be an explicit nil
func (o *CreateInstanceModel) SetAvailabilityZoneNil() {
	o.AvailabilityZone.Set(nil)
}

// UnsetAvailabilityZone ensures that no value is present for AvailabilityZone, not even an explicit nil
func (o *CreateInstanceModel) UnsetAvailabilityZone() {
	o.AvailabilityZone.Unset()
}

// GetSubnets returns the Subnets field value
func (o *CreateInstanceModel) GetSubnets() []CreateInstanceSubnetModel {
	if o == nil {
		var ret []CreateInstanceSubnetModel
		return ret
	}

	return o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value
// and a boolean to check if the value has been set.
func (o *CreateInstanceModel) GetSubnetsOk() ([]CreateInstanceSubnetModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subnets, true
}

// SetSubnets sets field value
func (o *CreateInstanceModel) SetSubnets(v []CreateInstanceSubnetModel) {
	o.Subnets = v
}

// GetVolumes returns the Volumes field value
func (o *CreateInstanceModel) GetVolumes() []CreateInstanceVolumeModel {
	if o == nil {
		var ret []CreateInstanceVolumeModel
		return ret
	}

	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value
// and a boolean to check if the value has been set.
func (o *CreateInstanceModel) GetVolumesOk() ([]CreateInstanceVolumeModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Volumes, true
}

// SetVolumes sets field value
func (o *CreateInstanceModel) SetVolumes(v []CreateInstanceVolumeModel) {
	o.Volumes = v
}

// GetKeyName returns the KeyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateInstanceModel) GetKeyName() string {
	if o == nil || IsNil(o.KeyName.Get()) {
		var ret string
		return ret
	}
	return *o.KeyName.Get()
}

// GetKeyNameOk returns a tuple with the KeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateInstanceModel) GetKeyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KeyName.Get(), o.KeyName.IsSet()
}

// HasKeyName returns a boolean if a field has been set.
func (o *CreateInstanceModel) HasKeyName() bool {
	if o != nil && o.KeyName.IsSet() {
		return true
	}

	return false
}

// SetKeyName gets a reference to the given NullableString and assigns it to the KeyName field.
func (o *CreateInstanceModel) SetKeyName(v string) {
	o.KeyName.Set(&v)
}

// SetKeyNameNil sets the value for KeyName to be an explicit nil
func (o *CreateInstanceModel) SetKeyNameNil() {
	o.KeyName.Set(nil)
}

// UnsetKeyName ensures that no value is present for KeyName, not even an explicit nil
func (o *CreateInstanceModel) UnsetKeyName() {
	o.KeyName.Unset()
}

// GetSecurityGroups returns the SecurityGroups field value
func (o *CreateInstanceModel) GetSecurityGroups() []CreateInstanceSecurityGroupModel {
	if o == nil {
		var ret []CreateInstanceSecurityGroupModel
		return ret
	}

	return o.SecurityGroups
}

// GetSecurityGroupsOk returns a tuple with the SecurityGroups field value
// and a boolean to check if the value has been set.
func (o *CreateInstanceModel) GetSecurityGroupsOk() ([]CreateInstanceSecurityGroupModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecurityGroups, true
}

// SetSecurityGroups sets field value
func (o *CreateInstanceModel) SetSecurityGroups(v []CreateInstanceSecurityGroupModel) {
	o.SecurityGroups = v
}

// GetUserData returns the UserData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateInstanceModel) GetUserData() string {
	if o == nil || IsNil(o.UserData.Get()) {
		var ret string
		return ret
	}
	return *o.UserData.Get()
}

// GetUserDataOk returns a tuple with the UserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateInstanceModel) GetUserDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserData.Get(), o.UserData.IsSet()
}

// HasUserData returns a boolean if a field has been set.
func (o *CreateInstanceModel) HasUserData() bool {
	if o != nil && o.UserData.IsSet() {
		return true
	}

	return false
}

// SetUserData gets a reference to the given NullableString and assigns it to the UserData field.
func (o *CreateInstanceModel) SetUserData(v string) {
	o.UserData.Set(&v)
}

// SetUserDataNil sets the value for UserData to be an explicit nil
func (o *CreateInstanceModel) SetUserDataNil() {
	o.UserData.Set(nil)
}

// UnsetUserData ensures that no value is present for UserData, not even an explicit nil
func (o *CreateInstanceModel) UnsetUserData() {
	o.UserData.Unset()
}

// GetIsDisableHyperThreading returns the IsDisableHyperThreading field value if set, zero value otherwise.
func (o *CreateInstanceModel) GetIsDisableHyperThreading() bool {
	if o == nil || IsNil(o.IsDisableHyperThreading) {
		var ret bool
		return ret
	}
	return *o.IsDisableHyperThreading
}

// GetIsDisableHyperThreadingOk returns a tuple with the IsDisableHyperThreading field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstanceModel) GetIsDisableHyperThreadingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDisableHyperThreading) {
		return nil, false
	}
	return o.IsDisableHyperThreading, true
}

// HasIsDisableHyperThreading returns a boolean if a field has been set.
func (o *CreateInstanceModel) HasIsDisableHyperThreading() bool {
	if o != nil && !IsNil(o.IsDisableHyperThreading) {
		return true
	}

	return false
}

// SetIsDisableHyperThreading gets a reference to the given bool and assigns it to the IsDisableHyperThreading field.
func (o *CreateInstanceModel) SetIsDisableHyperThreading(v bool) {
	o.IsDisableHyperThreading = &v
}

// GetIsBonding returns the IsBonding field value if set, zero value otherwise.
func (o *CreateInstanceModel) GetIsBonding() bool {
	if o == nil || IsNil(o.IsBonding) {
		var ret bool
		return ret
	}
	return *o.IsBonding
}

// GetIsBondingOk returns a tuple with the IsBonding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstanceModel) GetIsBondingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBonding) {
		return nil, false
	}
	return o.IsBonding, true
}

// HasIsBonding returns a boolean if a field has been set.
func (o *CreateInstanceModel) HasIsBonding() bool {
	if o != nil && !IsNil(o.IsBonding) {
		return true
	}

	return false
}

// SetIsBonding gets a reference to the given bool and assigns it to the IsBonding field.
func (o *CreateInstanceModel) SetIsBonding(v bool) {
	o.IsBonding = &v
}

func (o CreateInstanceModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateInstanceModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	toSerialize["image_id"] = o.ImageId
	toSerialize["flavor_id"] = o.FlavorId
	if o.AvailabilityZone.IsSet() {
		toSerialize["availability_zone"] = o.AvailabilityZone.Get()
	}
	toSerialize["subnets"] = o.Subnets
	toSerialize["volumes"] = o.Volumes
	if o.KeyName.IsSet() {
		toSerialize["key_name"] = o.KeyName.Get()
	}
	toSerialize["security_groups"] = o.SecurityGroups
	if o.UserData.IsSet() {
		toSerialize["user_data"] = o.UserData.Get()
	}
	if !IsNil(o.IsDisableHyperThreading) {
		toSerialize["is_disable_hyper_threading"] = o.IsDisableHyperThreading
	}
	if !IsNil(o.IsBonding) {
		toSerialize["is_bonding"] = o.IsBonding
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateInstanceModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"image_id",
		"flavor_id",
		"subnets",
		"volumes",
		"security_groups",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateInstanceModel := _CreateInstanceModel{}

	err = json.Unmarshal(data, &varCreateInstanceModel)

	if err != nil {
		return err
	}

	*o = CreateInstanceModel(varCreateInstanceModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "count")
		delete(additionalProperties, "image_id")
		delete(additionalProperties, "flavor_id")
		delete(additionalProperties, "availability_zone")
		delete(additionalProperties, "subnets")
		delete(additionalProperties, "volumes")
		delete(additionalProperties, "key_name")
		delete(additionalProperties, "security_groups")
		delete(additionalProperties, "user_data")
		delete(additionalProperties, "is_disable_hyper_threading")
		delete(additionalProperties, "is_bonding")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateInstanceModel struct {
	value *CreateInstanceModel
	isSet bool
}

func (v NullableCreateInstanceModel) Get() *CreateInstanceModel {
	return v.value
}

func (v *NullableCreateInstanceModel) Set(val *CreateInstanceModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateInstanceModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateInstanceModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateInstanceModel(val *CreateInstanceModel) *NullableCreateInstanceModel {
	return &NullableCreateInstanceModel{value: val, isSet: true}
}

func (v NullableCreateInstanceModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateInstanceModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
