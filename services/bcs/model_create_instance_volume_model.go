/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateInstanceVolumeModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateInstanceVolumeModel{}

// CreateInstanceVolumeModel struct for CreateInstanceVolumeModel
type CreateInstanceVolumeModel struct {
	// 인스턴스 삭제 시 해당 볼륨을 자동으로 삭제할지 여부 <br/> - 첫 번째 볼륨: 기본값 `true` <br/> - 두 번째 이후 볼륨: 기본값 `false`
	IsDeleteOnTermination *bool `json:"is_delete_on_termination,omitempty"`
	// 볼륨의 크기(GB) <br/> - 허용 범위: 1 ~ 16384 <br/> - `source_type = image`일 경우, 해당 이미지의 `min_disk` 이상이어야 하며, Windows 이미지의 경우 최대 2048GB까지 지원
	Size int32 `json:"size"`
	// 볼륨의 소스 유형 <br/> - `image`: 이미지로부터 생성 <br/> - `blank`: 빈 볼륨으로 생성 (첫 번째 이후 볼륨의 기본값) <br/> - `volume`: 기존 볼륨으로부터 생성
	SourceType           *SourceType    `json:"source_type,omitempty"`
	Uuid                 NullableString `json:"uuid,omitempty"`
	TypeId               NullableString `json:"type_id,omitempty"`
	EncryptionSecretId   NullableString `json:"encryption_secret_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateInstanceVolumeModel CreateInstanceVolumeModel

// NewCreateInstanceVolumeModel instantiates a new CreateInstanceVolumeModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateInstanceVolumeModel(size int32) *CreateInstanceVolumeModel {
	this := CreateInstanceVolumeModel{}
	var isDeleteOnTermination bool = false
	this.IsDeleteOnTermination = &isDeleteOnTermination
	this.Size = size
	return &this
}

// NewCreateInstanceVolumeModelWithDefaults instantiates a new CreateInstanceVolumeModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateInstanceVolumeModelWithDefaults() *CreateInstanceVolumeModel {
	this := CreateInstanceVolumeModel{}
	var isDeleteOnTermination bool = false
	this.IsDeleteOnTermination = &isDeleteOnTermination
	return &this
}

// GetIsDeleteOnTermination returns the IsDeleteOnTermination field value if set, zero value otherwise.
func (o *CreateInstanceVolumeModel) GetIsDeleteOnTermination() bool {
	if o == nil || IsNil(o.IsDeleteOnTermination) {
		var ret bool
		return ret
	}
	return *o.IsDeleteOnTermination
}

// GetIsDeleteOnTerminationOk returns a tuple with the IsDeleteOnTermination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstanceVolumeModel) GetIsDeleteOnTerminationOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeleteOnTermination) {
		return nil, false
	}
	return o.IsDeleteOnTermination, true
}

// HasIsDeleteOnTermination returns a boolean if a field has been set.
func (o *CreateInstanceVolumeModel) HasIsDeleteOnTermination() bool {
	if o != nil && !IsNil(o.IsDeleteOnTermination) {
		return true
	}

	return false
}

// SetIsDeleteOnTermination gets a reference to the given bool and assigns it to the IsDeleteOnTermination field.
func (o *CreateInstanceVolumeModel) SetIsDeleteOnTermination(v bool) {
	o.IsDeleteOnTermination = &v
}

// GetSize returns the Size field value
func (o *CreateInstanceVolumeModel) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *CreateInstanceVolumeModel) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *CreateInstanceVolumeModel) SetSize(v int32) {
	o.Size = v
}

// GetSourceType returns the SourceType field value if set, zero value otherwise.
func (o *CreateInstanceVolumeModel) GetSourceType() SourceType {
	if o == nil || IsNil(o.SourceType) {
		var ret SourceType
		return ret
	}
	return *o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstanceVolumeModel) GetSourceTypeOk() (*SourceType, bool) {
	if o == nil || IsNil(o.SourceType) {
		return nil, false
	}
	return o.SourceType, true
}

// HasSourceType returns a boolean if a field has been set.
func (o *CreateInstanceVolumeModel) HasSourceType() bool {
	if o != nil && !IsNil(o.SourceType) {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given SourceType and assigns it to the SourceType field.
func (o *CreateInstanceVolumeModel) SetSourceType(v SourceType) {
	o.SourceType = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateInstanceVolumeModel) GetUuid() string {
	if o == nil || IsNil(o.Uuid.Get()) {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateInstanceVolumeModel) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *CreateInstanceVolumeModel) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *CreateInstanceVolumeModel) SetUuid(v string) {
	o.Uuid.Set(&v)
}

// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *CreateInstanceVolumeModel) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *CreateInstanceVolumeModel) UnsetUuid() {
	o.Uuid.Unset()
}

// GetTypeId returns the TypeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateInstanceVolumeModel) GetTypeId() string {
	if o == nil || IsNil(o.TypeId.Get()) {
		var ret string
		return ret
	}
	return *o.TypeId.Get()
}

// GetTypeIdOk returns a tuple with the TypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateInstanceVolumeModel) GetTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TypeId.Get(), o.TypeId.IsSet()
}

// HasTypeId returns a boolean if a field has been set.
func (o *CreateInstanceVolumeModel) HasTypeId() bool {
	if o != nil && o.TypeId.IsSet() {
		return true
	}

	return false
}

// SetTypeId gets a reference to the given NullableString and assigns it to the TypeId field.
func (o *CreateInstanceVolumeModel) SetTypeId(v string) {
	o.TypeId.Set(&v)
}

// SetTypeIdNil sets the value for TypeId to be an explicit nil
func (o *CreateInstanceVolumeModel) SetTypeIdNil() {
	o.TypeId.Set(nil)
}

// UnsetTypeId ensures that no value is present for TypeId, not even an explicit nil
func (o *CreateInstanceVolumeModel) UnsetTypeId() {
	o.TypeId.Unset()
}

// GetEncryptionSecretId returns the EncryptionSecretId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateInstanceVolumeModel) GetEncryptionSecretId() string {
	if o == nil || IsNil(o.EncryptionSecretId.Get()) {
		var ret string
		return ret
	}
	return *o.EncryptionSecretId.Get()
}

// GetEncryptionSecretIdOk returns a tuple with the EncryptionSecretId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateInstanceVolumeModel) GetEncryptionSecretIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncryptionSecretId.Get(), o.EncryptionSecretId.IsSet()
}

// HasEncryptionSecretId returns a boolean if a field has been set.
func (o *CreateInstanceVolumeModel) HasEncryptionSecretId() bool {
	if o != nil && o.EncryptionSecretId.IsSet() {
		return true
	}

	return false
}

// SetEncryptionSecretId gets a reference to the given NullableString and assigns it to the EncryptionSecretId field.
func (o *CreateInstanceVolumeModel) SetEncryptionSecretId(v string) {
	o.EncryptionSecretId.Set(&v)
}

// SetEncryptionSecretIdNil sets the value for EncryptionSecretId to be an explicit nil
func (o *CreateInstanceVolumeModel) SetEncryptionSecretIdNil() {
	o.EncryptionSecretId.Set(nil)
}

// UnsetEncryptionSecretId ensures that no value is present for EncryptionSecretId, not even an explicit nil
func (o *CreateInstanceVolumeModel) UnsetEncryptionSecretId() {
	o.EncryptionSecretId.Unset()
}

func (o CreateInstanceVolumeModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateInstanceVolumeModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsDeleteOnTermination) {
		toSerialize["is_delete_on_termination"] = o.IsDeleteOnTermination
	}
	toSerialize["size"] = o.Size
	if !IsNil(o.SourceType) {
		toSerialize["source_type"] = o.SourceType
	}
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	if o.TypeId.IsSet() {
		toSerialize["type_id"] = o.TypeId.Get()
	}
	if o.EncryptionSecretId.IsSet() {
		toSerialize["encryption_secret_id"] = o.EncryptionSecretId.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateInstanceVolumeModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateInstanceVolumeModel := _CreateInstanceVolumeModel{}

	err = json.Unmarshal(data, &varCreateInstanceVolumeModel)

	if err != nil {
		return err
	}

	*o = CreateInstanceVolumeModel(varCreateInstanceVolumeModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "is_delete_on_termination")
		delete(additionalProperties, "size")
		delete(additionalProperties, "source_type")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "type_id")
		delete(additionalProperties, "encryption_secret_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateInstanceVolumeModel struct {
	value *CreateInstanceVolumeModel
	isSet bool
}

func (v NullableCreateInstanceVolumeModel) Get() *CreateInstanceVolumeModel {
	return v.value
}

func (v *NullableCreateInstanceVolumeModel) Set(val *CreateInstanceVolumeModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateInstanceVolumeModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateInstanceVolumeModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateInstanceVolumeModel(val *CreateInstanceVolumeModel) *NullableCreateInstanceVolumeModel {
	return &NullableCreateInstanceVolumeModel{value: val, isSet: true}
}

func (v NullableCreateInstanceVolumeModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateInstanceVolumeModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
