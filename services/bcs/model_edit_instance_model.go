/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
)

// checks if the EditInstanceModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditInstanceModel{}

// EditInstanceModel struct for EditInstanceModel
type EditInstanceModel struct {
	Name                 NullableString `json:"name,omitempty"`
	Description          NullableString `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EditInstanceModel EditInstanceModel

// NewEditInstanceModel instantiates a new EditInstanceModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditInstanceModel() *EditInstanceModel {
	this := EditInstanceModel{}
	return &this
}

// NewEditInstanceModelWithDefaults instantiates a new EditInstanceModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditInstanceModelWithDefaults() *EditInstanceModel {
	this := EditInstanceModel{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditInstanceModel) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditInstanceModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *EditInstanceModel) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *EditInstanceModel) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *EditInstanceModel) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *EditInstanceModel) UnsetName() {
	o.Name.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditInstanceModel) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditInstanceModel) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *EditInstanceModel) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *EditInstanceModel) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *EditInstanceModel) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *EditInstanceModel) UnsetDescription() {
	o.Description.Unset()
}

func (o EditInstanceModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditInstanceModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EditInstanceModel) UnmarshalJSON(data []byte) (err error) {
	varEditInstanceModel := _EditInstanceModel{}

	err = json.Unmarshal(data, &varEditInstanceModel)

	if err != nil {
		return err
	}

	*o = EditInstanceModel(varEditInstanceModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEditInstanceModel struct {
	value *EditInstanceModel
	isSet bool
}

func (v NullableEditInstanceModel) Get() *EditInstanceModel {
	return v.value
}

func (v *NullableEditInstanceModel) Set(val *EditInstanceModel) {
	v.value = val
	v.isSet = true
}

func (v NullableEditInstanceModel) IsSet() bool {
	return v.isSet
}

func (v *NullableEditInstanceModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditInstanceModel(val *EditInstanceModel) *NullableEditInstanceModel {
	return &NullableEditInstanceModel{value: val, isSet: true}
}

func (v NullableEditInstanceModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditInstanceModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
