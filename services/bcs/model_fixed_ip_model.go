/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
	"fmt"
)

// checks if the FixedIpModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FixedIpModel{}

// FixedIpModel struct for FixedIpModel
type FixedIpModel struct {
	// 할당된 프라이빗 IP 주소
	IpAddress string `json:"ip_address"`
	// 해당 IP가 소속된 서브넷의 ID
	SubnetId             string `json:"subnet_id"`
	AdditionalProperties map[string]interface{}
}

type _FixedIpModel FixedIpModel

// NewFixedIpModel instantiates a new FixedIpModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFixedIpModel(ipAddress string, subnetId string) *FixedIpModel {
	this := FixedIpModel{}
	this.IpAddress = ipAddress
	this.SubnetId = subnetId
	return &this
}

// NewFixedIpModelWithDefaults instantiates a new FixedIpModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFixedIpModelWithDefaults() *FixedIpModel {
	this := FixedIpModel{}
	return &this
}

// GetIpAddress returns the IpAddress field value
func (o *FixedIpModel) GetIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
func (o *FixedIpModel) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *FixedIpModel) SetIpAddress(v string) {
	o.IpAddress = v
}

// GetSubnetId returns the SubnetId field value
func (o *FixedIpModel) GetSubnetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubnetId
}

// GetSubnetIdOk returns a tuple with the SubnetId field value
// and a boolean to check if the value has been set.
func (o *FixedIpModel) GetSubnetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubnetId, true
}

// SetSubnetId sets field value
func (o *FixedIpModel) SetSubnetId(v string) {
	o.SubnetId = v
}

func (o FixedIpModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FixedIpModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ip_address"] = o.IpAddress
	toSerialize["subnet_id"] = o.SubnetId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FixedIpModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ip_address",
		"subnet_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFixedIpModel := _FixedIpModel{}

	err = json.Unmarshal(data, &varFixedIpModel)

	if err != nil {
		return err
	}

	*o = FixedIpModel(varFixedIpModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ip_address")
		delete(additionalProperties, "subnet_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFixedIpModel struct {
	value *FixedIpModel
	isSet bool
}

func (v NullableFixedIpModel) Get() *FixedIpModel {
	return v.value
}

func (v *NullableFixedIpModel) Set(val *FixedIpModel) {
	v.value = val
	v.isSet = true
}

func (v NullableFixedIpModel) IsSet() bool {
	return v.isSet
}

func (v *NullableFixedIpModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFixedIpModel(val *FixedIpModel) *NullableFixedIpModel {
	return &NullableFixedIpModel{value: val, isSet: true}
}

func (v NullableFixedIpModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFixedIpModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
