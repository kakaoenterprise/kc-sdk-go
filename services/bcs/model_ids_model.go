/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
)

// checks if the IdsModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdsModel{}

// IdsModel struct for IdsModel
type IdsModel struct {
	Ids                  []string `json:"ids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdsModel IdsModel

// NewIdsModel instantiates a new IdsModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdsModel() *IdsModel {
	this := IdsModel{}
	return &this
}

// NewIdsModelWithDefaults instantiates a new IdsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdsModelWithDefaults() *IdsModel {
	this := IdsModel{}
	return &this
}

// GetIds returns the Ids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdsModel) GetIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdsModel) GetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *IdsModel) HasIds() bool {
	if o != nil && !IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *IdsModel) SetIds(v []string) {
	o.Ids = v
}

func (o IdsModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdsModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Ids != nil {
		toSerialize["ids"] = o.Ids
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdsModel) UnmarshalJSON(data []byte) (err error) {
	varIdsModel := _IdsModel{}

	err = json.Unmarshal(data, &varIdsModel)

	if err != nil {
		return err
	}

	*o = IdsModel(varIdsModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdsModel struct {
	value *IdsModel
	isSet bool
}

func (v NullableIdsModel) Get() *IdsModel {
	return v.value
}

func (v *NullableIdsModel) Set(val *IdsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableIdsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableIdsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdsModel(val *IdsModel) *NullableIdsModel {
	return &NullableIdsModel{value: val, isSet: true}
}

func (v NullableIdsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
