/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceConsoleLogModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceConsoleLogModel{}

// InstanceConsoleLogModel struct for InstanceConsoleLogModel
type InstanceConsoleLogModel struct {
	// 인스턴스의 콘솔 로그
	ConsoleLogs          string `json:"console-logs"`
	AdditionalProperties map[string]interface{}
}

type _InstanceConsoleLogModel InstanceConsoleLogModel

// NewInstanceConsoleLogModel instantiates a new InstanceConsoleLogModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceConsoleLogModel(consoleLogs string) *InstanceConsoleLogModel {
	this := InstanceConsoleLogModel{}
	this.ConsoleLogs = consoleLogs
	return &this
}

// NewInstanceConsoleLogModelWithDefaults instantiates a new InstanceConsoleLogModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceConsoleLogModelWithDefaults() *InstanceConsoleLogModel {
	this := InstanceConsoleLogModel{}
	return &this
}

// GetConsoleLogs returns the ConsoleLogs field value
func (o *InstanceConsoleLogModel) GetConsoleLogs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConsoleLogs
}

// GetConsoleLogsOk returns a tuple with the ConsoleLogs field value
// and a boolean to check if the value has been set.
func (o *InstanceConsoleLogModel) GetConsoleLogsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsoleLogs, true
}

// SetConsoleLogs sets field value
func (o *InstanceConsoleLogModel) SetConsoleLogs(v string) {
	o.ConsoleLogs = v
}

func (o InstanceConsoleLogModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceConsoleLogModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["console-logs"] = o.ConsoleLogs

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceConsoleLogModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"console-logs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceConsoleLogModel := _InstanceConsoleLogModel{}

	err = json.Unmarshal(data, &varInstanceConsoleLogModel)

	if err != nil {
		return err
	}

	*o = InstanceConsoleLogModel(varInstanceConsoleLogModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "console-logs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceConsoleLogModel struct {
	value *InstanceConsoleLogModel
	isSet bool
}

func (v NullableInstanceConsoleLogModel) Get() *InstanceConsoleLogModel {
	return v.value
}

func (v *NullableInstanceConsoleLogModel) Set(val *InstanceConsoleLogModel) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceConsoleLogModel) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceConsoleLogModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceConsoleLogModel(val *InstanceConsoleLogModel) *NullableInstanceConsoleLogModel {
	return &NullableInstanceConsoleLogModel{value: val, isSet: true}
}

func (v NullableInstanceConsoleLogModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceConsoleLogModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
