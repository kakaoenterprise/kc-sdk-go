/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceListModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceListModel{}

// InstanceListModel struct for InstanceListModel
type InstanceListModel struct {
	Instances            []BcsInstanceV1ApiListInstancesModelInstanceModel `json:"instances"`
	Pagination           PaginationModel                                   `json:"pagination"`
	AdditionalProperties map[string]interface{}
}

type _InstanceListModel InstanceListModel

// NewInstanceListModel instantiates a new InstanceListModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceListModel(instances []BcsInstanceV1ApiListInstancesModelInstanceModel, pagination PaginationModel) *InstanceListModel {
	this := InstanceListModel{}
	this.Instances = instances
	this.Pagination = pagination
	return &this
}

// NewInstanceListModelWithDefaults instantiates a new InstanceListModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceListModelWithDefaults() *InstanceListModel {
	this := InstanceListModel{}
	return &this
}

// GetInstances returns the Instances field value
func (o *InstanceListModel) GetInstances() []BcsInstanceV1ApiListInstancesModelInstanceModel {
	if o == nil {
		var ret []BcsInstanceV1ApiListInstancesModelInstanceModel
		return ret
	}

	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value
// and a boolean to check if the value has been set.
func (o *InstanceListModel) GetInstancesOk() ([]BcsInstanceV1ApiListInstancesModelInstanceModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instances, true
}

// SetInstances sets field value
func (o *InstanceListModel) SetInstances(v []BcsInstanceV1ApiListInstancesModelInstanceModel) {
	o.Instances = v
}

// GetPagination returns the Pagination field value
func (o *InstanceListModel) GetPagination() PaginationModel {
	if o == nil {
		var ret PaginationModel
		return ret
	}

	return o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value
// and a boolean to check if the value has been set.
func (o *InstanceListModel) GetPaginationOk() (*PaginationModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pagination, true
}

// SetPagination sets field value
func (o *InstanceListModel) SetPagination(v PaginationModel) {
	o.Pagination = v
}

func (o InstanceListModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceListModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["instances"] = o.Instances
	toSerialize["pagination"] = o.Pagination

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceListModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instances",
		"pagination",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceListModel := _InstanceListModel{}

	err = json.Unmarshal(data, &varInstanceListModel)

	if err != nil {
		return err
	}

	*o = InstanceListModel(varInstanceListModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "instances")
		delete(additionalProperties, "pagination")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceListModel struct {
	value *InstanceListModel
	isSet bool
}

func (v NullableInstanceListModel) Get() *InstanceListModel {
	return v.value
}

func (v *NullableInstanceListModel) Set(val *InstanceListModel) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceListModel) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceListModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceListModel(val *InstanceListModel) *NullableInstanceListModel {
	return &NullableInstanceListModel{value: val, isSet: true}
}

func (v NullableInstanceListModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceListModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
