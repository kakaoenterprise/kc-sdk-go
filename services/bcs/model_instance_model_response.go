/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceModelResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceModelResponse{}

// InstanceModelResponse struct for InstanceModelResponse
type InstanceModelResponse struct {
	Instance             BcsInstanceV1ApiUpdateInstanceModelInstanceModel `json:"instance"`
	AdditionalProperties map[string]interface{}
}

type _InstanceModelResponse InstanceModelResponse

// NewInstanceModelResponse instantiates a new InstanceModelResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceModelResponse(instance BcsInstanceV1ApiUpdateInstanceModelInstanceModel) *InstanceModelResponse {
	this := InstanceModelResponse{}
	this.Instance = instance
	return &this
}

// NewInstanceModelResponseWithDefaults instantiates a new InstanceModelResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceModelResponseWithDefaults() *InstanceModelResponse {
	this := InstanceModelResponse{}
	return &this
}

// GetInstance returns the Instance field value
func (o *InstanceModelResponse) GetInstance() BcsInstanceV1ApiUpdateInstanceModelInstanceModel {
	if o == nil {
		var ret BcsInstanceV1ApiUpdateInstanceModelInstanceModel
		return ret
	}

	return o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value
// and a boolean to check if the value has been set.
func (o *InstanceModelResponse) GetInstanceOk() (*BcsInstanceV1ApiUpdateInstanceModelInstanceModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Instance, true
}

// SetInstance sets field value
func (o *InstanceModelResponse) SetInstance(v BcsInstanceV1ApiUpdateInstanceModelInstanceModel) {
	o.Instance = v
}

func (o InstanceModelResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceModelResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["instance"] = o.Instance

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceModelResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceModelResponse := _InstanceModelResponse{}

	err = json.Unmarshal(data, &varInstanceModelResponse)

	if err != nil {
		return err
	}

	*o = InstanceModelResponse(varInstanceModelResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "instance")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceModelResponse struct {
	value *InstanceModelResponse
	isSet bool
}

func (v NullableInstanceModelResponse) Get() *InstanceModelResponse {
	return v.value
}

func (v *NullableInstanceModelResponse) Set(val *InstanceModelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceModelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceModelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceModelResponse(val *InstanceModelResponse) *NullableInstanceModelResponse {
	return &NullableInstanceModelResponse{value: val, isSet: true}
}

func (v NullableInstanceModelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceModelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
