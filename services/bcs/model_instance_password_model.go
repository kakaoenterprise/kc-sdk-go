/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
	"fmt"
)

// checks if the InstancePasswordModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstancePasswordModel{}

// InstancePasswordModel struct for InstancePasswordModel
type InstancePasswordModel struct {
	// 인스턴스에 설정된 관리자 비밀번호 <br/> - Windows: RDP(Remote Desktop Protocol) 로그인에 사용 <br/> - 비밀번호는 SSH 공개키로 암호화된 상태로 제공되며, RDP 접속을 위해서는 사용자의 SSH 개인키로 복호화해야 함
	Password             string `json:"password"`
	AdditionalProperties map[string]interface{}
}

type _InstancePasswordModel InstancePasswordModel

// NewInstancePasswordModel instantiates a new InstancePasswordModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstancePasswordModel(password string) *InstancePasswordModel {
	this := InstancePasswordModel{}
	this.Password = password
	return &this
}

// NewInstancePasswordModelWithDefaults instantiates a new InstancePasswordModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstancePasswordModelWithDefaults() *InstancePasswordModel {
	this := InstancePasswordModel{}
	return &this
}

// GetPassword returns the Password field value
func (o *InstancePasswordModel) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *InstancePasswordModel) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *InstancePasswordModel) SetPassword(v string) {
	o.Password = v
}

func (o InstancePasswordModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstancePasswordModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["password"] = o.Password

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstancePasswordModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstancePasswordModel := _InstancePasswordModel{}

	err = json.Unmarshal(data, &varInstancePasswordModel)

	if err != nil {
		return err
	}

	*o = InstancePasswordModel(varInstancePasswordModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "password")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstancePasswordModel struct {
	value *InstancePasswordModel
	isSet bool
}

func (v NullableInstancePasswordModel) Get() *InstancePasswordModel {
	return v.value
}

func (v *NullableInstancePasswordModel) Set(val *InstancePasswordModel) {
	v.value = val
	v.isSet = true
}

func (v NullableInstancePasswordModel) IsSet() bool {
	return v.isSet
}

func (v *NullableInstancePasswordModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstancePasswordModel(val *InstancePasswordModel) *NullableInstancePasswordModel {
	return &NullableInstancePasswordModel{value: val, isSet: true}
}

func (v NullableInstancePasswordModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstancePasswordModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
