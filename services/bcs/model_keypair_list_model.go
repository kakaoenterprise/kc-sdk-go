/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
	"fmt"
)

// checks if the KeypairListModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeypairListModel{}

// KeypairListModel struct for KeypairListModel
type KeypairListModel struct {
	Keypairs             []BcsInstanceV1ApiListKeypairsModelKeypairModel `json:"keypairs,omitempty"`
	Pagination           PaginationModel                                 `json:"pagination"`
	AdditionalProperties map[string]interface{}
}

type _KeypairListModel KeypairListModel

// NewKeypairListModel instantiates a new KeypairListModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeypairListModel(pagination PaginationModel) *KeypairListModel {
	this := KeypairListModel{}
	this.Pagination = pagination
	return &this
}

// NewKeypairListModelWithDefaults instantiates a new KeypairListModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeypairListModelWithDefaults() *KeypairListModel {
	this := KeypairListModel{}
	return &this
}

// GetKeypairs returns the Keypairs field value if set, zero value otherwise.
func (o *KeypairListModel) GetKeypairs() []BcsInstanceV1ApiListKeypairsModelKeypairModel {
	if o == nil || IsNil(o.Keypairs) {
		var ret []BcsInstanceV1ApiListKeypairsModelKeypairModel
		return ret
	}
	return o.Keypairs
}

// GetKeypairsOk returns a tuple with the Keypairs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeypairListModel) GetKeypairsOk() ([]BcsInstanceV1ApiListKeypairsModelKeypairModel, bool) {
	if o == nil || IsNil(o.Keypairs) {
		return nil, false
	}
	return o.Keypairs, true
}

// HasKeypairs returns a boolean if a field has been set.
func (o *KeypairListModel) HasKeypairs() bool {
	if o != nil && !IsNil(o.Keypairs) {
		return true
	}

	return false
}

// SetKeypairs gets a reference to the given []BcsInstanceV1ApiListKeypairsModelKeypairModel and assigns it to the Keypairs field.
func (o *KeypairListModel) SetKeypairs(v []BcsInstanceV1ApiListKeypairsModelKeypairModel) {
	o.Keypairs = v
}

// GetPagination returns the Pagination field value
func (o *KeypairListModel) GetPagination() PaginationModel {
	if o == nil {
		var ret PaginationModel
		return ret
	}

	return o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value
// and a boolean to check if the value has been set.
func (o *KeypairListModel) GetPaginationOk() (*PaginationModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pagination, true
}

// SetPagination sets field value
func (o *KeypairListModel) SetPagination(v PaginationModel) {
	o.Pagination = v
}

func (o KeypairListModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeypairListModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Keypairs) {
		toSerialize["keypairs"] = o.Keypairs
	}
	toSerialize["pagination"] = o.Pagination

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KeypairListModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pagination",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKeypairListModel := _KeypairListModel{}

	err = json.Unmarshal(data, &varKeypairListModel)

	if err != nil {
		return err
	}

	*o = KeypairListModel(varKeypairListModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "keypairs")
		delete(additionalProperties, "pagination")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKeypairListModel struct {
	value *KeypairListModel
	isSet bool
}

func (v NullableKeypairListModel) Get() *KeypairListModel {
	return v.value
}

func (v *NullableKeypairListModel) Set(val *KeypairListModel) {
	v.value = val
	v.isSet = true
}

func (v NullableKeypairListModel) IsSet() bool {
	return v.isSet
}

func (v *NullableKeypairListModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeypairListModel(val *KeypairListModel) *NullableKeypairListModel {
	return &NullableKeypairListModel{value: val, isSet: true}
}

func (v NullableKeypairListModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeypairListModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
