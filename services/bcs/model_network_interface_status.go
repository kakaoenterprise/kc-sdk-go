/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
	"fmt"
)

// NetworkInterfaceStatus the model 'NetworkInterfaceStatus'
type NetworkInterfaceStatus string

// List of NetworkInterfaceStatus
const (
	NETWORKINTERFACESTATUS_AVAILABLE NetworkInterfaceStatus = "available"
	NETWORKINTERFACESTATUS_IN_USE    NetworkInterfaceStatus = "in_use"
)

// All allowed values of NetworkInterfaceStatus enum
var AllowedNetworkInterfaceStatusEnumValues = []NetworkInterfaceStatus{
	"available",
	"in_use",
}

func (v *NetworkInterfaceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NetworkInterfaceStatus(value)
	for _, existing := range AllowedNetworkInterfaceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NetworkInterfaceStatus", value)
}

// NewNetworkInterfaceStatusFromValue returns a pointer to a valid NetworkInterfaceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkInterfaceStatusFromValue(v string) (*NetworkInterfaceStatus, error) {
	ev := NetworkInterfaceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NetworkInterfaceStatus: valid values are %v", v, AllowedNetworkInterfaceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetworkInterfaceStatus) IsValid() bool {
	for _, existing := range AllowedNetworkInterfaceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NetworkInterfaceStatus value
func (v NetworkInterfaceStatus) Ptr() *NetworkInterfaceStatus {
	return &v
}

type NullableNetworkInterfaceStatus struct {
	value *NetworkInterfaceStatus
	isSet bool
}

func (v NullableNetworkInterfaceStatus) Get() *NetworkInterfaceStatus {
	return v.value
}

func (v *NullableNetworkInterfaceStatus) Set(val *NetworkInterfaceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkInterfaceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkInterfaceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkInterfaceStatus(val *NetworkInterfaceStatus) *NullableNetworkInterfaceStatus {
	return &NullableNetworkInterfaceStatus{value: val, isSet: true}
}

func (v NullableNetworkInterfaceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkInterfaceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
