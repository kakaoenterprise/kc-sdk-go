/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the RebuildInstanceModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RebuildInstanceModel{}

// RebuildInstanceModel struct for RebuildInstanceModel
type RebuildInstanceModel struct {
	// 인스턴스 ID
	Id string `json:"id"`
	// 인스턴스의 이름
	Name string `json:"name"`
	// 인스턴스가 속한 프로젝트의 ID
	ProjectId string `json:"project_id"`
	// 인스턴스를 생성한 사용자의 ID
	UserId   string            `json:"user_id"`
	Metadata map[string]string `json:"metadata,omitempty"`
	// 인스턴스의 가상 하드웨어 프로파일 정보
	Flavor BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel `json:"flavor"`
	// 리소스가 생성된 시간 <br/> - ISO_8601 형식  <br/> - UTC 기준
	CreatedAt time.Time `json:"created_at"`
	// 리소스가 마지막으로 수정된 시간 <br/> - ISO_8601 형식  <br/> - UTC 기준
	UpdatedAt        time.Time                                                         `json:"updated_at"`
	Addresses        []map[string]string                                               `json:"addresses,omitempty"`
	AvailabilityZone NullableAvailabilityZone                                          `json:"availability_zone,omitempty"`
	KeyName          NullableString                                                    `json:"key_name,omitempty"`
	TerminatedAt     NullableString                                                    `json:"terminated_at,omitempty"`
	SecurityGroups   []BcsInstanceV1ApiRebuildInstanceModelInstanceSecurityGroupModel  `json:"security_groups,omitempty"`
	TaskState        NullableString                                                    `json:"task_state,omitempty"`
	VmState          NullableString                                                    `json:"vm_state,omitempty"`
	PowerState       NullablePowerState                                                `json:"power_state,omitempty"`
	AttachedVolumes  []BcsInstanceV1ApiRebuildInstanceModelInstanceAttachedVolumeModel `json:"attached_volumes,omitempty"`
	// 인스턴스에 대한 설명
	Description          string         `json:"description"`
	Hostname             NullableString `json:"hostname,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RebuildInstanceModel RebuildInstanceModel

// NewRebuildInstanceModel instantiates a new RebuildInstanceModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRebuildInstanceModel(id string, name string, projectId string, userId string, flavor BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel, createdAt time.Time, updatedAt time.Time, description string) *RebuildInstanceModel {
	this := RebuildInstanceModel{}
	this.Id = id
	this.Name = name
	this.ProjectId = projectId
	this.UserId = userId
	this.Flavor = flavor
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Description = description
	return &this
}

// NewRebuildInstanceModelWithDefaults instantiates a new RebuildInstanceModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRebuildInstanceModelWithDefaults() *RebuildInstanceModel {
	this := RebuildInstanceModel{}
	return &this
}

// GetId returns the Id field value
func (o *RebuildInstanceModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RebuildInstanceModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RebuildInstanceModel) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *RebuildInstanceModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RebuildInstanceModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RebuildInstanceModel) SetName(v string) {
	o.Name = v
}

// GetProjectId returns the ProjectId field value
func (o *RebuildInstanceModel) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *RebuildInstanceModel) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *RebuildInstanceModel) SetProjectId(v string) {
	o.ProjectId = v
}

// GetUserId returns the UserId field value
func (o *RebuildInstanceModel) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *RebuildInstanceModel) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *RebuildInstanceModel) SetUserId(v string) {
	o.UserId = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RebuildInstanceModel) GetMetadata() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RebuildInstanceModel) GetMetadataOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]string{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *RebuildInstanceModel) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *RebuildInstanceModel) SetMetadata(v map[string]string) {
	o.Metadata = v
}

// GetFlavor returns the Flavor field value
func (o *RebuildInstanceModel) GetFlavor() BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel {
	if o == nil {
		var ret BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel
		return ret
	}

	return o.Flavor
}

// GetFlavorOk returns a tuple with the Flavor field value
// and a boolean to check if the value has been set.
func (o *RebuildInstanceModel) GetFlavorOk() (*BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Flavor, true
}

// SetFlavor sets field value
func (o *RebuildInstanceModel) SetFlavor(v BcsInstanceV1ApiRebuildInstanceModelInstanceFlavorModel) {
	o.Flavor = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *RebuildInstanceModel) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *RebuildInstanceModel) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *RebuildInstanceModel) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *RebuildInstanceModel) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *RebuildInstanceModel) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *RebuildInstanceModel) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetAddresses returns the Addresses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RebuildInstanceModel) GetAddresses() []map[string]string {
	if o == nil {
		var ret []map[string]string
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RebuildInstanceModel) GetAddressesOk() ([]map[string]string, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *RebuildInstanceModel) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []map[string]string and assigns it to the Addresses field.
func (o *RebuildInstanceModel) SetAddresses(v []map[string]string) {
	o.Addresses = v
}

// GetAvailabilityZone returns the AvailabilityZone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RebuildInstanceModel) GetAvailabilityZone() AvailabilityZone {
	if o == nil || IsNil(o.AvailabilityZone.Get()) {
		var ret AvailabilityZone
		return ret
	}
	return *o.AvailabilityZone.Get()
}

// GetAvailabilityZoneOk returns a tuple with the AvailabilityZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RebuildInstanceModel) GetAvailabilityZoneOk() (*AvailabilityZone, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvailabilityZone.Get(), o.AvailabilityZone.IsSet()
}

// HasAvailabilityZone returns a boolean if a field has been set.
func (o *RebuildInstanceModel) HasAvailabilityZone() bool {
	if o != nil && o.AvailabilityZone.IsSet() {
		return true
	}

	return false
}

// SetAvailabilityZone gets a reference to the given NullableAvailabilityZone and assigns it to the AvailabilityZone field.
func (o *RebuildInstanceModel) SetAvailabilityZone(v AvailabilityZone) {
	o.AvailabilityZone.Set(&v)
}

// SetAvailabilityZoneNil sets the value for AvailabilityZone to be an explicit nil
func (o *RebuildInstanceModel) SetAvailabilityZoneNil() {
	o.AvailabilityZone.Set(nil)
}

// UnsetAvailabilityZone ensures that no value is present for AvailabilityZone, not even an explicit nil
func (o *RebuildInstanceModel) UnsetAvailabilityZone() {
	o.AvailabilityZone.Unset()
}

// GetKeyName returns the KeyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RebuildInstanceModel) GetKeyName() string {
	if o == nil || IsNil(o.KeyName.Get()) {
		var ret string
		return ret
	}
	return *o.KeyName.Get()
}

// GetKeyNameOk returns a tuple with the KeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RebuildInstanceModel) GetKeyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KeyName.Get(), o.KeyName.IsSet()
}

// HasKeyName returns a boolean if a field has been set.
func (o *RebuildInstanceModel) HasKeyName() bool {
	if o != nil && o.KeyName.IsSet() {
		return true
	}

	return false
}

// SetKeyName gets a reference to the given NullableString and assigns it to the KeyName field.
func (o *RebuildInstanceModel) SetKeyName(v string) {
	o.KeyName.Set(&v)
}

// SetKeyNameNil sets the value for KeyName to be an explicit nil
func (o *RebuildInstanceModel) SetKeyNameNil() {
	o.KeyName.Set(nil)
}

// UnsetKeyName ensures that no value is present for KeyName, not even an explicit nil
func (o *RebuildInstanceModel) UnsetKeyName() {
	o.KeyName.Unset()
}

// GetTerminatedAt returns the TerminatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RebuildInstanceModel) GetTerminatedAt() string {
	if o == nil || IsNil(o.TerminatedAt.Get()) {
		var ret string
		return ret
	}
	return *o.TerminatedAt.Get()
}

// GetTerminatedAtOk returns a tuple with the TerminatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RebuildInstanceModel) GetTerminatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TerminatedAt.Get(), o.TerminatedAt.IsSet()
}

// HasTerminatedAt returns a boolean if a field has been set.
func (o *RebuildInstanceModel) HasTerminatedAt() bool {
	if o != nil && o.TerminatedAt.IsSet() {
		return true
	}

	return false
}

// SetTerminatedAt gets a reference to the given NullableString and assigns it to the TerminatedAt field.
func (o *RebuildInstanceModel) SetTerminatedAt(v string) {
	o.TerminatedAt.Set(&v)
}

// SetTerminatedAtNil sets the value for TerminatedAt to be an explicit nil
func (o *RebuildInstanceModel) SetTerminatedAtNil() {
	o.TerminatedAt.Set(nil)
}

// UnsetTerminatedAt ensures that no value is present for TerminatedAt, not even an explicit nil
func (o *RebuildInstanceModel) UnsetTerminatedAt() {
	o.TerminatedAt.Unset()
}

// GetSecurityGroups returns the SecurityGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RebuildInstanceModel) GetSecurityGroups() []BcsInstanceV1ApiRebuildInstanceModelInstanceSecurityGroupModel {
	if o == nil {
		var ret []BcsInstanceV1ApiRebuildInstanceModelInstanceSecurityGroupModel
		return ret
	}
	return o.SecurityGroups
}

// GetSecurityGroupsOk returns a tuple with the SecurityGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RebuildInstanceModel) GetSecurityGroupsOk() ([]BcsInstanceV1ApiRebuildInstanceModelInstanceSecurityGroupModel, bool) {
	if o == nil || IsNil(o.SecurityGroups) {
		return nil, false
	}
	return o.SecurityGroups, true
}

// HasSecurityGroups returns a boolean if a field has been set.
func (o *RebuildInstanceModel) HasSecurityGroups() bool {
	if o != nil && !IsNil(o.SecurityGroups) {
		return true
	}

	return false
}

// SetSecurityGroups gets a reference to the given []BcsInstanceV1ApiRebuildInstanceModelInstanceSecurityGroupModel and assigns it to the SecurityGroups field.
func (o *RebuildInstanceModel) SetSecurityGroups(v []BcsInstanceV1ApiRebuildInstanceModelInstanceSecurityGroupModel) {
	o.SecurityGroups = v
}

// GetTaskState returns the TaskState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RebuildInstanceModel) GetTaskState() string {
	if o == nil || IsNil(o.TaskState.Get()) {
		var ret string
		return ret
	}
	return *o.TaskState.Get()
}

// GetTaskStateOk returns a tuple with the TaskState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RebuildInstanceModel) GetTaskStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskState.Get(), o.TaskState.IsSet()
}

// HasTaskState returns a boolean if a field has been set.
func (o *RebuildInstanceModel) HasTaskState() bool {
	if o != nil && o.TaskState.IsSet() {
		return true
	}

	return false
}

// SetTaskState gets a reference to the given NullableString and assigns it to the TaskState field.
func (o *RebuildInstanceModel) SetTaskState(v string) {
	o.TaskState.Set(&v)
}

// SetTaskStateNil sets the value for TaskState to be an explicit nil
func (o *RebuildInstanceModel) SetTaskStateNil() {
	o.TaskState.Set(nil)
}

// UnsetTaskState ensures that no value is present for TaskState, not even an explicit nil
func (o *RebuildInstanceModel) UnsetTaskState() {
	o.TaskState.Unset()
}

// GetVmState returns the VmState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RebuildInstanceModel) GetVmState() string {
	if o == nil || IsNil(o.VmState.Get()) {
		var ret string
		return ret
	}
	return *o.VmState.Get()
}

// GetVmStateOk returns a tuple with the VmState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RebuildInstanceModel) GetVmStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VmState.Get(), o.VmState.IsSet()
}

// HasVmState returns a boolean if a field has been set.
func (o *RebuildInstanceModel) HasVmState() bool {
	if o != nil && o.VmState.IsSet() {
		return true
	}

	return false
}

// SetVmState gets a reference to the given NullableString and assigns it to the VmState field.
func (o *RebuildInstanceModel) SetVmState(v string) {
	o.VmState.Set(&v)
}

// SetVmStateNil sets the value for VmState to be an explicit nil
func (o *RebuildInstanceModel) SetVmStateNil() {
	o.VmState.Set(nil)
}

// UnsetVmState ensures that no value is present for VmState, not even an explicit nil
func (o *RebuildInstanceModel) UnsetVmState() {
	o.VmState.Unset()
}

// GetPowerState returns the PowerState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RebuildInstanceModel) GetPowerState() PowerState {
	if o == nil || IsNil(o.PowerState.Get()) {
		var ret PowerState
		return ret
	}
	return *o.PowerState.Get()
}

// GetPowerStateOk returns a tuple with the PowerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RebuildInstanceModel) GetPowerStateOk() (*PowerState, bool) {
	if o == nil {
		return nil, false
	}
	return o.PowerState.Get(), o.PowerState.IsSet()
}

// HasPowerState returns a boolean if a field has been set.
func (o *RebuildInstanceModel) HasPowerState() bool {
	if o != nil && o.PowerState.IsSet() {
		return true
	}

	return false
}

// SetPowerState gets a reference to the given NullablePowerState and assigns it to the PowerState field.
func (o *RebuildInstanceModel) SetPowerState(v PowerState) {
	o.PowerState.Set(&v)
}

// SetPowerStateNil sets the value for PowerState to be an explicit nil
func (o *RebuildInstanceModel) SetPowerStateNil() {
	o.PowerState.Set(nil)
}

// UnsetPowerState ensures that no value is present for PowerState, not even an explicit nil
func (o *RebuildInstanceModel) UnsetPowerState() {
	o.PowerState.Unset()
}

// GetAttachedVolumes returns the AttachedVolumes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RebuildInstanceModel) GetAttachedVolumes() []BcsInstanceV1ApiRebuildInstanceModelInstanceAttachedVolumeModel {
	if o == nil {
		var ret []BcsInstanceV1ApiRebuildInstanceModelInstanceAttachedVolumeModel
		return ret
	}
	return o.AttachedVolumes
}

// GetAttachedVolumesOk returns a tuple with the AttachedVolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RebuildInstanceModel) GetAttachedVolumesOk() ([]BcsInstanceV1ApiRebuildInstanceModelInstanceAttachedVolumeModel, bool) {
	if o == nil || IsNil(o.AttachedVolumes) {
		return nil, false
	}
	return o.AttachedVolumes, true
}

// HasAttachedVolumes returns a boolean if a field has been set.
func (o *RebuildInstanceModel) HasAttachedVolumes() bool {
	if o != nil && !IsNil(o.AttachedVolumes) {
		return true
	}

	return false
}

// SetAttachedVolumes gets a reference to the given []BcsInstanceV1ApiRebuildInstanceModelInstanceAttachedVolumeModel and assigns it to the AttachedVolumes field.
func (o *RebuildInstanceModel) SetAttachedVolumes(v []BcsInstanceV1ApiRebuildInstanceModelInstanceAttachedVolumeModel) {
	o.AttachedVolumes = v
}

// GetDescription returns the Description field value
func (o *RebuildInstanceModel) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *RebuildInstanceModel) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *RebuildInstanceModel) SetDescription(v string) {
	o.Description = v
}

// GetHostname returns the Hostname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RebuildInstanceModel) GetHostname() string {
	if o == nil || IsNil(o.Hostname.Get()) {
		var ret string
		return ret
	}
	return *o.Hostname.Get()
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RebuildInstanceModel) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hostname.Get(), o.Hostname.IsSet()
}

// HasHostname returns a boolean if a field has been set.
func (o *RebuildInstanceModel) HasHostname() bool {
	if o != nil && o.Hostname.IsSet() {
		return true
	}

	return false
}

// SetHostname gets a reference to the given NullableString and assigns it to the Hostname field.
func (o *RebuildInstanceModel) SetHostname(v string) {
	o.Hostname.Set(&v)
}

// SetHostnameNil sets the value for Hostname to be an explicit nil
func (o *RebuildInstanceModel) SetHostnameNil() {
	o.Hostname.Set(nil)
}

// UnsetHostname ensures that no value is present for Hostname, not even an explicit nil
func (o *RebuildInstanceModel) UnsetHostname() {
	o.Hostname.Unset()
}

func (o RebuildInstanceModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RebuildInstanceModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["project_id"] = o.ProjectId
	toSerialize["user_id"] = o.UserId
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["flavor"] = o.Flavor
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	if o.Addresses != nil {
		toSerialize["addresses"] = o.Addresses
	}
	if o.AvailabilityZone.IsSet() {
		toSerialize["availability_zone"] = o.AvailabilityZone.Get()
	}
	if o.KeyName.IsSet() {
		toSerialize["key_name"] = o.KeyName.Get()
	}
	if o.TerminatedAt.IsSet() {
		toSerialize["terminated_at"] = o.TerminatedAt.Get()
	}
	if o.SecurityGroups != nil {
		toSerialize["security_groups"] = o.SecurityGroups
	}
	if o.TaskState.IsSet() {
		toSerialize["task_state"] = o.TaskState.Get()
	}
	if o.VmState.IsSet() {
		toSerialize["vm_state"] = o.VmState.Get()
	}
	if o.PowerState.IsSet() {
		toSerialize["power_state"] = o.PowerState.Get()
	}
	if o.AttachedVolumes != nil {
		toSerialize["attached_volumes"] = o.AttachedVolumes
	}
	toSerialize["description"] = o.Description
	if o.Hostname.IsSet() {
		toSerialize["hostname"] = o.Hostname.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RebuildInstanceModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"project_id",
		"user_id",
		"flavor",
		"created_at",
		"updated_at",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRebuildInstanceModel := _RebuildInstanceModel{}

	err = json.Unmarshal(data, &varRebuildInstanceModel)

	if err != nil {
		return err
	}

	*o = RebuildInstanceModel(varRebuildInstanceModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "project_id")
		delete(additionalProperties, "user_id")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "flavor")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "addresses")
		delete(additionalProperties, "availability_zone")
		delete(additionalProperties, "key_name")
		delete(additionalProperties, "terminated_at")
		delete(additionalProperties, "security_groups")
		delete(additionalProperties, "task_state")
		delete(additionalProperties, "vm_state")
		delete(additionalProperties, "power_state")
		delete(additionalProperties, "attached_volumes")
		delete(additionalProperties, "description")
		delete(additionalProperties, "hostname")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRebuildInstanceModel struct {
	value *RebuildInstanceModel
	isSet bool
}

func (v NullableRebuildInstanceModel) Get() *RebuildInstanceModel {
	return v.value
}

func (v *NullableRebuildInstanceModel) Set(val *RebuildInstanceModel) {
	v.value = val
	v.isSet = true
}

func (v NullableRebuildInstanceModel) IsSet() bool {
	return v.isSet
}

func (v *NullableRebuildInstanceModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRebuildInstanceModel(val *RebuildInstanceModel) *NullableRebuildInstanceModel {
	return &NullableRebuildInstanceModel{value: val, isSet: true}
}

func (v NullableRebuildInstanceModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRebuildInstanceModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
