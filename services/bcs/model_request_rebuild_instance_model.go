/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
	"fmt"
)

// checks if the RequestRebuildInstanceModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestRebuildInstanceModel{}

// RequestRebuildInstanceModel struct for RequestRebuildInstanceModel
type RequestRebuildInstanceModel struct {
	// 이미지의 고유 ID
	ImageId              string         `json:"image_id"`
	KeyName              NullableString `json:"key_name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RequestRebuildInstanceModel RequestRebuildInstanceModel

// NewRequestRebuildInstanceModel instantiates a new RequestRebuildInstanceModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestRebuildInstanceModel(imageId string) *RequestRebuildInstanceModel {
	this := RequestRebuildInstanceModel{}
	this.ImageId = imageId
	return &this
}

// NewRequestRebuildInstanceModelWithDefaults instantiates a new RequestRebuildInstanceModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestRebuildInstanceModelWithDefaults() *RequestRebuildInstanceModel {
	this := RequestRebuildInstanceModel{}
	return &this
}

// GetImageId returns the ImageId field value
func (o *RequestRebuildInstanceModel) GetImageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value
// and a boolean to check if the value has been set.
func (o *RequestRebuildInstanceModel) GetImageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageId, true
}

// SetImageId sets field value
func (o *RequestRebuildInstanceModel) SetImageId(v string) {
	o.ImageId = v
}

// GetKeyName returns the KeyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequestRebuildInstanceModel) GetKeyName() string {
	if o == nil || IsNil(o.KeyName.Get()) {
		var ret string
		return ret
	}
	return *o.KeyName.Get()
}

// GetKeyNameOk returns a tuple with the KeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequestRebuildInstanceModel) GetKeyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KeyName.Get(), o.KeyName.IsSet()
}

// HasKeyName returns a boolean if a field has been set.
func (o *RequestRebuildInstanceModel) HasKeyName() bool {
	if o != nil && o.KeyName.IsSet() {
		return true
	}

	return false
}

// SetKeyName gets a reference to the given NullableString and assigns it to the KeyName field.
func (o *RequestRebuildInstanceModel) SetKeyName(v string) {
	o.KeyName.Set(&v)
}

// SetKeyNameNil sets the value for KeyName to be an explicit nil
func (o *RequestRebuildInstanceModel) SetKeyNameNil() {
	o.KeyName.Set(nil)
}

// UnsetKeyName ensures that no value is present for KeyName, not even an explicit nil
func (o *RequestRebuildInstanceModel) UnsetKeyName() {
	o.KeyName.Unset()
}

func (o RequestRebuildInstanceModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestRebuildInstanceModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["image_id"] = o.ImageId
	if o.KeyName.IsSet() {
		toSerialize["key_name"] = o.KeyName.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RequestRebuildInstanceModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRequestRebuildInstanceModel := _RequestRebuildInstanceModel{}

	err = json.Unmarshal(data, &varRequestRebuildInstanceModel)

	if err != nil {
		return err
	}

	*o = RequestRebuildInstanceModel(varRequestRebuildInstanceModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "image_id")
		delete(additionalProperties, "key_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRequestRebuildInstanceModel struct {
	value *RequestRebuildInstanceModel
	isSet bool
}

func (v NullableRequestRebuildInstanceModel) Get() *RequestRebuildInstanceModel {
	return v.value
}

func (v *NullableRequestRebuildInstanceModel) Set(val *RequestRebuildInstanceModel) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestRebuildInstanceModel) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestRebuildInstanceModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestRebuildInstanceModel(val *RequestRebuildInstanceModel) *NullableRequestRebuildInstanceModel {
	return &NullableRequestRebuildInstanceModel{value: val, isSet: true}
}

func (v NullableRequestRebuildInstanceModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestRebuildInstanceModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
