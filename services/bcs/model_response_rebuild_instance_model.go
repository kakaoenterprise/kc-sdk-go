/*
Beyond Compute Service(BCS) API

Beyond Compute Service API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bcs

import (
	"encoding/json"
	"fmt"
)

// checks if the ResponseRebuildInstanceModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseRebuildInstanceModel{}

// ResponseRebuildInstanceModel struct for ResponseRebuildInstanceModel
type ResponseRebuildInstanceModel struct {
	Instance             RebuildInstanceModel `json:"instance"`
	AdditionalProperties map[string]interface{}
}

type _ResponseRebuildInstanceModel ResponseRebuildInstanceModel

// NewResponseRebuildInstanceModel instantiates a new ResponseRebuildInstanceModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseRebuildInstanceModel(instance RebuildInstanceModel) *ResponseRebuildInstanceModel {
	this := ResponseRebuildInstanceModel{}
	this.Instance = instance
	return &this
}

// NewResponseRebuildInstanceModelWithDefaults instantiates a new ResponseRebuildInstanceModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseRebuildInstanceModelWithDefaults() *ResponseRebuildInstanceModel {
	this := ResponseRebuildInstanceModel{}
	return &this
}

// GetInstance returns the Instance field value
func (o *ResponseRebuildInstanceModel) GetInstance() RebuildInstanceModel {
	if o == nil {
		var ret RebuildInstanceModel
		return ret
	}

	return o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value
// and a boolean to check if the value has been set.
func (o *ResponseRebuildInstanceModel) GetInstanceOk() (*RebuildInstanceModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Instance, true
}

// SetInstance sets field value
func (o *ResponseRebuildInstanceModel) SetInstance(v RebuildInstanceModel) {
	o.Instance = v
}

func (o ResponseRebuildInstanceModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseRebuildInstanceModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["instance"] = o.Instance

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResponseRebuildInstanceModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseRebuildInstanceModel := _ResponseRebuildInstanceModel{}

	err = json.Unmarshal(data, &varResponseRebuildInstanceModel)

	if err != nil {
		return err
	}

	*o = ResponseRebuildInstanceModel(varResponseRebuildInstanceModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "instance")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResponseRebuildInstanceModel struct {
	value *ResponseRebuildInstanceModel
	isSet bool
}

func (v NullableResponseRebuildInstanceModel) Get() *ResponseRebuildInstanceModel {
	return v.value
}

func (v *NullableResponseRebuildInstanceModel) Set(val *ResponseRebuildInstanceModel) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseRebuildInstanceModel) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseRebuildInstanceModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseRebuildInstanceModel(val *ResponseRebuildInstanceModel) *NullableResponseRebuildInstanceModel {
	return &NullableResponseRebuildInstanceModel{value: val, isSet: true}
}

func (v NullableResponseRebuildInstanceModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseRebuildInstanceModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
