/*
Beyond Compute Service(BCS) API

Testing InstanceAttachedVolumeAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package bcs

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_bcs_InstanceAttachedVolumeAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InstanceAttachedVolumeAPIService AttachVolume", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceId string
		var volumeId string

		resp, httpRes, err := apiClient.InstanceAttachedVolumeAPI.AttachVolume(context.Background(), instanceId, volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceAttachedVolumeAPIService DetachVolume", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceId string
		var volumeId string

		resp, httpRes, err := apiClient.InstanceAttachedVolumeAPI.DetachVolume(context.Background(), instanceId, volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceAttachedVolumeAPIService UpdateInstanceVolume", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceId string
		var volumeId string

		resp, httpRes, err := apiClient.InstanceAttachedVolumeAPI.UpdateInstanceVolume(context.Background(), instanceId, volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
