/*
Beyond Compute Service(BCS) API

Testing InstancePublicIPAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package bcs

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_bcs_InstancePublicIPAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InstancePublicIPAPIService AssociateNewPublicIp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceId string
		var networkInterfaceId string

		resp, httpRes, err := apiClient.InstancePublicIPAPI.AssociateNewPublicIp(context.Background(), instanceId, networkInterfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstancePublicIPAPIService AssociatePublicIp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceId string
		var networkInterfaceId string
		var publicIpId string

		resp, httpRes, err := apiClient.InstancePublicIPAPI.AssociatePublicIp(context.Background(), instanceId, networkInterfaceId, publicIpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstancePublicIPAPIService RemovePublicIp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceId string
		var networkInterfaceId string

		resp, httpRes, err := apiClient.InstancePublicIPAPI.RemovePublicIp(context.Background(), instanceId, networkInterfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
