/*
Beyond Compute Service(BCS) API

Testing InstanceRunAnActionAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package bcs

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_bcs_InstanceRunAnActionAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InstanceRunAnActionAPIService GetInstanceConsoleLog", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.InstanceRunAnActionAPI.GetInstanceConsoleLog(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceRunAnActionAPIService HardRebootInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.InstanceRunAnActionAPI.HardRebootInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceRunAnActionAPIService RebuildInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.InstanceRunAnActionAPI.RebuildInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceRunAnActionAPIService ResizeInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.InstanceRunAnActionAPI.ResizeInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceRunAnActionAPIService ShelveInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.InstanceRunAnActionAPI.ShelveInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceRunAnActionAPIService SoftRebootInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.InstanceRunAnActionAPI.SoftRebootInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceRunAnActionAPIService StartInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.InstanceRunAnActionAPI.StartInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceRunAnActionAPIService StopInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.InstanceRunAnActionAPI.StopInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceRunAnActionAPIService UnshelveInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.InstanceRunAnActionAPI.UnshelveInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
