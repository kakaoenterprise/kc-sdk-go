/*
Cloud-IAM API

IAM service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the KeystoneError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeystoneError{}

// KeystoneError struct for KeystoneError
type KeystoneError struct {
	Error                *KeystoneErrorError `json:"error,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KeystoneError KeystoneError

// NewKeystoneError instantiates a new KeystoneError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeystoneError() *KeystoneError {
	this := KeystoneError{}
	return &this
}

// NewKeystoneErrorWithDefaults instantiates a new KeystoneError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeystoneErrorWithDefaults() *KeystoneError {
	this := KeystoneError{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *KeystoneError) GetError() KeystoneErrorError {
	if o == nil || IsNil(o.Error) {
		var ret KeystoneErrorError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoneError) GetErrorOk() (*KeystoneErrorError, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *KeystoneError) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given KeystoneErrorError and assigns it to the Error field.
func (o *KeystoneError) SetError(v KeystoneErrorError) {
	o.Error = &v
}

func (o KeystoneError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeystoneError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KeystoneError) UnmarshalJSON(data []byte) (err error) {
	varKeystoneError := _KeystoneError{}

	err = json.Unmarshal(data, &varKeystoneError)

	if err != nil {
		return err
	}

	*o = KeystoneError(varKeystoneError)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "error")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKeystoneError struct {
	value *KeystoneError
	isSet bool
}

func (v NullableKeystoneError) Get() *KeystoneError {
	return v.value
}

func (v *NullableKeystoneError) Set(val *KeystoneError) {
	v.value = val
	v.isSet = true
}

func (v NullableKeystoneError) IsSet() bool {
	return v.isSet
}

func (v *NullableKeystoneError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeystoneError(val *KeystoneError) *NullableKeystoneError {
	return &NullableKeystoneError{value: val, isSet: true}
}

func (v NullableKeystoneError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeystoneError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
