/*
Cloud-IAM API

IAM service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the KeystoneErrorError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeystoneErrorError{}

// KeystoneErrorError struct for KeystoneErrorError
type KeystoneErrorError struct {
	Code                 *int32  `json:"code,omitempty"`
	Message              *string `json:"message,omitempty"`
	Title                *string `json:"title,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KeystoneErrorError KeystoneErrorError

// NewKeystoneErrorError instantiates a new KeystoneErrorError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeystoneErrorError() *KeystoneErrorError {
	this := KeystoneErrorError{}
	return &this
}

// NewKeystoneErrorErrorWithDefaults instantiates a new KeystoneErrorError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeystoneErrorErrorWithDefaults() *KeystoneErrorError {
	this := KeystoneErrorError{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *KeystoneErrorError) GetCode() int32 {
	if o == nil || IsNil(o.Code) {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoneErrorError) GetCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *KeystoneErrorError) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *KeystoneErrorError) SetCode(v int32) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *KeystoneErrorError) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoneErrorError) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *KeystoneErrorError) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *KeystoneErrorError) SetMessage(v string) {
	o.Message = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *KeystoneErrorError) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoneErrorError) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *KeystoneErrorError) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *KeystoneErrorError) SetTitle(v string) {
	o.Title = &v
}

func (o KeystoneErrorError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeystoneErrorError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KeystoneErrorError) UnmarshalJSON(data []byte) (err error) {
	varKeystoneErrorError := _KeystoneErrorError{}

	err = json.Unmarshal(data, &varKeystoneErrorError)

	if err != nil {
		return err
	}

	*o = KeystoneErrorError(varKeystoneErrorError)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "message")
		delete(additionalProperties, "title")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKeystoneErrorError struct {
	value *KeystoneErrorError
	isSet bool
}

func (v NullableKeystoneErrorError) Get() *KeystoneErrorError {
	return v.value
}

func (v *NullableKeystoneErrorError) Set(val *KeystoneErrorError) {
	v.value = val
	v.isSet = true
}

func (v NullableKeystoneErrorError) IsSet() bool {
	return v.isSet
}

func (v *NullableKeystoneErrorError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeystoneErrorError(val *KeystoneErrorError) *NullableKeystoneErrorError {
	return &NullableKeystoneErrorError{value: val, isSet: true}
}

func (v NullableKeystoneErrorError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeystoneErrorError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
