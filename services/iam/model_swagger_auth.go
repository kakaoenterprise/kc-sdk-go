/*
Cloud-IAM API

IAM service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the SwaggerAuth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwaggerAuth{}

// SwaggerAuth struct for SwaggerAuth
type SwaggerAuth struct {
	Identity             *SwaggerIdPwd `json:"identity,omitempty"`
	Scope                *SwaggerScope `json:"scope,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SwaggerAuth SwaggerAuth

// NewSwaggerAuth instantiates a new SwaggerAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwaggerAuth() *SwaggerAuth {
	this := SwaggerAuth{}
	return &this
}

// NewSwaggerAuthWithDefaults instantiates a new SwaggerAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwaggerAuthWithDefaults() *SwaggerAuth {
	this := SwaggerAuth{}
	return &this
}

// GetIdentity returns the Identity field value if set, zero value otherwise.
func (o *SwaggerAuth) GetIdentity() SwaggerIdPwd {
	if o == nil || IsNil(o.Identity) {
		var ret SwaggerIdPwd
		return ret
	}
	return *o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwaggerAuth) GetIdentityOk() (*SwaggerIdPwd, bool) {
	if o == nil || IsNil(o.Identity) {
		return nil, false
	}
	return o.Identity, true
}

// HasIdentity returns a boolean if a field has been set.
func (o *SwaggerAuth) HasIdentity() bool {
	if o != nil && !IsNil(o.Identity) {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given SwaggerIdPwd and assigns it to the Identity field.
func (o *SwaggerAuth) SetIdentity(v SwaggerIdPwd) {
	o.Identity = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *SwaggerAuth) GetScope() SwaggerScope {
	if o == nil || IsNil(o.Scope) {
		var ret SwaggerScope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwaggerAuth) GetScopeOk() (*SwaggerScope, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *SwaggerAuth) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given SwaggerScope and assigns it to the Scope field.
func (o *SwaggerAuth) SetScope(v SwaggerScope) {
	o.Scope = &v
}

func (o SwaggerAuth) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwaggerAuth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Identity) {
		toSerialize["identity"] = o.Identity
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SwaggerAuth) UnmarshalJSON(data []byte) (err error) {
	varSwaggerAuth := _SwaggerAuth{}

	err = json.Unmarshal(data, &varSwaggerAuth)

	if err != nil {
		return err
	}

	*o = SwaggerAuth(varSwaggerAuth)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "identity")
		delete(additionalProperties, "scope")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSwaggerAuth struct {
	value *SwaggerAuth
	isSet bool
}

func (v NullableSwaggerAuth) Get() *SwaggerAuth {
	return v.value
}

func (v *NullableSwaggerAuth) Set(val *SwaggerAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableSwaggerAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableSwaggerAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwaggerAuth(val *SwaggerAuth) *NullableSwaggerAuth {
	return &NullableSwaggerAuth{value: val, isSet: true}
}

func (v NullableSwaggerAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwaggerAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
