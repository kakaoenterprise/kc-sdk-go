/*
Cloud-IAM API

IAM service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the SwaggerIdPwd type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwaggerIdPwd{}

// SwaggerIdPwd struct for SwaggerIdPwd
type SwaggerIdPwd struct {
	Methods               []string                      `json:"methods,omitempty"`
	Password              *SwaggerUserPassword          `json:"password,omitempty"`
	ApplicationCredential *SwaggerApplicationCredential `json:"application_credential,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _SwaggerIdPwd SwaggerIdPwd

// NewSwaggerIdPwd instantiates a new SwaggerIdPwd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwaggerIdPwd() *SwaggerIdPwd {
	this := SwaggerIdPwd{}
	return &this
}

// NewSwaggerIdPwdWithDefaults instantiates a new SwaggerIdPwd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwaggerIdPwdWithDefaults() *SwaggerIdPwd {
	this := SwaggerIdPwd{}
	return &this
}

// GetMethods returns the Methods field value if set, zero value otherwise.
func (o *SwaggerIdPwd) GetMethods() []string {
	if o == nil || IsNil(o.Methods) {
		var ret []string
		return ret
	}
	return o.Methods
}

// GetMethodsOk returns a tuple with the Methods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwaggerIdPwd) GetMethodsOk() ([]string, bool) {
	if o == nil || IsNil(o.Methods) {
		return nil, false
	}
	return o.Methods, true
}

// HasMethods returns a boolean if a field has been set.
func (o *SwaggerIdPwd) HasMethods() bool {
	if o != nil && !IsNil(o.Methods) {
		return true
	}

	return false
}

// SetMethods gets a reference to the given []string and assigns it to the Methods field.
func (o *SwaggerIdPwd) SetMethods(v []string) {
	o.Methods = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *SwaggerIdPwd) GetPassword() SwaggerUserPassword {
	if o == nil || IsNil(o.Password) {
		var ret SwaggerUserPassword
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwaggerIdPwd) GetPasswordOk() (*SwaggerUserPassword, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *SwaggerIdPwd) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given SwaggerUserPassword and assigns it to the Password field.
func (o *SwaggerIdPwd) SetPassword(v SwaggerUserPassword) {
	o.Password = &v
}

// GetApplicationCredential returns the ApplicationCredential field value if set, zero value otherwise.
func (o *SwaggerIdPwd) GetApplicationCredential() SwaggerApplicationCredential {
	if o == nil || IsNil(o.ApplicationCredential) {
		var ret SwaggerApplicationCredential
		return ret
	}
	return *o.ApplicationCredential
}

// GetApplicationCredentialOk returns a tuple with the ApplicationCredential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwaggerIdPwd) GetApplicationCredentialOk() (*SwaggerApplicationCredential, bool) {
	if o == nil || IsNil(o.ApplicationCredential) {
		return nil, false
	}
	return o.ApplicationCredential, true
}

// HasApplicationCredential returns a boolean if a field has been set.
func (o *SwaggerIdPwd) HasApplicationCredential() bool {
	if o != nil && !IsNil(o.ApplicationCredential) {
		return true
	}

	return false
}

// SetApplicationCredential gets a reference to the given SwaggerApplicationCredential and assigns it to the ApplicationCredential field.
func (o *SwaggerIdPwd) SetApplicationCredential(v SwaggerApplicationCredential) {
	o.ApplicationCredential = &v
}

func (o SwaggerIdPwd) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwaggerIdPwd) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Methods) {
		toSerialize["methods"] = o.Methods
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.ApplicationCredential) {
		toSerialize["application_credential"] = o.ApplicationCredential
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SwaggerIdPwd) UnmarshalJSON(data []byte) (err error) {
	varSwaggerIdPwd := _SwaggerIdPwd{}

	err = json.Unmarshal(data, &varSwaggerIdPwd)

	if err != nil {
		return err
	}

	*o = SwaggerIdPwd(varSwaggerIdPwd)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "methods")
		delete(additionalProperties, "password")
		delete(additionalProperties, "application_credential")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSwaggerIdPwd struct {
	value *SwaggerIdPwd
	isSet bool
}

func (v NullableSwaggerIdPwd) Get() *SwaggerIdPwd {
	return v.value
}

func (v *NullableSwaggerIdPwd) Set(val *SwaggerIdPwd) {
	v.value = val
	v.isSet = true
}

func (v NullableSwaggerIdPwd) IsSet() bool {
	return v.isSet
}

func (v *NullableSwaggerIdPwd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwaggerIdPwd(val *SwaggerIdPwd) *NullableSwaggerIdPwd {
	return &NullableSwaggerIdPwd{value: val, isSet: true}
}

func (v NullableSwaggerIdPwd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwaggerIdPwd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
