/*
Cloud-IAM API

IAM service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the SwaggerScope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwaggerScope{}

// SwaggerScope struct for SwaggerScope
type SwaggerScope struct {
	Project              *SwaggerProject `json:"project,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SwaggerScope SwaggerScope

// NewSwaggerScope instantiates a new SwaggerScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwaggerScope() *SwaggerScope {
	this := SwaggerScope{}
	return &this
}

// NewSwaggerScopeWithDefaults instantiates a new SwaggerScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwaggerScopeWithDefaults() *SwaggerScope {
	this := SwaggerScope{}
	return &this
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *SwaggerScope) GetProject() SwaggerProject {
	if o == nil || IsNil(o.Project) {
		var ret SwaggerProject
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwaggerScope) GetProjectOk() (*SwaggerProject, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *SwaggerScope) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given SwaggerProject and assigns it to the Project field.
func (o *SwaggerScope) SetProject(v SwaggerProject) {
	o.Project = &v
}

func (o SwaggerScope) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwaggerScope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SwaggerScope) UnmarshalJSON(data []byte) (err error) {
	varSwaggerScope := _SwaggerScope{}

	err = json.Unmarshal(data, &varSwaggerScope)

	if err != nil {
		return err
	}

	*o = SwaggerScope(varSwaggerScope)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "project")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSwaggerScope struct {
	value *SwaggerScope
	isSet bool
}

func (v NullableSwaggerScope) Get() *SwaggerScope {
	return v.value
}

func (v *NullableSwaggerScope) Set(val *SwaggerScope) {
	v.value = val
	v.isSet = true
}

func (v NullableSwaggerScope) IsSet() bool {
	return v.isSet
}

func (v *NullableSwaggerScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwaggerScope(val *SwaggerScope) *NullableSwaggerScope {
	return &NullableSwaggerScope{value: val, isSet: true}
}

func (v NullableSwaggerScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwaggerScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
