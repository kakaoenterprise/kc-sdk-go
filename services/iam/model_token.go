/*
Cloud-IAM API

IAM service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the Token type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Token{}

// Token struct for Token
type Token struct {
	OSTRUSTTrust          *TokenOSTrust               `json:"OS-TRUST:trust,omitempty"`
	ApplicationCredential *TokenApplicationCredential `json:"application_credential,omitempty"`
	AuditIds              []string                    `json:"audit_ids,omitempty"`
	Catalog               []TokenCatalog              `json:"catalog,omitempty"`
	Domain                *TokenDomain                `json:"domain,omitempty"`
	ExpiresAt             *string                     `json:"expires_at,omitempty"`
	IsDomain              *bool                       `json:"is_domain,omitempty"`
	IssuedAt              *string                     `json:"issued_at,omitempty"`
	Methods               []string                    `json:"methods,omitempty"`
	Project               *TokenProject               `json:"project,omitempty"`
	Roles                 []TokenRole                 `json:"roles,omitempty"`
	System                *TokenSystem                `json:"system,omitempty"`
	User                  *TokenUser                  `json:"user,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _Token Token

// NewToken instantiates a new Token object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToken() *Token {
	this := Token{}
	return &this
}

// NewTokenWithDefaults instantiates a new Token object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenWithDefaults() *Token {
	this := Token{}
	return &this
}

// GetOSTRUSTTrust returns the OSTRUSTTrust field value if set, zero value otherwise.
func (o *Token) GetOSTRUSTTrust() TokenOSTrust {
	if o == nil || IsNil(o.OSTRUSTTrust) {
		var ret TokenOSTrust
		return ret
	}
	return *o.OSTRUSTTrust
}

// GetOSTRUSTTrustOk returns a tuple with the OSTRUSTTrust field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetOSTRUSTTrustOk() (*TokenOSTrust, bool) {
	if o == nil || IsNil(o.OSTRUSTTrust) {
		return nil, false
	}
	return o.OSTRUSTTrust, true
}

// HasOSTRUSTTrust returns a boolean if a field has been set.
func (o *Token) HasOSTRUSTTrust() bool {
	if o != nil && !IsNil(o.OSTRUSTTrust) {
		return true
	}

	return false
}

// SetOSTRUSTTrust gets a reference to the given TokenOSTrust and assigns it to the OSTRUSTTrust field.
func (o *Token) SetOSTRUSTTrust(v TokenOSTrust) {
	o.OSTRUSTTrust = &v
}

// GetApplicationCredential returns the ApplicationCredential field value if set, zero value otherwise.
func (o *Token) GetApplicationCredential() TokenApplicationCredential {
	if o == nil || IsNil(o.ApplicationCredential) {
		var ret TokenApplicationCredential
		return ret
	}
	return *o.ApplicationCredential
}

// GetApplicationCredentialOk returns a tuple with the ApplicationCredential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetApplicationCredentialOk() (*TokenApplicationCredential, bool) {
	if o == nil || IsNil(o.ApplicationCredential) {
		return nil, false
	}
	return o.ApplicationCredential, true
}

// HasApplicationCredential returns a boolean if a field has been set.
func (o *Token) HasApplicationCredential() bool {
	if o != nil && !IsNil(o.ApplicationCredential) {
		return true
	}

	return false
}

// SetApplicationCredential gets a reference to the given TokenApplicationCredential and assigns it to the ApplicationCredential field.
func (o *Token) SetApplicationCredential(v TokenApplicationCredential) {
	o.ApplicationCredential = &v
}

// GetAuditIds returns the AuditIds field value if set, zero value otherwise.
func (o *Token) GetAuditIds() []string {
	if o == nil || IsNil(o.AuditIds) {
		var ret []string
		return ret
	}
	return o.AuditIds
}

// GetAuditIdsOk returns a tuple with the AuditIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetAuditIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AuditIds) {
		return nil, false
	}
	return o.AuditIds, true
}

// HasAuditIds returns a boolean if a field has been set.
func (o *Token) HasAuditIds() bool {
	if o != nil && !IsNil(o.AuditIds) {
		return true
	}

	return false
}

// SetAuditIds gets a reference to the given []string and assigns it to the AuditIds field.
func (o *Token) SetAuditIds(v []string) {
	o.AuditIds = v
}

// GetCatalog returns the Catalog field value if set, zero value otherwise.
func (o *Token) GetCatalog() []TokenCatalog {
	if o == nil || IsNil(o.Catalog) {
		var ret []TokenCatalog
		return ret
	}
	return o.Catalog
}

// GetCatalogOk returns a tuple with the Catalog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetCatalogOk() ([]TokenCatalog, bool) {
	if o == nil || IsNil(o.Catalog) {
		return nil, false
	}
	return o.Catalog, true
}

// HasCatalog returns a boolean if a field has been set.
func (o *Token) HasCatalog() bool {
	if o != nil && !IsNil(o.Catalog) {
		return true
	}

	return false
}

// SetCatalog gets a reference to the given []TokenCatalog and assigns it to the Catalog field.
func (o *Token) SetCatalog(v []TokenCatalog) {
	o.Catalog = v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *Token) GetDomain() TokenDomain {
	if o == nil || IsNil(o.Domain) {
		var ret TokenDomain
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetDomainOk() (*TokenDomain, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *Token) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given TokenDomain and assigns it to the Domain field.
func (o *Token) SetDomain(v TokenDomain) {
	o.Domain = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *Token) GetExpiresAt() string {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret string
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetExpiresAtOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *Token) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given string and assigns it to the ExpiresAt field.
func (o *Token) SetExpiresAt(v string) {
	o.ExpiresAt = &v
}

// GetIsDomain returns the IsDomain field value if set, zero value otherwise.
func (o *Token) GetIsDomain() bool {
	if o == nil || IsNil(o.IsDomain) {
		var ret bool
		return ret
	}
	return *o.IsDomain
}

// GetIsDomainOk returns a tuple with the IsDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetIsDomainOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDomain) {
		return nil, false
	}
	return o.IsDomain, true
}

// HasIsDomain returns a boolean if a field has been set.
func (o *Token) HasIsDomain() bool {
	if o != nil && !IsNil(o.IsDomain) {
		return true
	}

	return false
}

// SetIsDomain gets a reference to the given bool and assigns it to the IsDomain field.
func (o *Token) SetIsDomain(v bool) {
	o.IsDomain = &v
}

// GetIssuedAt returns the IssuedAt field value if set, zero value otherwise.
func (o *Token) GetIssuedAt() string {
	if o == nil || IsNil(o.IssuedAt) {
		var ret string
		return ret
	}
	return *o.IssuedAt
}

// GetIssuedAtOk returns a tuple with the IssuedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetIssuedAtOk() (*string, bool) {
	if o == nil || IsNil(o.IssuedAt) {
		return nil, false
	}
	return o.IssuedAt, true
}

// HasIssuedAt returns a boolean if a field has been set.
func (o *Token) HasIssuedAt() bool {
	if o != nil && !IsNil(o.IssuedAt) {
		return true
	}

	return false
}

// SetIssuedAt gets a reference to the given string and assigns it to the IssuedAt field.
func (o *Token) SetIssuedAt(v string) {
	o.IssuedAt = &v
}

// GetMethods returns the Methods field value if set, zero value otherwise.
func (o *Token) GetMethods() []string {
	if o == nil || IsNil(o.Methods) {
		var ret []string
		return ret
	}
	return o.Methods
}

// GetMethodsOk returns a tuple with the Methods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetMethodsOk() ([]string, bool) {
	if o == nil || IsNil(o.Methods) {
		return nil, false
	}
	return o.Methods, true
}

// HasMethods returns a boolean if a field has been set.
func (o *Token) HasMethods() bool {
	if o != nil && !IsNil(o.Methods) {
		return true
	}

	return false
}

// SetMethods gets a reference to the given []string and assigns it to the Methods field.
func (o *Token) SetMethods(v []string) {
	o.Methods = v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *Token) GetProject() TokenProject {
	if o == nil || IsNil(o.Project) {
		var ret TokenProject
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetProjectOk() (*TokenProject, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *Token) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given TokenProject and assigns it to the Project field.
func (o *Token) SetProject(v TokenProject) {
	o.Project = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *Token) GetRoles() []TokenRole {
	if o == nil || IsNil(o.Roles) {
		var ret []TokenRole
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetRolesOk() ([]TokenRole, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *Token) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []TokenRole and assigns it to the Roles field.
func (o *Token) SetRoles(v []TokenRole) {
	o.Roles = v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *Token) GetSystem() TokenSystem {
	if o == nil || IsNil(o.System) {
		var ret TokenSystem
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetSystemOk() (*TokenSystem, bool) {
	if o == nil || IsNil(o.System) {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *Token) HasSystem() bool {
	if o != nil && !IsNil(o.System) {
		return true
	}

	return false
}

// SetSystem gets a reference to the given TokenSystem and assigns it to the System field.
func (o *Token) SetSystem(v TokenSystem) {
	o.System = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Token) GetUser() TokenUser {
	if o == nil || IsNil(o.User) {
		var ret TokenUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetUserOk() (*TokenUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Token) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given TokenUser and assigns it to the User field.
func (o *Token) SetUser(v TokenUser) {
	o.User = &v
}

func (o Token) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Token) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OSTRUSTTrust) {
		toSerialize["OS-TRUST:trust"] = o.OSTRUSTTrust
	}
	if !IsNil(o.ApplicationCredential) {
		toSerialize["application_credential"] = o.ApplicationCredential
	}
	if !IsNil(o.AuditIds) {
		toSerialize["audit_ids"] = o.AuditIds
	}
	if !IsNil(o.Catalog) {
		toSerialize["catalog"] = o.Catalog
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if !IsNil(o.IsDomain) {
		toSerialize["is_domain"] = o.IsDomain
	}
	if !IsNil(o.IssuedAt) {
		toSerialize["issued_at"] = o.IssuedAt
	}
	if !IsNil(o.Methods) {
		toSerialize["methods"] = o.Methods
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.System) {
		toSerialize["system"] = o.System
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Token) UnmarshalJSON(data []byte) (err error) {
	varToken := _Token{}

	err = json.Unmarshal(data, &varToken)

	if err != nil {
		return err
	}

	*o = Token(varToken)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "OS-TRUST:trust")
		delete(additionalProperties, "application_credential")
		delete(additionalProperties, "audit_ids")
		delete(additionalProperties, "catalog")
		delete(additionalProperties, "domain")
		delete(additionalProperties, "expires_at")
		delete(additionalProperties, "is_domain")
		delete(additionalProperties, "issued_at")
		delete(additionalProperties, "methods")
		delete(additionalProperties, "project")
		delete(additionalProperties, "roles")
		delete(additionalProperties, "system")
		delete(additionalProperties, "user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableToken struct {
	value *Token
	isSet bool
}

func (v NullableToken) Get() *Token {
	return v.value
}

func (v *NullableToken) Set(val *Token) {
	v.value = val
	v.isSet = true
}

func (v NullableToken) IsSet() bool {
	return v.isSet
}

func (v *NullableToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToken(val *Token) *NullableToken {
	return &NullableToken{value: val, isSet: true}
}

func (v NullableToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
