/*
Cloud-IAM API

IAM service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the TokenApplicationCredential type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenApplicationCredential{}

// TokenApplicationCredential struct for TokenApplicationCredential
type TokenApplicationCredential struct {
	AccessRules          []AccessRule `json:"access_rules,omitempty"`
	Description          *string      `json:"description,omitempty"`
	ExpiresAt            *string      `json:"expires_at,omitempty"`
	Id                   *string      `json:"id,omitempty"`
	Links                *TokenLinks  `json:"links,omitempty"`
	Name                 *string      `json:"name,omitempty"`
	ProjectId            *string      `json:"project_id,omitempty"`
	Restricted           *bool        `json:"restricted,omitempty"`
	Roles                []TokenRole  `json:"roles,omitempty"`
	Secret               *string      `json:"secret,omitempty"`
	Unrestricted         *bool        `json:"unrestricted,omitempty"`
	UserId               *string      `json:"user_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TokenApplicationCredential TokenApplicationCredential

// NewTokenApplicationCredential instantiates a new TokenApplicationCredential object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenApplicationCredential() *TokenApplicationCredential {
	this := TokenApplicationCredential{}
	return &this
}

// NewTokenApplicationCredentialWithDefaults instantiates a new TokenApplicationCredential object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenApplicationCredentialWithDefaults() *TokenApplicationCredential {
	this := TokenApplicationCredential{}
	return &this
}

// GetAccessRules returns the AccessRules field value if set, zero value otherwise.
func (o *TokenApplicationCredential) GetAccessRules() []AccessRule {
	if o == nil || IsNil(o.AccessRules) {
		var ret []AccessRule
		return ret
	}
	return o.AccessRules
}

// GetAccessRulesOk returns a tuple with the AccessRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenApplicationCredential) GetAccessRulesOk() ([]AccessRule, bool) {
	if o == nil || IsNil(o.AccessRules) {
		return nil, false
	}
	return o.AccessRules, true
}

// HasAccessRules returns a boolean if a field has been set.
func (o *TokenApplicationCredential) HasAccessRules() bool {
	if o != nil && !IsNil(o.AccessRules) {
		return true
	}

	return false
}

// SetAccessRules gets a reference to the given []AccessRule and assigns it to the AccessRules field.
func (o *TokenApplicationCredential) SetAccessRules(v []AccessRule) {
	o.AccessRules = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TokenApplicationCredential) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenApplicationCredential) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TokenApplicationCredential) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TokenApplicationCredential) SetDescription(v string) {
	o.Description = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *TokenApplicationCredential) GetExpiresAt() string {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret string
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenApplicationCredential) GetExpiresAtOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *TokenApplicationCredential) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given string and assigns it to the ExpiresAt field.
func (o *TokenApplicationCredential) SetExpiresAt(v string) {
	o.ExpiresAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TokenApplicationCredential) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenApplicationCredential) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TokenApplicationCredential) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TokenApplicationCredential) SetId(v string) {
	o.Id = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *TokenApplicationCredential) GetLinks() TokenLinks {
	if o == nil || IsNil(o.Links) {
		var ret TokenLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenApplicationCredential) GetLinksOk() (*TokenLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *TokenApplicationCredential) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given TokenLinks and assigns it to the Links field.
func (o *TokenApplicationCredential) SetLinks(v TokenLinks) {
	o.Links = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TokenApplicationCredential) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenApplicationCredential) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TokenApplicationCredential) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TokenApplicationCredential) SetName(v string) {
	o.Name = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *TokenApplicationCredential) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenApplicationCredential) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *TokenApplicationCredential) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *TokenApplicationCredential) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetRestricted returns the Restricted field value if set, zero value otherwise.
func (o *TokenApplicationCredential) GetRestricted() bool {
	if o == nil || IsNil(o.Restricted) {
		var ret bool
		return ret
	}
	return *o.Restricted
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenApplicationCredential) GetRestrictedOk() (*bool, bool) {
	if o == nil || IsNil(o.Restricted) {
		return nil, false
	}
	return o.Restricted, true
}

// HasRestricted returns a boolean if a field has been set.
func (o *TokenApplicationCredential) HasRestricted() bool {
	if o != nil && !IsNil(o.Restricted) {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given bool and assigns it to the Restricted field.
func (o *TokenApplicationCredential) SetRestricted(v bool) {
	o.Restricted = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *TokenApplicationCredential) GetRoles() []TokenRole {
	if o == nil || IsNil(o.Roles) {
		var ret []TokenRole
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenApplicationCredential) GetRolesOk() ([]TokenRole, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *TokenApplicationCredential) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []TokenRole and assigns it to the Roles field.
func (o *TokenApplicationCredential) SetRoles(v []TokenRole) {
	o.Roles = v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *TokenApplicationCredential) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenApplicationCredential) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *TokenApplicationCredential) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *TokenApplicationCredential) SetSecret(v string) {
	o.Secret = &v
}

// GetUnrestricted returns the Unrestricted field value if set, zero value otherwise.
func (o *TokenApplicationCredential) GetUnrestricted() bool {
	if o == nil || IsNil(o.Unrestricted) {
		var ret bool
		return ret
	}
	return *o.Unrestricted
}

// GetUnrestrictedOk returns a tuple with the Unrestricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenApplicationCredential) GetUnrestrictedOk() (*bool, bool) {
	if o == nil || IsNil(o.Unrestricted) {
		return nil, false
	}
	return o.Unrestricted, true
}

// HasUnrestricted returns a boolean if a field has been set.
func (o *TokenApplicationCredential) HasUnrestricted() bool {
	if o != nil && !IsNil(o.Unrestricted) {
		return true
	}

	return false
}

// SetUnrestricted gets a reference to the given bool and assigns it to the Unrestricted field.
func (o *TokenApplicationCredential) SetUnrestricted(v bool) {
	o.Unrestricted = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *TokenApplicationCredential) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenApplicationCredential) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *TokenApplicationCredential) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *TokenApplicationCredential) SetUserId(v string) {
	o.UserId = &v
}

func (o TokenApplicationCredential) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenApplicationCredential) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessRules) {
		toSerialize["access_rules"] = o.AccessRules
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.Restricted) {
		toSerialize["restricted"] = o.Restricted
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	if !IsNil(o.Unrestricted) {
		toSerialize["unrestricted"] = o.Unrestricted
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TokenApplicationCredential) UnmarshalJSON(data []byte) (err error) {
	varTokenApplicationCredential := _TokenApplicationCredential{}

	err = json.Unmarshal(data, &varTokenApplicationCredential)

	if err != nil {
		return err
	}

	*o = TokenApplicationCredential(varTokenApplicationCredential)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "access_rules")
		delete(additionalProperties, "description")
		delete(additionalProperties, "expires_at")
		delete(additionalProperties, "id")
		delete(additionalProperties, "links")
		delete(additionalProperties, "name")
		delete(additionalProperties, "project_id")
		delete(additionalProperties, "restricted")
		delete(additionalProperties, "roles")
		delete(additionalProperties, "secret")
		delete(additionalProperties, "unrestricted")
		delete(additionalProperties, "user_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTokenApplicationCredential struct {
	value *TokenApplicationCredential
	isSet bool
}

func (v NullableTokenApplicationCredential) Get() *TokenApplicationCredential {
	return v.value
}

func (v *NullableTokenApplicationCredential) Set(val *TokenApplicationCredential) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenApplicationCredential) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenApplicationCredential) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenApplicationCredential(val *TokenApplicationCredential) *NullableTokenApplicationCredential {
	return &NullableTokenApplicationCredential{value: val, isSet: true}
}

func (v NullableTokenApplicationCredential) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenApplicationCredential) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
