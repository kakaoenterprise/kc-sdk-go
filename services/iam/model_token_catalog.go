/*
Cloud-IAM API

IAM service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the TokenCatalog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenCatalog{}

// TokenCatalog struct for TokenCatalog
type TokenCatalog struct {
	Endpoints            []TokenEndpoint `json:"endpoints,omitempty"`
	Id                   *string         `json:"id,omitempty"`
	Name                 *string         `json:"name,omitempty"`
	Type                 *string         `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TokenCatalog TokenCatalog

// NewTokenCatalog instantiates a new TokenCatalog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenCatalog() *TokenCatalog {
	this := TokenCatalog{}
	return &this
}

// NewTokenCatalogWithDefaults instantiates a new TokenCatalog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenCatalogWithDefaults() *TokenCatalog {
	this := TokenCatalog{}
	return &this
}

// GetEndpoints returns the Endpoints field value if set, zero value otherwise.
func (o *TokenCatalog) GetEndpoints() []TokenEndpoint {
	if o == nil || IsNil(o.Endpoints) {
		var ret []TokenEndpoint
		return ret
	}
	return o.Endpoints
}

// GetEndpointsOk returns a tuple with the Endpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenCatalog) GetEndpointsOk() ([]TokenEndpoint, bool) {
	if o == nil || IsNil(o.Endpoints) {
		return nil, false
	}
	return o.Endpoints, true
}

// HasEndpoints returns a boolean if a field has been set.
func (o *TokenCatalog) HasEndpoints() bool {
	if o != nil && !IsNil(o.Endpoints) {
		return true
	}

	return false
}

// SetEndpoints gets a reference to the given []TokenEndpoint and assigns it to the Endpoints field.
func (o *TokenCatalog) SetEndpoints(v []TokenEndpoint) {
	o.Endpoints = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TokenCatalog) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenCatalog) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TokenCatalog) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TokenCatalog) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TokenCatalog) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenCatalog) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TokenCatalog) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TokenCatalog) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TokenCatalog) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenCatalog) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TokenCatalog) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TokenCatalog) SetType(v string) {
	o.Type = &v
}

func (o TokenCatalog) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenCatalog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Endpoints) {
		toSerialize["endpoints"] = o.Endpoints
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TokenCatalog) UnmarshalJSON(data []byte) (err error) {
	varTokenCatalog := _TokenCatalog{}

	err = json.Unmarshal(data, &varTokenCatalog)

	if err != nil {
		return err
	}

	*o = TokenCatalog(varTokenCatalog)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "endpoints")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTokenCatalog struct {
	value *TokenCatalog
	isSet bool
}

func (v NullableTokenCatalog) Get() *TokenCatalog {
	return v.value
}

func (v *NullableTokenCatalog) Set(val *TokenCatalog) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenCatalog) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenCatalog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenCatalog(val *TokenCatalog) *NullableTokenCatalog {
	return &NullableTokenCatalog{value: val, isSet: true}
}

func (v NullableTokenCatalog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenCatalog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
