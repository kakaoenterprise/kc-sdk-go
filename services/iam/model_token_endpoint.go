/*
Cloud-IAM API

IAM service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the TokenEndpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenEndpoint{}

// TokenEndpoint struct for TokenEndpoint
type TokenEndpoint struct {
	Id                   *string `json:"id,omitempty"`
	Interface            *string `json:"interface,omitempty"`
	Region               *string `json:"region,omitempty"`
	RegionId             *string `json:"region_id,omitempty"`
	Url                  *string `json:"url,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TokenEndpoint TokenEndpoint

// NewTokenEndpoint instantiates a new TokenEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenEndpoint() *TokenEndpoint {
	this := TokenEndpoint{}
	return &this
}

// NewTokenEndpointWithDefaults instantiates a new TokenEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenEndpointWithDefaults() *TokenEndpoint {
	this := TokenEndpoint{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TokenEndpoint) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenEndpoint) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TokenEndpoint) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TokenEndpoint) SetId(v string) {
	o.Id = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *TokenEndpoint) GetInterface() string {
	if o == nil || IsNil(o.Interface) {
		var ret string
		return ret
	}
	return *o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenEndpoint) GetInterfaceOk() (*string, bool) {
	if o == nil || IsNil(o.Interface) {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *TokenEndpoint) HasInterface() bool {
	if o != nil && !IsNil(o.Interface) {
		return true
	}

	return false
}

// SetInterface gets a reference to the given string and assigns it to the Interface field.
func (o *TokenEndpoint) SetInterface(v string) {
	o.Interface = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *TokenEndpoint) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenEndpoint) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *TokenEndpoint) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *TokenEndpoint) SetRegion(v string) {
	o.Region = &v
}

// GetRegionId returns the RegionId field value if set, zero value otherwise.
func (o *TokenEndpoint) GetRegionId() string {
	if o == nil || IsNil(o.RegionId) {
		var ret string
		return ret
	}
	return *o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenEndpoint) GetRegionIdOk() (*string, bool) {
	if o == nil || IsNil(o.RegionId) {
		return nil, false
	}
	return o.RegionId, true
}

// HasRegionId returns a boolean if a field has been set.
func (o *TokenEndpoint) HasRegionId() bool {
	if o != nil && !IsNil(o.RegionId) {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given string and assigns it to the RegionId field.
func (o *TokenEndpoint) SetRegionId(v string) {
	o.RegionId = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *TokenEndpoint) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenEndpoint) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *TokenEndpoint) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *TokenEndpoint) SetUrl(v string) {
	o.Url = &v
}

func (o TokenEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenEndpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Interface) {
		toSerialize["interface"] = o.Interface
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.RegionId) {
		toSerialize["region_id"] = o.RegionId
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TokenEndpoint) UnmarshalJSON(data []byte) (err error) {
	varTokenEndpoint := _TokenEndpoint{}

	err = json.Unmarshal(data, &varTokenEndpoint)

	if err != nil {
		return err
	}

	*o = TokenEndpoint(varTokenEndpoint)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "interface")
		delete(additionalProperties, "region")
		delete(additionalProperties, "region_id")
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTokenEndpoint struct {
	value *TokenEndpoint
	isSet bool
}

func (v NullableTokenEndpoint) Get() *TokenEndpoint {
	return v.value
}

func (v *NullableTokenEndpoint) Set(val *TokenEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenEndpoint(val *TokenEndpoint) *NullableTokenEndpoint {
	return &NullableTokenEndpoint{value: val, isSet: true}
}

func (v NullableTokenEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
