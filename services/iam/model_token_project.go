/*
Cloud-IAM API

IAM service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the TokenProject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenProject{}

// TokenProject struct for TokenProject
type TokenProject struct {
	Domain               *TokenDomain `json:"domain,omitempty"`
	Id                   *string      `json:"id,omitempty"`
	Name                 *string      `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TokenProject TokenProject

// NewTokenProject instantiates a new TokenProject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenProject() *TokenProject {
	this := TokenProject{}
	return &this
}

// NewTokenProjectWithDefaults instantiates a new TokenProject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenProjectWithDefaults() *TokenProject {
	this := TokenProject{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *TokenProject) GetDomain() TokenDomain {
	if o == nil || IsNil(o.Domain) {
		var ret TokenDomain
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenProject) GetDomainOk() (*TokenDomain, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *TokenProject) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given TokenDomain and assigns it to the Domain field.
func (o *TokenProject) SetDomain(v TokenDomain) {
	o.Domain = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TokenProject) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenProject) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TokenProject) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TokenProject) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TokenProject) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenProject) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TokenProject) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TokenProject) SetName(v string) {
	o.Name = &v
}

func (o TokenProject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenProject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TokenProject) UnmarshalJSON(data []byte) (err error) {
	varTokenProject := _TokenProject{}

	err = json.Unmarshal(data, &varTokenProject)

	if err != nil {
		return err
	}

	*o = TokenProject(varTokenProject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "domain")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTokenProject struct {
	value *TokenProject
	isSet bool
}

func (v NullableTokenProject) Get() *TokenProject {
	return v.value
}

func (v *NullableTokenProject) Set(val *TokenProject) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenProject) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenProject(val *TokenProject) *NullableTokenProject {
	return &NullableTokenProject{value: val, isSet: true}
}

func (v NullableTokenProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
