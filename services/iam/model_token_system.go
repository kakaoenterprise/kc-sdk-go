/*
Cloud-IAM API

IAM service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the TokenSystem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenSystem{}

// TokenSystem struct for TokenSystem
type TokenSystem struct {
	All                  *bool `json:"all,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TokenSystem TokenSystem

// NewTokenSystem instantiates a new TokenSystem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenSystem() *TokenSystem {
	this := TokenSystem{}
	return &this
}

// NewTokenSystemWithDefaults instantiates a new TokenSystem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenSystemWithDefaults() *TokenSystem {
	this := TokenSystem{}
	return &this
}

// GetAll returns the All field value if set, zero value otherwise.
func (o *TokenSystem) GetAll() bool {
	if o == nil || IsNil(o.All) {
		var ret bool
		return ret
	}
	return *o.All
}

// GetAllOk returns a tuple with the All field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenSystem) GetAllOk() (*bool, bool) {
	if o == nil || IsNil(o.All) {
		return nil, false
	}
	return o.All, true
}

// HasAll returns a boolean if a field has been set.
func (o *TokenSystem) HasAll() bool {
	if o != nil && !IsNil(o.All) {
		return true
	}

	return false
}

// SetAll gets a reference to the given bool and assigns it to the All field.
func (o *TokenSystem) SetAll(v bool) {
	o.All = &v
}

func (o TokenSystem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenSystem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.All) {
		toSerialize["all"] = o.All
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TokenSystem) UnmarshalJSON(data []byte) (err error) {
	varTokenSystem := _TokenSystem{}

	err = json.Unmarshal(data, &varTokenSystem)

	if err != nil {
		return err
	}

	*o = TokenSystem(varTokenSystem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "all")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTokenSystem struct {
	value *TokenSystem
	isSet bool
}

func (v NullableTokenSystem) Get() *TokenSystem {
	return v.value
}

func (v *NullableTokenSystem) Set(val *TokenSystem) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenSystem) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenSystem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenSystem(val *TokenSystem) *NullableTokenSystem {
	return &NullableTokenSystem{value: val, isSet: true}
}

func (v NullableTokenSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenSystem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
