/*
Cloud-IAM API

IAM service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the TokenTrustUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenTrustUser{}

// TokenTrustUser struct for TokenTrustUser
type TokenTrustUser struct {
	Id                   *string     `json:"id,omitempty"`
	Links                *TokenLinks `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TokenTrustUser TokenTrustUser

// NewTokenTrustUser instantiates a new TokenTrustUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenTrustUser() *TokenTrustUser {
	this := TokenTrustUser{}
	return &this
}

// NewTokenTrustUserWithDefaults instantiates a new TokenTrustUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenTrustUserWithDefaults() *TokenTrustUser {
	this := TokenTrustUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TokenTrustUser) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenTrustUser) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TokenTrustUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TokenTrustUser) SetId(v string) {
	o.Id = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *TokenTrustUser) GetLinks() TokenLinks {
	if o == nil || IsNil(o.Links) {
		var ret TokenLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenTrustUser) GetLinksOk() (*TokenLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *TokenTrustUser) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given TokenLinks and assigns it to the Links field.
func (o *TokenTrustUser) SetLinks(v TokenLinks) {
	o.Links = &v
}

func (o TokenTrustUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenTrustUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TokenTrustUser) UnmarshalJSON(data []byte) (err error) {
	varTokenTrustUser := _TokenTrustUser{}

	err = json.Unmarshal(data, &varTokenTrustUser)

	if err != nil {
		return err
	}

	*o = TokenTrustUser(varTokenTrustUser)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTokenTrustUser struct {
	value *TokenTrustUser
	isSet bool
}

func (v NullableTokenTrustUser) Get() *TokenTrustUser {
	return v.value
}

func (v *NullableTokenTrustUser) Set(val *TokenTrustUser) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenTrustUser) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenTrustUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenTrustUser(val *TokenTrustUser) *NullableTokenTrustUser {
	return &NullableTokenTrustUser{value: val, isSet: true}
}

func (v NullableTokenTrustUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenTrustUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
