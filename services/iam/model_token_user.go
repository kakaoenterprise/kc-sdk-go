/*
Cloud-IAM API

IAM service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the TokenUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenUser{}

// TokenUser struct for TokenUser
type TokenUser struct {
	Domain               *TokenDomain `json:"domain,omitempty"`
	DomainId             *string      `json:"domain_id,omitempty"`
	Id                   *string      `json:"id,omitempty"`
	Name                 *string      `json:"name,omitempty"`
	Password             *string      `json:"password,omitempty"`
	PasswordExpiresAt    *string      `json:"password_expires_at,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TokenUser TokenUser

// NewTokenUser instantiates a new TokenUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenUser() *TokenUser {
	this := TokenUser{}
	return &this
}

// NewTokenUserWithDefaults instantiates a new TokenUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenUserWithDefaults() *TokenUser {
	this := TokenUser{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *TokenUser) GetDomain() TokenDomain {
	if o == nil || IsNil(o.Domain) {
		var ret TokenDomain
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenUser) GetDomainOk() (*TokenDomain, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *TokenUser) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given TokenDomain and assigns it to the Domain field.
func (o *TokenUser) SetDomain(v TokenDomain) {
	o.Domain = &v
}

// GetDomainId returns the DomainId field value if set, zero value otherwise.
func (o *TokenUser) GetDomainId() string {
	if o == nil || IsNil(o.DomainId) {
		var ret string
		return ret
	}
	return *o.DomainId
}

// GetDomainIdOk returns a tuple with the DomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenUser) GetDomainIdOk() (*string, bool) {
	if o == nil || IsNil(o.DomainId) {
		return nil, false
	}
	return o.DomainId, true
}

// HasDomainId returns a boolean if a field has been set.
func (o *TokenUser) HasDomainId() bool {
	if o != nil && !IsNil(o.DomainId) {
		return true
	}

	return false
}

// SetDomainId gets a reference to the given string and assigns it to the DomainId field.
func (o *TokenUser) SetDomainId(v string) {
	o.DomainId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TokenUser) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenUser) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TokenUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TokenUser) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TokenUser) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenUser) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TokenUser) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TokenUser) SetName(v string) {
	o.Name = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *TokenUser) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenUser) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *TokenUser) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *TokenUser) SetPassword(v string) {
	o.Password = &v
}

// GetPasswordExpiresAt returns the PasswordExpiresAt field value if set, zero value otherwise.
func (o *TokenUser) GetPasswordExpiresAt() string {
	if o == nil || IsNil(o.PasswordExpiresAt) {
		var ret string
		return ret
	}
	return *o.PasswordExpiresAt
}

// GetPasswordExpiresAtOk returns a tuple with the PasswordExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenUser) GetPasswordExpiresAtOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordExpiresAt) {
		return nil, false
	}
	return o.PasswordExpiresAt, true
}

// HasPasswordExpiresAt returns a boolean if a field has been set.
func (o *TokenUser) HasPasswordExpiresAt() bool {
	if o != nil && !IsNil(o.PasswordExpiresAt) {
		return true
	}

	return false
}

// SetPasswordExpiresAt gets a reference to the given string and assigns it to the PasswordExpiresAt field.
func (o *TokenUser) SetPasswordExpiresAt(v string) {
	o.PasswordExpiresAt = &v
}

func (o TokenUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.DomainId) {
		toSerialize["domain_id"] = o.DomainId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.PasswordExpiresAt) {
		toSerialize["password_expires_at"] = o.PasswordExpiresAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TokenUser) UnmarshalJSON(data []byte) (err error) {
	varTokenUser := _TokenUser{}

	err = json.Unmarshal(data, &varTokenUser)

	if err != nil {
		return err
	}

	*o = TokenUser(varTokenUser)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "domain")
		delete(additionalProperties, "domain_id")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "password")
		delete(additionalProperties, "password_expires_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTokenUser struct {
	value *TokenUser
	isSet bool
}

func (v NullableTokenUser) Get() *TokenUser {
	return v.value
}

func (v *NullableTokenUser) Set(val *TokenUser) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenUser) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenUser(val *TokenUser) *NullableTokenUser {
	return &NullableTokenUser{value: val, isSet: true}
}

func (v NullableTokenUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
