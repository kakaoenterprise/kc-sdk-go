/*
Beyond Compute Service(BCS) Image API

Beyond Compute Service Image API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package image

import (
	"encoding/json"
	"fmt"
)

// ImageInstanceType the model 'ImageInstanceType'
type ImageInstanceType string

// List of ImageInstanceType
const (
	IMAGEINSTANCETYPE_VM ImageInstanceType = "vm"
	IMAGEINSTANCETYPE_BM ImageInstanceType = "bm"
)

// All allowed values of ImageInstanceType enum
var AllowedImageInstanceTypeEnumValues = []ImageInstanceType{
	"vm",
	"bm",
}

func (v *ImageInstanceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImageInstanceType(value)
	for _, existing := range AllowedImageInstanceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImageInstanceType", value)
}

// NewImageInstanceTypeFromValue returns a pointer to a valid ImageInstanceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageInstanceTypeFromValue(v string) (*ImageInstanceType, error) {
	ev := ImageInstanceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImageInstanceType: valid values are %v", v, AllowedImageInstanceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageInstanceType) IsValid() bool {
	for _, existing := range AllowedImageInstanceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImageInstanceType value
func (v ImageInstanceType) Ptr() *ImageInstanceType {
	return &v
}

type NullableImageInstanceType struct {
	value *ImageInstanceType
	isSet bool
}

func (v NullableImageInstanceType) Get() *ImageInstanceType {
	return v.value
}

func (v *NullableImageInstanceType) Set(val *ImageInstanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableImageInstanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableImageInstanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageInstanceType(val *ImageInstanceType) *NullableImageInstanceType {
	return &NullableImageInstanceType{value: val, isSet: true}
}

func (v NullableImageInstanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageInstanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
