/*
Beyond Compute Service(BCS) Image API

Beyond Compute Service Image API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package image

import (
	"encoding/json"
	"fmt"
)

// ImageVisibilityType the model 'ImageVisibilityType'
type ImageVisibilityType string

// List of ImageVisibilityType
const (
	IMAGEVISIBILITYTYPE_BASIC ImageVisibilityType = "basic"
	IMAGEVISIBILITYTYPE_MY    ImageVisibilityType = "my"
)

// All allowed values of ImageVisibilityType enum
var AllowedImageVisibilityTypeEnumValues = []ImageVisibilityType{
	"basic",
	"my",
}

func (v *ImageVisibilityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImageVisibilityType(value)
	for _, existing := range AllowedImageVisibilityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImageVisibilityType", value)
}

// NewImageVisibilityTypeFromValue returns a pointer to a valid ImageVisibilityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageVisibilityTypeFromValue(v string) (*ImageVisibilityType, error) {
	ev := ImageVisibilityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImageVisibilityType: valid values are %v", v, AllowedImageVisibilityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageVisibilityType) IsValid() bool {
	for _, existing := range AllowedImageVisibilityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImageVisibilityType value
func (v ImageVisibilityType) Ptr() *ImageVisibilityType {
	return &v
}

type NullableImageVisibilityType struct {
	value *ImageVisibilityType
	isSet bool
}

func (v NullableImageVisibilityType) Get() *ImageVisibilityType {
	return v.value
}

func (v *NullableImageVisibilityType) Set(val *ImageVisibilityType) {
	v.value = val
	v.isSet = true
}

func (v NullableImageVisibilityType) IsSet() bool {
	return v.isSet
}

func (v *NullableImageVisibilityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageVisibilityType(val *ImageVisibilityType) *NullableImageVisibilityType {
	return &NullableImageVisibilityType{value: val, isSet: true}
}

func (v NullableImageVisibilityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageVisibilityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
