/*
Beyond Compute Service(BCS) Image API

Beyond Compute Service Image API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package image

import (
	"encoding/json"
	"fmt"
)

// InstanceType the model 'InstanceType'
type InstanceType string

// List of InstanceType
const (
	INSTANCETYPE_VM  InstanceType = "vm"
	INSTANCETYPE_BM  InstanceType = "bm"
	INSTANCETYPE_GPU InstanceType = "gpu"
)

// All allowed values of InstanceType enum
var AllowedInstanceTypeEnumValues = []InstanceType{
	"vm",
	"bm",
	"gpu",
}

func (v *InstanceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InstanceType(value)
	for _, existing := range AllowedInstanceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InstanceType", value)
}

// NewInstanceTypeFromValue returns a pointer to a valid InstanceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstanceTypeFromValue(v string) (*InstanceType, error) {
	ev := InstanceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InstanceType: valid values are %v", v, AllowedInstanceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InstanceType) IsValid() bool {
	for _, existing := range AllowedInstanceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InstanceType value
func (v InstanceType) Ptr() *InstanceType {
	return &v
}

type NullableInstanceType struct {
	value *InstanceType
	isSet bool
}

func (v NullableInstanceType) Get() *InstanceType {
	return v.value
}

func (v *NullableInstanceType) Set(val *InstanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceType(val *InstanceType) *NullableInstanceType {
	return &NullableInstanceType{value: val, isSet: true}
}

func (v NullableInstanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
