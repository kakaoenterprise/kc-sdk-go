/*
Beyond Compute Service(BCS) Image API

Testing ImageAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package image

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_image_ImageAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ImageAPIService AddImageShare", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var imageId string
		var memberId string

		resp, httpRes, err := apiClient.ImageAPI.AddImageShare(context.Background(), imageId, memberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService DeleteImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var imageId string

		httpRes, err := apiClient.ImageAPI.DeleteImage(context.Background(), imageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService GetImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var imageId string

		resp, httpRes, err := apiClient.ImageAPI.GetImage(context.Background(), imageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService ListImageSharedProjects", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var imageId string

		resp, httpRes, err := apiClient.ImageAPI.ListImageSharedProjects(context.Background(), imageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService ListImages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ImageAPI.ListImages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService RemoveImageShare", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var imageId string
		var memberId string

		httpRes, err := apiClient.ImageAPI.RemoveImageShare(context.Background(), imageId, memberId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService UpdateImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var imageId string

		resp, httpRes, err := apiClient.ImageAPI.UpdateImage(context.Background(), imageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
