/*
kubernetes-engine API

kubernetes-engine API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kubernetesengine

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type ImagesAPI interface {

	/*
		ListNodePoolImages List node pool images

		클러스터에서 노드 풀 생성 시 사용할 수 있는 노드 이미지 목록을 조회합니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiListNodePoolImagesRequest
	*/
	ListNodePoolImages(ctx context.Context) ApiListNodePoolImagesRequest

	// ListNodePoolImagesExecute executes the request
	//  @return GetK8sImagesResponseModel
	ListNodePoolImagesExecute(r ApiListNodePoolImagesRequest) (*GetK8sImagesResponseModel, *http.Response, error)
}

// ImagesAPIService ImagesAPI service
type ImagesAPIService service

type ApiListNodePoolImagesRequest struct {
	ctx          context.Context
	ApiService   ImagesAPI
	xAuthToken   *string
	osDistro     *string
	instanceType *ImageInstanceType
	isGpuType    *bool
	k8sVersion   *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiListNodePoolImagesRequest) XAuthToken(xAuthToken string) ApiListNodePoolImagesRequest {
	r.xAuthToken = &xAuthToken
	return r
}

// 운영체제 배포판
func (r ApiListNodePoolImagesRequest) OsDistro(osDistro string) ApiListNodePoolImagesRequest {
	r.osDistro = &osDistro
	return r
}

// 인스턴스 유형 &lt;br/&gt; - &#x60;vm&#x60;: Virtual Machine 유형  &lt;br/&gt; - &#x60;bm&#x60;: Bare Metal Server 유형
func (r ApiListNodePoolImagesRequest) InstanceType(instanceType ImageInstanceType) ApiListNodePoolImagesRequest {
	r.instanceType = &instanceType
	return r
}

// GPU 지원 이미지 여부 &lt;br/&gt; - &#x60;true&#x60;: GPU 장비를 지원하는 이미지&lt;br/&gt; - &#x60;false&#x60;: CPU 전용 이미지
func (r ApiListNodePoolImagesRequest) IsGpuType(isGpuType bool) ApiListNodePoolImagesRequest {
	r.isGpuType = &isGpuType
	return r
}

// 대상 Kubernetes 버전
func (r ApiListNodePoolImagesRequest) K8sVersion(k8sVersion string) ApiListNodePoolImagesRequest {
	r.k8sVersion = &k8sVersion
	return r
}

func (r ApiListNodePoolImagesRequest) Execute() (*GetK8sImagesResponseModel, *http.Response, error) {
	return r.ApiService.ListNodePoolImagesExecute(r)
}

/*
ListNodePoolImages List node pool images

클러스터에서 노드 풀 생성 시 사용할 수 있는 노드 이미지 목록을 조회합니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListNodePoolImagesRequest
*/
func (a *ImagesAPIService) ListNodePoolImages(ctx context.Context) ApiListNodePoolImagesRequest {
	return ApiListNodePoolImagesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GetK8sImagesResponseModel
func (a *ImagesAPIService) ListNodePoolImagesExecute(r ApiListNodePoolImagesRequest) (*GetK8sImagesResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetK8sImagesResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImagesAPIService.ListNodePoolImages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/images"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	if r.osDistro != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "os_distro", r.osDistro, "form", "")
	}
	if r.instanceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instance_type", r.instanceType, "form", "")
	}
	if r.isGpuType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_gpu_type", r.isGpuType, "form", "")
	}
	if r.k8sVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "k8s_version", r.k8sVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
