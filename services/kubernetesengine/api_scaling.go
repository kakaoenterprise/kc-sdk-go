/*
kubernetes-engine API

kubernetes-engine API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kubernetesengine

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type ScalingAPI interface {

	/*
		CreateNodePoolScheduledScaling Create node pool scheduled scaling

		노드 풀에 적용할 예약 기반 오토스케일링 규칙을 생성합니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param clusterName 대상 클러스터 이름
		@param nodePoolName 대상 노드 풀 이름
		@return ApiCreateNodePoolScheduledScalingRequest
	*/
	CreateNodePoolScheduledScaling(ctx context.Context, clusterName string, nodePoolName string) ApiCreateNodePoolScheduledScalingRequest

	// CreateNodePoolScheduledScalingExecute executes the request
	//  @return interface{}
	CreateNodePoolScheduledScalingExecute(r ApiCreateNodePoolScheduledScalingRequest) (interface{}, *http.Response, error)

	/*
		DeleteNodePoolScheduledScaling Delete node pool scheduled scaling

		노드 풀에 설정된 예약 기반 오토스케일링 규칙을 삭제합니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param clusterName 대상 클러스터 이름
		@param nodePoolName 대상 노드 풀 이름
		@param scheduleName 대상 스케줄 이름
		@return ApiDeleteNodePoolScheduledScalingRequest
	*/
	DeleteNodePoolScheduledScaling(ctx context.Context, clusterName string, nodePoolName string, scheduleName string) ApiDeleteNodePoolScheduledScalingRequest

	// DeleteNodePoolScheduledScalingExecute executes the request
	DeleteNodePoolScheduledScalingExecute(r ApiDeleteNodePoolScheduledScalingRequest) (*http.Response, error)

	/*
		ListNodePoolScheduledScalings List node pool scheduled scalings

		노드 풀에 설정된 예약 기반 오토스케일링 규칙을 모두 조회합니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param clusterName 대상 클러스터 이름
		@param nodePoolName 대상 노드 풀 이름
		@return ApiListNodePoolScheduledScalingsRequest
	*/
	ListNodePoolScheduledScalings(ctx context.Context, clusterName string, nodePoolName string) ApiListNodePoolScheduledScalingsRequest

	// ListNodePoolScheduledScalingsExecute executes the request
	//  @return GetK8sClusterNodePoolScalingScheduleResponseModel
	ListNodePoolScheduledScalingsExecute(r ApiListNodePoolScheduledScalingsRequest) (*GetK8sClusterNodePoolScalingScheduleResponseModel, *http.Response, error)

	/*
		SetNodePoolResourceBasedAutoScaling Set node pool resource-based auto scaling

		노드 풀의 리소스 기반 오토스케일링 규칙을 설정합니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param clusterName 대상 클러스터 이름
		@param nodePoolName 대상 노드 풀 이름
		@return ApiSetNodePoolResourceBasedAutoScalingRequest
	*/
	SetNodePoolResourceBasedAutoScaling(ctx context.Context, clusterName string, nodePoolName string) ApiSetNodePoolResourceBasedAutoScalingRequest

	// SetNodePoolResourceBasedAutoScalingExecute executes the request
	//  @return interface{}
	SetNodePoolResourceBasedAutoScalingExecute(r ApiSetNodePoolResourceBasedAutoScalingRequest) (interface{}, *http.Response, error)
}

// ScalingAPIService ScalingAPI service
type ScalingAPIService service

type ApiCreateNodePoolScheduledScalingRequest struct {
	ctx                                                 context.Context
	ApiService                                          ScalingAPI
	clusterName                                         string
	nodePoolName                                        string
	xAuthToken                                          *string
	createK8sClusterNodePoolScalingScheduleRequestModel *CreateK8sClusterNodePoolScalingScheduleRequestModel
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiCreateNodePoolScheduledScalingRequest) XAuthToken(xAuthToken string) ApiCreateNodePoolScheduledScalingRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiCreateNodePoolScheduledScalingRequest) CreateK8sClusterNodePoolScalingScheduleRequestModel(createK8sClusterNodePoolScalingScheduleRequestModel CreateK8sClusterNodePoolScalingScheduleRequestModel) ApiCreateNodePoolScheduledScalingRequest {
	r.createK8sClusterNodePoolScalingScheduleRequestModel = &createK8sClusterNodePoolScalingScheduleRequestModel
	return r
}

func (r ApiCreateNodePoolScheduledScalingRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.CreateNodePoolScheduledScalingExecute(r)
}

/*
CreateNodePoolScheduledScaling Create node pool scheduled scaling

노드 풀에 적용할 예약 기반 오토스케일링 규칙을 생성합니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clusterName 대상 클러스터 이름
	@param nodePoolName 대상 노드 풀 이름
	@return ApiCreateNodePoolScheduledScalingRequest
*/
func (a *ScalingAPIService) CreateNodePoolScheduledScaling(ctx context.Context, clusterName string, nodePoolName string) ApiCreateNodePoolScheduledScalingRequest {
	return ApiCreateNodePoolScheduledScalingRequest{
		ApiService:   a,
		ctx:          ctx,
		clusterName:  clusterName,
		nodePoolName: nodePoolName,
	}
}

// Execute executes the request
//
//	@return interface{}
func (a *ScalingAPIService) CreateNodePoolScheduledScalingExecute(r ApiCreateNodePoolScheduledScalingRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScalingAPIService.CreateNodePoolScheduledScaling")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/clusters/{cluster_name}/node-pools/{node_pool_name}/scheduled-scaling"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_name"+"}", url.PathEscape(parameterValueToString(r.clusterName, "clusterName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"node_pool_name"+"}", url.PathEscape(parameterValueToString(r.nodePoolName, "nodePoolName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}
	if r.createK8sClusterNodePoolScalingScheduleRequestModel == nil {
		return localVarReturnValue, nil, reportError("createK8sClusterNodePoolScalingScheduleRequestModel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	// body params
	localVarPostBody = r.createK8sClusterNodePoolScalingScheduleRequestModel
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteNodePoolScheduledScalingRequest struct {
	ctx          context.Context
	ApiService   ScalingAPI
	clusterName  string
	nodePoolName string
	scheduleName string
	xAuthToken   *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiDeleteNodePoolScheduledScalingRequest) XAuthToken(xAuthToken string) ApiDeleteNodePoolScheduledScalingRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiDeleteNodePoolScheduledScalingRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteNodePoolScheduledScalingExecute(r)
}

/*
DeleteNodePoolScheduledScaling Delete node pool scheduled scaling

노드 풀에 설정된 예약 기반 오토스케일링 규칙을 삭제합니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clusterName 대상 클러스터 이름
	@param nodePoolName 대상 노드 풀 이름
	@param scheduleName 대상 스케줄 이름
	@return ApiDeleteNodePoolScheduledScalingRequest
*/
func (a *ScalingAPIService) DeleteNodePoolScheduledScaling(ctx context.Context, clusterName string, nodePoolName string, scheduleName string) ApiDeleteNodePoolScheduledScalingRequest {
	return ApiDeleteNodePoolScheduledScalingRequest{
		ApiService:   a,
		ctx:          ctx,
		clusterName:  clusterName,
		nodePoolName: nodePoolName,
		scheduleName: scheduleName,
	}
}

// Execute executes the request
func (a *ScalingAPIService) DeleteNodePoolScheduledScalingExecute(r ApiDeleteNodePoolScheduledScalingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScalingAPIService.DeleteNodePoolScheduledScaling")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/clusters/{cluster_name}/node-pools/{node_pool_name}/scheduled-scaling/{schedule_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_name"+"}", url.PathEscape(parameterValueToString(r.clusterName, "clusterName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"node_pool_name"+"}", url.PathEscape(parameterValueToString(r.nodePoolName, "nodePoolName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"schedule_name"+"}", url.PathEscape(parameterValueToString(r.scheduleName, "scheduleName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListNodePoolScheduledScalingsRequest struct {
	ctx          context.Context
	ApiService   ScalingAPI
	clusterName  string
	nodePoolName string
	xAuthToken   *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiListNodePoolScheduledScalingsRequest) XAuthToken(xAuthToken string) ApiListNodePoolScheduledScalingsRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiListNodePoolScheduledScalingsRequest) Execute() (*GetK8sClusterNodePoolScalingScheduleResponseModel, *http.Response, error) {
	return r.ApiService.ListNodePoolScheduledScalingsExecute(r)
}

/*
ListNodePoolScheduledScalings List node pool scheduled scalings

노드 풀에 설정된 예약 기반 오토스케일링 규칙을 모두 조회합니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clusterName 대상 클러스터 이름
	@param nodePoolName 대상 노드 풀 이름
	@return ApiListNodePoolScheduledScalingsRequest
*/
func (a *ScalingAPIService) ListNodePoolScheduledScalings(ctx context.Context, clusterName string, nodePoolName string) ApiListNodePoolScheduledScalingsRequest {
	return ApiListNodePoolScheduledScalingsRequest{
		ApiService:   a,
		ctx:          ctx,
		clusterName:  clusterName,
		nodePoolName: nodePoolName,
	}
}

// Execute executes the request
//
//	@return GetK8sClusterNodePoolScalingScheduleResponseModel
func (a *ScalingAPIService) ListNodePoolScheduledScalingsExecute(r ApiListNodePoolScheduledScalingsRequest) (*GetK8sClusterNodePoolScalingScheduleResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetK8sClusterNodePoolScalingScheduleResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScalingAPIService.ListNodePoolScheduledScalings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/clusters/{cluster_name}/node-pools/{node_pool_name}/scheduled-scaling"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_name"+"}", url.PathEscape(parameterValueToString(r.clusterName, "clusterName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"node_pool_name"+"}", url.PathEscape(parameterValueToString(r.nodePoolName, "nodePoolName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetNodePoolResourceBasedAutoScalingRequest struct {
	ctx                                                              context.Context
	ApiService                                                       ScalingAPI
	clusterName                                                      string
	nodePoolName                                                     string
	xAuthToken                                                       *string
	updateKubernetesEngineClusterNodePoolScalingResourceRequestModel *UpdateKubernetesEngineClusterNodePoolScalingResourceRequestModel
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiSetNodePoolResourceBasedAutoScalingRequest) XAuthToken(xAuthToken string) ApiSetNodePoolResourceBasedAutoScalingRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiSetNodePoolResourceBasedAutoScalingRequest) UpdateKubernetesEngineClusterNodePoolScalingResourceRequestModel(updateKubernetesEngineClusterNodePoolScalingResourceRequestModel UpdateKubernetesEngineClusterNodePoolScalingResourceRequestModel) ApiSetNodePoolResourceBasedAutoScalingRequest {
	r.updateKubernetesEngineClusterNodePoolScalingResourceRequestModel = &updateKubernetesEngineClusterNodePoolScalingResourceRequestModel
	return r
}

func (r ApiSetNodePoolResourceBasedAutoScalingRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.SetNodePoolResourceBasedAutoScalingExecute(r)
}

/*
SetNodePoolResourceBasedAutoScaling Set node pool resource-based auto scaling

노드 풀의 리소스 기반 오토스케일링 규칙을 설정합니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clusterName 대상 클러스터 이름
	@param nodePoolName 대상 노드 풀 이름
	@return ApiSetNodePoolResourceBasedAutoScalingRequest
*/
func (a *ScalingAPIService) SetNodePoolResourceBasedAutoScaling(ctx context.Context, clusterName string, nodePoolName string) ApiSetNodePoolResourceBasedAutoScalingRequest {
	return ApiSetNodePoolResourceBasedAutoScalingRequest{
		ApiService:   a,
		ctx:          ctx,
		clusterName:  clusterName,
		nodePoolName: nodePoolName,
	}
}

// Execute executes the request
//
//	@return interface{}
func (a *ScalingAPIService) SetNodePoolResourceBasedAutoScalingExecute(r ApiSetNodePoolResourceBasedAutoScalingRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScalingAPIService.SetNodePoolResourceBasedAutoScaling")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/clusters/{cluster_name}/node-pools/{node_pool_name}/autoscaling"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_name"+"}", url.PathEscape(parameterValueToString(r.clusterName, "clusterName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"node_pool_name"+"}", url.PathEscape(parameterValueToString(r.nodePoolName, "nodePoolName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}
	if r.updateKubernetesEngineClusterNodePoolScalingResourceRequestModel == nil {
		return localVarReturnValue, nil, reportError("updateKubernetesEngineClusterNodePoolScalingResourceRequestModel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	// body params
	localVarPostBody = r.updateKubernetesEngineClusterNodePoolScalingResourceRequestModel
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
