/*
kubernetes-engine API

kubernetes-engine API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kubernetesengine

import (
	"encoding/json"
	"fmt"
)

// AvailabilityZone the model 'AvailabilityZone'
type AvailabilityZone string

// List of AvailabilityZone
const (
	AVAILABILITYZONE_KR_CENTRAL_2_A AvailabilityZone = "kr-central-2-a"
	AVAILABILITYZONE_KR_CENTRAL_2_B AvailabilityZone = "kr-central-2-b"
	AVAILABILITYZONE_KR_CENTRAL_2_C AvailabilityZone = "kr-central-2-c"
)

// All allowed values of AvailabilityZone enum
var AllowedAvailabilityZoneEnumValues = []AvailabilityZone{
	"kr-central-2-a",
	"kr-central-2-b",
	"kr-central-2-c",
}

func (v *AvailabilityZone) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AvailabilityZone(value)
	for _, existing := range AllowedAvailabilityZoneEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AvailabilityZone", value)
}

// NewAvailabilityZoneFromValue returns a pointer to a valid AvailabilityZone
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAvailabilityZoneFromValue(v string) (*AvailabilityZone, error) {
	ev := AvailabilityZone(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AvailabilityZone: valid values are %v", v, AllowedAvailabilityZoneEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AvailabilityZone) IsValid() bool {
	for _, existing := range AllowedAvailabilityZoneEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AvailabilityZone value
func (v AvailabilityZone) Ptr() *AvailabilityZone {
	return &v
}

type NullableAvailabilityZone struct {
	value *AvailabilityZone
	isSet bool
}

func (v NullableAvailabilityZone) Get() *AvailabilityZone {
	return v.value
}

func (v *NullableAvailabilityZone) Set(val *AvailabilityZone) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailabilityZone) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailabilityZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailabilityZone(val *AvailabilityZone) *NullableAvailabilityZone {
	return &NullableAvailabilityZone{value: val, isSet: true}
}

func (v NullableAvailabilityZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailabilityZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
