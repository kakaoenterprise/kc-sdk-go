/*
kubernetes-engine API

kubernetes-engine API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kubernetesengine

import (
	"encoding/json"
	"fmt"
)

// ClusterStatus the model 'ClusterStatus'
type ClusterStatus string

// List of ClusterStatus
const (
	CLUSTERSTATUS_PENDING      ClusterStatus = "Pending"
	CLUSTERSTATUS_PROVISIONING ClusterStatus = "Provisioning"
	CLUSTERSTATUS_PROVISIONED  ClusterStatus = "Provisioned"
	CLUSTERSTATUS_UPDATING     ClusterStatus = "Updating"
	CLUSTERSTATUS_DELETING     ClusterStatus = "Deleting"
	CLUSTERSTATUS_FAILED       ClusterStatus = "Failed"
)

// All allowed values of ClusterStatus enum
var AllowedClusterStatusEnumValues = []ClusterStatus{
	"Pending",
	"Provisioning",
	"Provisioned",
	"Updating",
	"Deleting",
	"Failed",
}

func (v *ClusterStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterStatus(value)
	for _, existing := range AllowedClusterStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterStatus", value)
}

// NewClusterStatusFromValue returns a pointer to a valid ClusterStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterStatusFromValue(v string) (*ClusterStatus, error) {
	ev := ClusterStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterStatus: valid values are %v", v, AllowedClusterStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterStatus) IsValid() bool {
	for _, existing := range AllowedClusterStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterStatus value
func (v ClusterStatus) Ptr() *ClusterStatus {
	return &v
}

type NullableClusterStatus struct {
	value *ClusterStatus
	isSet bool
}

func (v NullableClusterStatus) Get() *ClusterStatus {
	return v.value
}

func (v *NullableClusterStatus) Set(val *ClusterStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterStatus(val *ClusterStatus) *NullableClusterStatus {
	return &NullableClusterStatus{value: val, isSet: true}
}

func (v NullableClusterStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
