/*
kubernetes-engine API

kubernetes-engine API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kubernetesengine

import (
	"encoding/json"
	"fmt"
)

// checks if the ConditionResponseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionResponseModel{}

// ConditionResponseModel struct for ConditionResponseModel
type ConditionResponseModel struct {
	// 마지막 하트비트 수신 시간
	LastHeartbeatTime string `json:"last_heartbeat_time"`
	// 상태가 마지막으로 변경된 시간
	LastTransitionTime string `json:"last_transition_time"`
	// 상태 관련 메시지
	Message string `json:"message"`
	// 상태 변경 사유
	Reason string `json:"reason"`
	// 상태 정보
	Status string `json:"status"`
	// 상태 유형
	Type                 string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _ConditionResponseModel ConditionResponseModel

// NewConditionResponseModel instantiates a new ConditionResponseModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionResponseModel(lastHeartbeatTime string, lastTransitionTime string, message string, reason string, status string, type_ string) *ConditionResponseModel {
	this := ConditionResponseModel{}
	this.LastHeartbeatTime = lastHeartbeatTime
	this.LastTransitionTime = lastTransitionTime
	this.Message = message
	this.Reason = reason
	this.Status = status
	this.Type = type_
	return &this
}

// NewConditionResponseModelWithDefaults instantiates a new ConditionResponseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionResponseModelWithDefaults() *ConditionResponseModel {
	this := ConditionResponseModel{}
	return &this
}

// GetLastHeartbeatTime returns the LastHeartbeatTime field value
func (o *ConditionResponseModel) GetLastHeartbeatTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastHeartbeatTime
}

// GetLastHeartbeatTimeOk returns a tuple with the LastHeartbeatTime field value
// and a boolean to check if the value has been set.
func (o *ConditionResponseModel) GetLastHeartbeatTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastHeartbeatTime, true
}

// SetLastHeartbeatTime sets field value
func (o *ConditionResponseModel) SetLastHeartbeatTime(v string) {
	o.LastHeartbeatTime = v
}

// GetLastTransitionTime returns the LastTransitionTime field value
func (o *ConditionResponseModel) GetLastTransitionTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastTransitionTime
}

// GetLastTransitionTimeOk returns a tuple with the LastTransitionTime field value
// and a boolean to check if the value has been set.
func (o *ConditionResponseModel) GetLastTransitionTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastTransitionTime, true
}

// SetLastTransitionTime sets field value
func (o *ConditionResponseModel) SetLastTransitionTime(v string) {
	o.LastTransitionTime = v
}

// GetMessage returns the Message field value
func (o *ConditionResponseModel) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ConditionResponseModel) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ConditionResponseModel) SetMessage(v string) {
	o.Message = v
}

// GetReason returns the Reason field value
func (o *ConditionResponseModel) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *ConditionResponseModel) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *ConditionResponseModel) SetReason(v string) {
	o.Reason = v
}

// GetStatus returns the Status field value
func (o *ConditionResponseModel) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ConditionResponseModel) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ConditionResponseModel) SetStatus(v string) {
	o.Status = v
}

// GetType returns the Type field value
func (o *ConditionResponseModel) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ConditionResponseModel) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ConditionResponseModel) SetType(v string) {
	o.Type = v
}

func (o ConditionResponseModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionResponseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["last_heartbeat_time"] = o.LastHeartbeatTime
	toSerialize["last_transition_time"] = o.LastTransitionTime
	toSerialize["message"] = o.Message
	toSerialize["reason"] = o.Reason
	toSerialize["status"] = o.Status
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConditionResponseModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"last_heartbeat_time",
		"last_transition_time",
		"message",
		"reason",
		"status",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConditionResponseModel := _ConditionResponseModel{}

	err = json.Unmarshal(data, &varConditionResponseModel)

	if err != nil {
		return err
	}

	*o = ConditionResponseModel(varConditionResponseModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "last_heartbeat_time")
		delete(additionalProperties, "last_transition_time")
		delete(additionalProperties, "message")
		delete(additionalProperties, "reason")
		delete(additionalProperties, "status")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConditionResponseModel struct {
	value *ConditionResponseModel
	isSet bool
}

func (v NullableConditionResponseModel) Get() *ConditionResponseModel {
	return v.value
}

func (v *NullableConditionResponseModel) Set(val *ConditionResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionResponseModel(val *ConditionResponseModel) *NullableConditionResponseModel {
	return &NullableConditionResponseModel{value: val, isSet: true}
}

func (v NullableConditionResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
