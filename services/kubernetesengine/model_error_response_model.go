/*
kubernetes-engine API

kubernetes-engine API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kubernetesengine

import (
	"encoding/json"
	"fmt"
)

// checks if the ErrorResponseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorResponseModel{}

// ErrorResponseModel struct for ErrorResponseModel
type ErrorResponseModel struct {
	// 에러에 대한 정보
	Error                ErrorResponseSubModel `json:"error"`
	AdditionalProperties map[string]interface{}
}

type _ErrorResponseModel ErrorResponseModel

// NewErrorResponseModel instantiates a new ErrorResponseModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponseModel(error_ ErrorResponseSubModel) *ErrorResponseModel {
	this := ErrorResponseModel{}
	this.Error = error_
	return &this
}

// NewErrorResponseModelWithDefaults instantiates a new ErrorResponseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseModelWithDefaults() *ErrorResponseModel {
	this := ErrorResponseModel{}
	return &this
}

// GetError returns the Error field value
func (o *ErrorResponseModel) GetError() ErrorResponseSubModel {
	if o == nil {
		var ret ErrorResponseSubModel
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseModel) GetErrorOk() (*ErrorResponseSubModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *ErrorResponseModel) SetError(v ErrorResponseSubModel) {
	o.Error = v
}

func (o ErrorResponseModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorResponseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["error"] = o.Error

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ErrorResponseModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"error",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorResponseModel := _ErrorResponseModel{}

	err = json.Unmarshal(data, &varErrorResponseModel)

	if err != nil {
		return err
	}

	*o = ErrorResponseModel(varErrorResponseModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "error")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableErrorResponseModel struct {
	value *ErrorResponseModel
	isSet bool
}

func (v NullableErrorResponseModel) Get() *ErrorResponseModel {
	return v.value
}

func (v *NullableErrorResponseModel) Set(val *ErrorResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseModel(val *ErrorResponseModel) *NullableErrorResponseModel {
	return &NullableErrorResponseModel{value: val, isSet: true}
}

func (v NullableErrorResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
