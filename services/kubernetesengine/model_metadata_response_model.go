/*
kubernetes-engine API

kubernetes-engine API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kubernetesengine

import (
	"encoding/json"
	"fmt"
)

// checks if the MetadataResponseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetadataResponseModel{}

// MetadataResponseModel struct for MetadataResponseModel
type MetadataResponseModel struct {
	Annotations map[string]interface{} `json:"annotations,omitempty"`
	Labels      map[string]interface{} `json:"labels,omitempty"`
	// 노드 이름
	Name                 string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _MetadataResponseModel MetadataResponseModel

// NewMetadataResponseModel instantiates a new MetadataResponseModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataResponseModel(name string) *MetadataResponseModel {
	this := MetadataResponseModel{}
	this.Name = name
	return &this
}

// NewMetadataResponseModelWithDefaults instantiates a new MetadataResponseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataResponseModelWithDefaults() *MetadataResponseModel {
	this := MetadataResponseModel{}
	return &this
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataResponseModel) GetAnnotations() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataResponseModel) GetAnnotationsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Annotations) {
		return map[string]interface{}{}, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *MetadataResponseModel) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]interface{} and assigns it to the Annotations field.
func (o *MetadataResponseModel) SetAnnotations(v map[string]interface{}) {
	o.Annotations = v
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataResponseModel) GetLabels() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataResponseModel) GetLabelsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Labels) {
		return map[string]interface{}{}, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *MetadataResponseModel) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]interface{} and assigns it to the Labels field.
func (o *MetadataResponseModel) SetLabels(v map[string]interface{}) {
	o.Labels = v
}

// GetName returns the Name field value
func (o *MetadataResponseModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MetadataResponseModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MetadataResponseModel) SetName(v string) {
	o.Name = v
}

func (o MetadataResponseModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetadataResponseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["name"] = o.Name

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MetadataResponseModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetadataResponseModel := _MetadataResponseModel{}

	err = json.Unmarshal(data, &varMetadataResponseModel)

	if err != nil {
		return err
	}

	*o = MetadataResponseModel(varMetadataResponseModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "annotations")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMetadataResponseModel struct {
	value *MetadataResponseModel
	isSet bool
}

func (v NullableMetadataResponseModel) Get() *MetadataResponseModel {
	return v.value
}

func (v *NullableMetadataResponseModel) Set(val *MetadataResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataResponseModel(val *MetadataResponseModel) *NullableMetadataResponseModel {
	return &NullableMetadataResponseModel{value: val, isSet: true}
}

func (v NullableMetadataResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
