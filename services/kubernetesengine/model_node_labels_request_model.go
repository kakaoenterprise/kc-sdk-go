/*
kubernetes-engine API

kubernetes-engine API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kubernetesengine

import (
	"encoding/json"
)

// checks if the NodeLabelsRequestModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeLabelsRequestModel{}

// NodeLabelsRequestModel struct for NodeLabelsRequestModel
type NodeLabelsRequestModel struct {
	AddOrUpdateLabels    []LabelRequestModel `json:"add_or_update_labels,omitempty"`
	RemoveLabelKeys      []string            `json:"remove_label_keys,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NodeLabelsRequestModel NodeLabelsRequestModel

// NewNodeLabelsRequestModel instantiates a new NodeLabelsRequestModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeLabelsRequestModel() *NodeLabelsRequestModel {
	this := NodeLabelsRequestModel{}
	return &this
}

// NewNodeLabelsRequestModelWithDefaults instantiates a new NodeLabelsRequestModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeLabelsRequestModelWithDefaults() *NodeLabelsRequestModel {
	this := NodeLabelsRequestModel{}
	return &this
}

// GetAddOrUpdateLabels returns the AddOrUpdateLabels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeLabelsRequestModel) GetAddOrUpdateLabels() []LabelRequestModel {
	if o == nil {
		var ret []LabelRequestModel
		return ret
	}
	return o.AddOrUpdateLabels
}

// GetAddOrUpdateLabelsOk returns a tuple with the AddOrUpdateLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeLabelsRequestModel) GetAddOrUpdateLabelsOk() ([]LabelRequestModel, bool) {
	if o == nil || IsNil(o.AddOrUpdateLabels) {
		return nil, false
	}
	return o.AddOrUpdateLabels, true
}

// HasAddOrUpdateLabels returns a boolean if a field has been set.
func (o *NodeLabelsRequestModel) HasAddOrUpdateLabels() bool {
	if o != nil && !IsNil(o.AddOrUpdateLabels) {
		return true
	}

	return false
}

// SetAddOrUpdateLabels gets a reference to the given []LabelRequestModel and assigns it to the AddOrUpdateLabels field.
func (o *NodeLabelsRequestModel) SetAddOrUpdateLabels(v []LabelRequestModel) {
	o.AddOrUpdateLabels = v
}

// GetRemoveLabelKeys returns the RemoveLabelKeys field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeLabelsRequestModel) GetRemoveLabelKeys() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.RemoveLabelKeys
}

// GetRemoveLabelKeysOk returns a tuple with the RemoveLabelKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeLabelsRequestModel) GetRemoveLabelKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.RemoveLabelKeys) {
		return nil, false
	}
	return o.RemoveLabelKeys, true
}

// HasRemoveLabelKeys returns a boolean if a field has been set.
func (o *NodeLabelsRequestModel) HasRemoveLabelKeys() bool {
	if o != nil && !IsNil(o.RemoveLabelKeys) {
		return true
	}

	return false
}

// SetRemoveLabelKeys gets a reference to the given []string and assigns it to the RemoveLabelKeys field.
func (o *NodeLabelsRequestModel) SetRemoveLabelKeys(v []string) {
	o.RemoveLabelKeys = v
}

func (o NodeLabelsRequestModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeLabelsRequestModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AddOrUpdateLabels != nil {
		toSerialize["add_or_update_labels"] = o.AddOrUpdateLabels
	}
	if o.RemoveLabelKeys != nil {
		toSerialize["remove_label_keys"] = o.RemoveLabelKeys
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NodeLabelsRequestModel) UnmarshalJSON(data []byte) (err error) {
	varNodeLabelsRequestModel := _NodeLabelsRequestModel{}

	err = json.Unmarshal(data, &varNodeLabelsRequestModel)

	if err != nil {
		return err
	}

	*o = NodeLabelsRequestModel(varNodeLabelsRequestModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "add_or_update_labels")
		delete(additionalProperties, "remove_label_keys")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNodeLabelsRequestModel struct {
	value *NodeLabelsRequestModel
	isSet bool
}

func (v NullableNodeLabelsRequestModel) Get() *NodeLabelsRequestModel {
	return v.value
}

func (v *NullableNodeLabelsRequestModel) Set(val *NodeLabelsRequestModel) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeLabelsRequestModel) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeLabelsRequestModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeLabelsRequestModel(val *NodeLabelsRequestModel) *NullableNodeLabelsRequestModel {
	return &NullableNodeLabelsRequestModel{value: val, isSet: true}
}

func (v NullableNodeLabelsRequestModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeLabelsRequestModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
