/*
kubernetes-engine API

kubernetes-engine API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kubernetesengine

import (
	"encoding/json"
	"fmt"
)

// checks if the NodePoolLabelResponseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodePoolLabelResponseModel{}

// NodePoolLabelResponseModel struct for NodePoolLabelResponseModel
type NodePoolLabelResponseModel struct {
	// 노드 풀에 적용된 레이블 목록
	Labels []LabelResponseModel `json:"labels"`
	// 노드 풀 이름
	Name string `json:"name"`
	// 노드 풀의 고유 ID
	Id                   string `json:"id"`
	AdditionalProperties map[string]interface{}
}

type _NodePoolLabelResponseModel NodePoolLabelResponseModel

// NewNodePoolLabelResponseModel instantiates a new NodePoolLabelResponseModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodePoolLabelResponseModel(labels []LabelResponseModel, name string, id string) *NodePoolLabelResponseModel {
	this := NodePoolLabelResponseModel{}
	this.Labels = labels
	this.Name = name
	this.Id = id
	return &this
}

// NewNodePoolLabelResponseModelWithDefaults instantiates a new NodePoolLabelResponseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodePoolLabelResponseModelWithDefaults() *NodePoolLabelResponseModel {
	this := NodePoolLabelResponseModel{}
	return &this
}

// GetLabels returns the Labels field value
func (o *NodePoolLabelResponseModel) GetLabels() []LabelResponseModel {
	if o == nil {
		var ret []LabelResponseModel
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *NodePoolLabelResponseModel) GetLabelsOk() ([]LabelResponseModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Labels, true
}

// SetLabels sets field value
func (o *NodePoolLabelResponseModel) SetLabels(v []LabelResponseModel) {
	o.Labels = v
}

// GetName returns the Name field value
func (o *NodePoolLabelResponseModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NodePoolLabelResponseModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NodePoolLabelResponseModel) SetName(v string) {
	o.Name = v
}

// GetId returns the Id field value
func (o *NodePoolLabelResponseModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NodePoolLabelResponseModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NodePoolLabelResponseModel) SetId(v string) {
	o.Id = v
}

func (o NodePoolLabelResponseModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodePoolLabelResponseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["labels"] = o.Labels
	toSerialize["name"] = o.Name
	toSerialize["id"] = o.Id

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NodePoolLabelResponseModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"labels",
		"name",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodePoolLabelResponseModel := _NodePoolLabelResponseModel{}

	err = json.Unmarshal(data, &varNodePoolLabelResponseModel)

	if err != nil {
		return err
	}

	*o = NodePoolLabelResponseModel(varNodePoolLabelResponseModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "labels")
		delete(additionalProperties, "name")
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNodePoolLabelResponseModel struct {
	value *NodePoolLabelResponseModel
	isSet bool
}

func (v NullableNodePoolLabelResponseModel) Get() *NodePoolLabelResponseModel {
	return v.value
}

func (v *NullableNodePoolLabelResponseModel) Set(val *NodePoolLabelResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableNodePoolLabelResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableNodePoolLabelResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodePoolLabelResponseModel(val *NodePoolLabelResponseModel) *NullableNodePoolLabelResponseModel {
	return &NullableNodePoolLabelResponseModel{value: val, isSet: true}
}

func (v NullableNodePoolLabelResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodePoolLabelResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
