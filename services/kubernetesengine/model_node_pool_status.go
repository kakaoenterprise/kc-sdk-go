/*
kubernetes-engine API

kubernetes-engine API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kubernetesengine

import (
	"encoding/json"
	"fmt"
)

// NodePoolStatus the model 'NodePoolStatus'
type NodePoolStatus string

// List of NodePoolStatus
const (
	NODEPOOLSTATUS_PENDING                     NodePoolStatus = "Pending"
	NODEPOOLSTATUS_SCALING_UP                  NodePoolStatus = "ScalingUp"
	NODEPOOLSTATUS_SCALING_DOWN                NodePoolStatus = "ScalingDown"
	NODEPOOLSTATUS_RUNNING                     NodePoolStatus = "Running"
	NODEPOOLSTATUS_FAILED                      NodePoolStatus = "Failed"
	NODEPOOLSTATUS_DELETING                    NodePoolStatus = "Deleting"
	NODEPOOLSTATUS_UPDATING                    NodePoolStatus = "Updating"
	NODEPOOLSTATUS_RUNNING__SCHEDULING_DISABLE NodePoolStatus = "Running (Scheduling Disable)"
)

// All allowed values of NodePoolStatus enum
var AllowedNodePoolStatusEnumValues = []NodePoolStatus{
	"Pending",
	"ScalingUp",
	"ScalingDown",
	"Running",
	"Failed",
	"Deleting",
	"Updating",
	"Running (Scheduling Disable)",
}

func (v *NodePoolStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NodePoolStatus(value)
	for _, existing := range AllowedNodePoolStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NodePoolStatus", value)
}

// NewNodePoolStatusFromValue returns a pointer to a valid NodePoolStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNodePoolStatusFromValue(v string) (*NodePoolStatus, error) {
	ev := NodePoolStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NodePoolStatus: valid values are %v", v, AllowedNodePoolStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NodePoolStatus) IsValid() bool {
	for _, existing := range AllowedNodePoolStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NodePoolStatus value
func (v NodePoolStatus) Ptr() *NodePoolStatus {
	return &v
}

type NullableNodePoolStatus struct {
	value *NodePoolStatus
	isSet bool
}

func (v NullableNodePoolStatus) Get() *NodePoolStatus {
	return v.value
}

func (v *NullableNodePoolStatus) Set(val *NodePoolStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableNodePoolStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableNodePoolStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodePoolStatus(val *NodePoolStatus) *NullableNodePoolStatus {
	return &NullableNodePoolStatus{value: val, isSet: true}
}

func (v NullableNodePoolStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodePoolStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
