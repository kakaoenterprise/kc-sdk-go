/*
kubernetes-engine API

kubernetes-engine API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kubernetesengine

import (
	"encoding/json"
	"fmt"
)

// NodePoolTaintEffect the model 'NodePoolTaintEffect'
type NodePoolTaintEffect string

// List of NodePoolTaintEffect
const (
	NODEPOOLTAINTEFFECT_NO_EXECUTE         NodePoolTaintEffect = "NoExecute"
	NODEPOOLTAINTEFFECT_NO_SCHEDULE        NodePoolTaintEffect = "NoSchedule"
	NODEPOOLTAINTEFFECT_PREFER_NO_SCHEDULE NodePoolTaintEffect = "PreferNoSchedule"
)

// All allowed values of NodePoolTaintEffect enum
var AllowedNodePoolTaintEffectEnumValues = []NodePoolTaintEffect{
	"NoExecute",
	"NoSchedule",
	"PreferNoSchedule",
}

func (v *NodePoolTaintEffect) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NodePoolTaintEffect(value)
	for _, existing := range AllowedNodePoolTaintEffectEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NodePoolTaintEffect", value)
}

// NewNodePoolTaintEffectFromValue returns a pointer to a valid NodePoolTaintEffect
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNodePoolTaintEffectFromValue(v string) (*NodePoolTaintEffect, error) {
	ev := NodePoolTaintEffect(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NodePoolTaintEffect: valid values are %v", v, AllowedNodePoolTaintEffectEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NodePoolTaintEffect) IsValid() bool {
	for _, existing := range AllowedNodePoolTaintEffectEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NodePoolTaintEffect value
func (v NodePoolTaintEffect) Ptr() *NodePoolTaintEffect {
	return &v
}

type NullableNodePoolTaintEffect struct {
	value *NodePoolTaintEffect
	isSet bool
}

func (v NullableNodePoolTaintEffect) Get() *NodePoolTaintEffect {
	return v.value
}

func (v *NullableNodePoolTaintEffect) Set(val *NodePoolTaintEffect) {
	v.value = val
	v.isSet = true
}

func (v NullableNodePoolTaintEffect) IsSet() bool {
	return v.isSet
}

func (v *NullableNodePoolTaintEffect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodePoolTaintEffect(val *NodePoolTaintEffect) *NullableNodePoolTaintEffect {
	return &NullableNodePoolTaintEffect{value: val, isSet: true}
}

func (v NullableNodePoolTaintEffect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodePoolTaintEffect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
