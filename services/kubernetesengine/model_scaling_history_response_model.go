/*
kubernetes-engine API

kubernetes-engine API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kubernetesengine

import (
	"encoding/json"
	"fmt"
)

// checks if the ScalingHistoryResponseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScalingHistoryResponseModel{}

// ScalingHistoryResponseModel struct for ScalingHistoryResponseModel
type ScalingHistoryResponseModel struct {
	// 이력에 대한 설명
	Description string `json:"description"`
	// 이벤트 발생 시간
	OccurredTime string `json:"occurred_time"`
	// 상태값
	State                string `json:"state"`
	AdditionalProperties map[string]interface{}
}

type _ScalingHistoryResponseModel ScalingHistoryResponseModel

// NewScalingHistoryResponseModel instantiates a new ScalingHistoryResponseModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScalingHistoryResponseModel(description string, occurredTime string, state string) *ScalingHistoryResponseModel {
	this := ScalingHistoryResponseModel{}
	this.Description = description
	this.OccurredTime = occurredTime
	this.State = state
	return &this
}

// NewScalingHistoryResponseModelWithDefaults instantiates a new ScalingHistoryResponseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScalingHistoryResponseModelWithDefaults() *ScalingHistoryResponseModel {
	this := ScalingHistoryResponseModel{}
	return &this
}

// GetDescription returns the Description field value
func (o *ScalingHistoryResponseModel) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ScalingHistoryResponseModel) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ScalingHistoryResponseModel) SetDescription(v string) {
	o.Description = v
}

// GetOccurredTime returns the OccurredTime field value
func (o *ScalingHistoryResponseModel) GetOccurredTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OccurredTime
}

// GetOccurredTimeOk returns a tuple with the OccurredTime field value
// and a boolean to check if the value has been set.
func (o *ScalingHistoryResponseModel) GetOccurredTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OccurredTime, true
}

// SetOccurredTime sets field value
func (o *ScalingHistoryResponseModel) SetOccurredTime(v string) {
	o.OccurredTime = v
}

// GetState returns the State field value
func (o *ScalingHistoryResponseModel) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ScalingHistoryResponseModel) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ScalingHistoryResponseModel) SetState(v string) {
	o.State = v
}

func (o ScalingHistoryResponseModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScalingHistoryResponseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["occurred_time"] = o.OccurredTime
	toSerialize["state"] = o.State

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ScalingHistoryResponseModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"occurred_time",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScalingHistoryResponseModel := _ScalingHistoryResponseModel{}

	err = json.Unmarshal(data, &varScalingHistoryResponseModel)

	if err != nil {
		return err
	}

	*o = ScalingHistoryResponseModel(varScalingHistoryResponseModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "occurred_time")
		delete(additionalProperties, "state")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableScalingHistoryResponseModel struct {
	value *ScalingHistoryResponseModel
	isSet bool
}

func (v NullableScalingHistoryResponseModel) Get() *ScalingHistoryResponseModel {
	return v.value
}

func (v *NullableScalingHistoryResponseModel) Set(val *ScalingHistoryResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableScalingHistoryResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableScalingHistoryResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScalingHistoryResponseModel(val *ScalingHistoryResponseModel) *NullableScalingHistoryResponseModel {
	return &NullableScalingHistoryResponseModel{value: val, isSet: true}
}

func (v NullableScalingHistoryResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScalingHistoryResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
