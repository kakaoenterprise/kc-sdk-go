/*
kubernetes-engine API

kubernetes-engine API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kubernetesengine

import (
	"encoding/json"
	"fmt"
)

// checks if the TaintRequestModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaintRequestModel{}

// TaintRequestModel struct for TaintRequestModel
type TaintRequestModel struct {
	// 테인트 키
	Key string `json:"key"`
	// 테인트 값
	Value string `json:"value"`
	// 테인트(해당 노드에 파드가 스케줄되지 않도록 하는 정책) 효과 <br/> - `NoExecute`: 새로운 파드는 스케줄되지 않고, 기존에 실행 중인 파드도 축출(evict)됨  <br/> - `NoSchedule`: 새로운 파드는 해당 노드에 스케줄되지 않음 (이미 실행 중인 파드는 영향 없음)  <br/> - `PreferNoSchedule`: 가능한 경우 파드를 스케줄하지 않지만, 꼭 필요하면 스케줄될 수 있음(소프트 제약)
	Effect               NodePoolTaintEffect `json:"effect"`
	AdditionalProperties map[string]interface{}
}

type _TaintRequestModel TaintRequestModel

// NewTaintRequestModel instantiates a new TaintRequestModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaintRequestModel(key string, value string, effect NodePoolTaintEffect) *TaintRequestModel {
	this := TaintRequestModel{}
	this.Key = key
	this.Value = value
	this.Effect = effect
	return &this
}

// NewTaintRequestModelWithDefaults instantiates a new TaintRequestModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaintRequestModelWithDefaults() *TaintRequestModel {
	this := TaintRequestModel{}
	return &this
}

// GetKey returns the Key field value
func (o *TaintRequestModel) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *TaintRequestModel) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *TaintRequestModel) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *TaintRequestModel) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TaintRequestModel) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TaintRequestModel) SetValue(v string) {
	o.Value = v
}

// GetEffect returns the Effect field value
func (o *TaintRequestModel) GetEffect() NodePoolTaintEffect {
	if o == nil {
		var ret NodePoolTaintEffect
		return ret
	}

	return o.Effect
}

// GetEffectOk returns a tuple with the Effect field value
// and a boolean to check if the value has been set.
func (o *TaintRequestModel) GetEffectOk() (*NodePoolTaintEffect, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Effect, true
}

// SetEffect sets field value
func (o *TaintRequestModel) SetEffect(v NodePoolTaintEffect) {
	o.Effect = v
}

func (o TaintRequestModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaintRequestModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["value"] = o.Value
	toSerialize["effect"] = o.Effect

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TaintRequestModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"value",
		"effect",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaintRequestModel := _TaintRequestModel{}

	err = json.Unmarshal(data, &varTaintRequestModel)

	if err != nil {
		return err
	}

	*o = TaintRequestModel(varTaintRequestModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "value")
		delete(additionalProperties, "effect")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTaintRequestModel struct {
	value *TaintRequestModel
	isSet bool
}

func (v NullableTaintRequestModel) Get() *TaintRequestModel {
	return v.value
}

func (v *NullableTaintRequestModel) Set(val *TaintRequestModel) {
	v.value = val
	v.isSet = true
}

func (v NullableTaintRequestModel) IsSet() bool {
	return v.isSet
}

func (v *NullableTaintRequestModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaintRequestModel(val *TaintRequestModel) *NullableTaintRequestModel {
	return &NullableTaintRequestModel{value: val, isSet: true}
}

func (v NullableTaintRequestModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaintRequestModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
