/*
kubernetes-engine API

kubernetes-engine API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kubernetesengine

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateK8sClusterNodePoolNodeLabelsRequestModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateK8sClusterNodePoolNodeLabelsRequestModel{}

// UpdateK8sClusterNodePoolNodeLabelsRequestModel struct for UpdateK8sClusterNodePoolNodeLabelsRequestModel
type UpdateK8sClusterNodePoolNodeLabelsRequestModel struct {
	// 레이블 정보
	Labels               NodeLabelsRequestModel `json:"labels"`
	AdditionalProperties map[string]interface{}
}

type _UpdateK8sClusterNodePoolNodeLabelsRequestModel UpdateK8sClusterNodePoolNodeLabelsRequestModel

// NewUpdateK8sClusterNodePoolNodeLabelsRequestModel instantiates a new UpdateK8sClusterNodePoolNodeLabelsRequestModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateK8sClusterNodePoolNodeLabelsRequestModel(labels NodeLabelsRequestModel) *UpdateK8sClusterNodePoolNodeLabelsRequestModel {
	this := UpdateK8sClusterNodePoolNodeLabelsRequestModel{}
	this.Labels = labels
	return &this
}

// NewUpdateK8sClusterNodePoolNodeLabelsRequestModelWithDefaults instantiates a new UpdateK8sClusterNodePoolNodeLabelsRequestModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateK8sClusterNodePoolNodeLabelsRequestModelWithDefaults() *UpdateK8sClusterNodePoolNodeLabelsRequestModel {
	this := UpdateK8sClusterNodePoolNodeLabelsRequestModel{}
	return &this
}

// GetLabels returns the Labels field value
func (o *UpdateK8sClusterNodePoolNodeLabelsRequestModel) GetLabels() NodeLabelsRequestModel {
	if o == nil {
		var ret NodeLabelsRequestModel
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *UpdateK8sClusterNodePoolNodeLabelsRequestModel) GetLabelsOk() (*NodeLabelsRequestModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Labels, true
}

// SetLabels sets field value
func (o *UpdateK8sClusterNodePoolNodeLabelsRequestModel) SetLabels(v NodeLabelsRequestModel) {
	o.Labels = v
}

func (o UpdateK8sClusterNodePoolNodeLabelsRequestModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateK8sClusterNodePoolNodeLabelsRequestModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["labels"] = o.Labels

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateK8sClusterNodePoolNodeLabelsRequestModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"labels",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateK8sClusterNodePoolNodeLabelsRequestModel := _UpdateK8sClusterNodePoolNodeLabelsRequestModel{}

	err = json.Unmarshal(data, &varUpdateK8sClusterNodePoolNodeLabelsRequestModel)

	if err != nil {
		return err
	}

	*o = UpdateK8sClusterNodePoolNodeLabelsRequestModel(varUpdateK8sClusterNodePoolNodeLabelsRequestModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "labels")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateK8sClusterNodePoolNodeLabelsRequestModel struct {
	value *UpdateK8sClusterNodePoolNodeLabelsRequestModel
	isSet bool
}

func (v NullableUpdateK8sClusterNodePoolNodeLabelsRequestModel) Get() *UpdateK8sClusterNodePoolNodeLabelsRequestModel {
	return v.value
}

func (v *NullableUpdateK8sClusterNodePoolNodeLabelsRequestModel) Set(val *UpdateK8sClusterNodePoolNodeLabelsRequestModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateK8sClusterNodePoolNodeLabelsRequestModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateK8sClusterNodePoolNodeLabelsRequestModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateK8sClusterNodePoolNodeLabelsRequestModel(val *UpdateK8sClusterNodePoolNodeLabelsRequestModel) *NullableUpdateK8sClusterNodePoolNodeLabelsRequestModel {
	return &NullableUpdateK8sClusterNodePoolNodeLabelsRequestModel{value: val, isSet: true}
}

func (v NullableUpdateK8sClusterNodePoolNodeLabelsRequestModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateK8sClusterNodePoolNodeLabelsRequestModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
