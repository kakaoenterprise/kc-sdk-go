/*
kubernetes-engine API

kubernetes-engine API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kubernetesengine

import (
	"encoding/json"
	"fmt"
)

// checks if the UpgradeResponseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradeResponseModel{}

// UpgradeResponseModel struct for UpgradeResponseModel
type UpgradeResponseModel struct {
	Upgradable []KubernetesEngineV1ApiListClusterUpgradableVersionsModelUpgradableVersionResponseModel `json:"upgradable,omitempty"`
	// 현재 클러스터 버전
	Current              CurrentOMTResponseModel `json:"current"`
	AdditionalProperties map[string]interface{}
}

type _UpgradeResponseModel UpgradeResponseModel

// NewUpgradeResponseModel instantiates a new UpgradeResponseModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeResponseModel(current CurrentOMTResponseModel) *UpgradeResponseModel {
	this := UpgradeResponseModel{}
	this.Current = current
	return &this
}

// NewUpgradeResponseModelWithDefaults instantiates a new UpgradeResponseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeResponseModelWithDefaults() *UpgradeResponseModel {
	this := UpgradeResponseModel{}
	return &this
}

// GetUpgradable returns the Upgradable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeResponseModel) GetUpgradable() []KubernetesEngineV1ApiListClusterUpgradableVersionsModelUpgradableVersionResponseModel {
	if o == nil {
		var ret []KubernetesEngineV1ApiListClusterUpgradableVersionsModelUpgradableVersionResponseModel
		return ret
	}
	return o.Upgradable
}

// GetUpgradableOk returns a tuple with the Upgradable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeResponseModel) GetUpgradableOk() ([]KubernetesEngineV1ApiListClusterUpgradableVersionsModelUpgradableVersionResponseModel, bool) {
	if o == nil || IsNil(o.Upgradable) {
		return nil, false
	}
	return o.Upgradable, true
}

// HasUpgradable returns a boolean if a field has been set.
func (o *UpgradeResponseModel) HasUpgradable() bool {
	if o != nil && !IsNil(o.Upgradable) {
		return true
	}

	return false
}

// SetUpgradable gets a reference to the given []KubernetesEngineV1ApiListClusterUpgradableVersionsModelUpgradableVersionResponseModel and assigns it to the Upgradable field.
func (o *UpgradeResponseModel) SetUpgradable(v []KubernetesEngineV1ApiListClusterUpgradableVersionsModelUpgradableVersionResponseModel) {
	o.Upgradable = v
}

// GetCurrent returns the Current field value
func (o *UpgradeResponseModel) GetCurrent() CurrentOMTResponseModel {
	if o == nil {
		var ret CurrentOMTResponseModel
		return ret
	}

	return o.Current
}

// GetCurrentOk returns a tuple with the Current field value
// and a boolean to check if the value has been set.
func (o *UpgradeResponseModel) GetCurrentOk() (*CurrentOMTResponseModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Current, true
}

// SetCurrent sets field value
func (o *UpgradeResponseModel) SetCurrent(v CurrentOMTResponseModel) {
	o.Current = v
}

func (o UpgradeResponseModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradeResponseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Upgradable != nil {
		toSerialize["upgradable"] = o.Upgradable
	}
	toSerialize["current"] = o.Current

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpgradeResponseModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"current",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpgradeResponseModel := _UpgradeResponseModel{}

	err = json.Unmarshal(data, &varUpgradeResponseModel)

	if err != nil {
		return err
	}

	*o = UpgradeResponseModel(varUpgradeResponseModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "upgradable")
		delete(additionalProperties, "current")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpgradeResponseModel struct {
	value *UpgradeResponseModel
	isSet bool
}

func (v NullableUpgradeResponseModel) Get() *UpgradeResponseModel {
	return v.value
}

func (v *NullableUpgradeResponseModel) Set(val *UpgradeResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeResponseModel(val *UpgradeResponseModel) *NullableUpgradeResponseModel {
	return &NullableUpgradeResponseModel{value: val, isSet: true}
}

func (v NullableUpgradeResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
