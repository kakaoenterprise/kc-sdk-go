/*
kubernetes-engine API

Testing ClustersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package kubernetesengine

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_kubernetesengine_ClustersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ClustersAPIService CreateCluster", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ClustersAPI.CreateCluster(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService DeleteCluster", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string

		httpRes, err := apiClient.ClustersAPI.DeleteCluster(context.Background(), clusterName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService DeleteClusterNodes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string

		httpRes, err := apiClient.ClustersAPI.DeleteClusterNodes(context.Background(), clusterName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService GetCluster", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string

		resp, httpRes, err := apiClient.ClustersAPI.GetCluster(context.Background(), clusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService GetClusterKubeconfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string

		resp, httpRes, err := apiClient.ClustersAPI.GetClusterKubeconfig(context.Background(), clusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService ListClusterNodes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string

		resp, httpRes, err := apiClient.ClustersAPI.ListClusterNodes(context.Background(), clusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService ListClusterUpgradableVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string

		resp, httpRes, err := apiClient.ClustersAPI.ListClusterUpgradableVersions(context.Background(), clusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService ListClusters", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ClustersAPI.ListClusters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService SetClusterNodesCordon", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string

		httpRes, err := apiClient.ClustersAPI.SetClusterNodesCordon(context.Background(), clusterName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService UpdateCluster", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string

		resp, httpRes, err := apiClient.ClustersAPI.UpdateCluster(context.Background(), clusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService UpgradeCluster", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string

		resp, httpRes, err := apiClient.ClustersAPI.UpgradeCluster(context.Background(), clusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
