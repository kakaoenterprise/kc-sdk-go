/*
kubernetes-engine API

Testing NodePoolsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package kubernetesengine

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_kubernetesengine_NodePoolsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NodePoolsAPIService CreateNodePool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string

		resp, httpRes, err := apiClient.NodePoolsAPI.CreateNodePool(context.Background(), clusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodePoolsAPIService DeleteNodePool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string
		var nodePoolName string

		httpRes, err := apiClient.NodePoolsAPI.DeleteNodePool(context.Background(), clusterName, nodePoolName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodePoolsAPIService GetNodePool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string
		var nodePoolName string

		resp, httpRes, err := apiClient.NodePoolsAPI.GetNodePool(context.Background(), clusterName, nodePoolName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodePoolsAPIService ListNodePoolNodes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string
		var nodePoolName string

		resp, httpRes, err := apiClient.NodePoolsAPI.ListNodePoolNodes(context.Background(), clusterName, nodePoolName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodePoolsAPIService ListNodePools", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string

		resp, httpRes, err := apiClient.NodePoolsAPI.ListNodePools(context.Background(), clusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodePoolsAPIService SetNodePoolNodeLabel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string
		var nodePoolName string

		resp, httpRes, err := apiClient.NodePoolsAPI.SetNodePoolNodeLabel(context.Background(), clusterName, nodePoolName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodePoolsAPIService SetNodePoolUserScript", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string
		var nodePoolName string

		resp, httpRes, err := apiClient.NodePoolsAPI.SetNodePoolUserScript(context.Background(), clusterName, nodePoolName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodePoolsAPIService UpdateNodePool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string
		var nodePoolName string

		resp, httpRes, err := apiClient.NodePoolsAPI.UpdateNodePool(context.Background(), clusterName, nodePoolName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodePoolsAPIService UpgradeNodePool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string
		var nodePoolName string

		resp, httpRes, err := apiClient.NodePoolsAPI.UpgradeNodePool(context.Background(), clusterName, nodePoolName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
