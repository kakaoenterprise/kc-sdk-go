/*
kubernetes-engine API

Testing ScalingAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package kubernetesengine

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_kubernetesengine_ScalingAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ScalingAPIService CreateNodePoolScheduledScaling", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string
		var nodePoolName string

		resp, httpRes, err := apiClient.ScalingAPI.CreateNodePoolScheduledScaling(context.Background(), clusterName, nodePoolName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScalingAPIService DeleteNodePoolScheduledScaling", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string
		var nodePoolName string
		var scheduleName string

		httpRes, err := apiClient.ScalingAPI.DeleteNodePoolScheduledScaling(context.Background(), clusterName, nodePoolName, scheduleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScalingAPIService ListNodePoolScheduledScalings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string
		var nodePoolName string

		resp, httpRes, err := apiClient.ScalingAPI.ListNodePoolScheduledScalings(context.Background(), clusterName, nodePoolName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScalingAPIService SetNodePoolResourceBasedAutoScaling", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterName string
		var nodePoolName string

		resp, httpRes, err := apiClient.ScalingAPI.SetNodePoolResourceBasedAutoScaling(context.Background(), clusterName, nodePoolName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
