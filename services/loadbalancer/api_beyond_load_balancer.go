/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type BeyondLoadBalancerAPI interface {

	/*
		CreateHaGroup Create HA group

		[고가용성 그룹(High Availability Group)](https://docs.kakaocloud.com/service/bns/lb/main/lb-high-availability-group)을 생성합니다.
	하나의 HA 그룹은 다중 가용 영역에 로드 밸런서를 배치해 장애 대응력을 높이기 위한 상위 논리 구조로, 생성 시 기본 서브넷 및 로드 밸런서 정보를 함께 지정합니다.

	:::info 안내
	고가용성 그룹 생성 후, 리스너 및 대상 그룹은 별도의 API를 통해 개별 로드 밸런서 단위로 설정해야 합니다.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiCreateHaGroupRequest
	*/
	CreateHaGroup(ctx context.Context) ApiCreateHaGroupRequest

	// CreateHaGroupExecute executes the request
	//  @return BnsLoadBalancerV1ApiCreateHaGroupModelResponseBeyondLoadBalancerModel
	CreateHaGroupExecute(r ApiCreateHaGroupRequest) (*BnsLoadBalancerV1ApiCreateHaGroupModelResponseBeyondLoadBalancerModel, *http.Response, error)

	/*
		DeleteHaGroup Delete HA group

		특정 고가용성 그룹(High Availability Group)을 삭제합니다.
	해당 그룹에 연결된 로드 밸런서, 리스너, 대상 그룹 등 모든 관련 리소스는 함께 삭제되지 않습니다.

	:::caution 주의
	- 로드 밸런서를 삭제하면 연결된 네트워크 리소스도 함께 삭제되므로, 삭제 전에 구성을 반드시 확인해야 합니다.
	- 삭제된 리소스는 복구할 수 없습니다.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param beyondLoadBalancerId 삭제할 고가용성 그룹의 ID
		@return ApiDeleteHaGroupRequest
	*/
	DeleteHaGroup(ctx context.Context, beyondLoadBalancerId string) ApiDeleteHaGroupRequest

	// DeleteHaGroupExecute executes the request
	DeleteHaGroupExecute(r ApiDeleteHaGroupRequest) (*http.Response, error)

	/*
		DetachHaGroupLoadBalancer Detach HA group load balancer

		지정한 고가용성 그룹(High Availability Group)에서 로드 밸런서를 연결 해제합니다.

	:::caution 주의
	- 해당 로드 밸런서가 고가용성 그룹에서 마지막으로 연결된 인스턴스인 경우, 전체 트래픽 분산 기능이 중단될 수 있습니다.
	- 삭제 전 반드시 가용 영역 구성 및 연결 상태를 확인해야 합니다.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param beyondLoadBalancerId 고가용성 그룹의 ID
		@param loadBalancerId 연결 해제할 로드 밸런서의 ID
		@return ApiDetachHaGroupLoadBalancerRequest
	*/
	DetachHaGroupLoadBalancer(ctx context.Context, beyondLoadBalancerId string, loadBalancerId string) ApiDetachHaGroupLoadBalancerRequest

	// DetachHaGroupLoadBalancerExecute executes the request
	DetachHaGroupLoadBalancerExecute(r ApiDetachHaGroupLoadBalancerRequest) (*http.Response, error)

	/*
		GetHaGroup Get HA group

		지정한 고가용성 그룹(High Availability Group)의 상세 정보를 조회합니다.

	:::info 안내
	고가용성 그룹은 여러 로드 밸런서를 묶어 고가용성을 제공하는 논리적 그룹으로, 해당 API를 통해 고가용성 그룹에 대한 메타데이터와 연결된 네트워크 구성을 확인할 수 있습니다.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param beyondLoadBalancerId 조회할 고가용성 그룹의 ID
		@return ApiGetHaGroupRequest
	*/
	GetHaGroup(ctx context.Context, beyondLoadBalancerId string) ApiGetHaGroupRequest

	// GetHaGroupExecute executes the request
	//  @return BnsLoadBalancerV1ApiGetHaGroupModelResponseBeyondLoadBalancerModel
	GetHaGroupExecute(r ApiGetHaGroupRequest) (*BnsLoadBalancerV1ApiGetHaGroupModelResponseBeyondLoadBalancerModel, *http.Response, error)

	/*
		ListHaGroups List HA groups

		고가용성 그룹(High Availability Group)의 전체 목록을 조회합니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiListHaGroupsRequest
	*/
	ListHaGroups(ctx context.Context) ApiListHaGroupsRequest

	// ListHaGroupsExecute executes the request
	//  @return BeyondLoadBalancerListModel
	ListHaGroupsExecute(r ApiListHaGroupsRequest) (*BeyondLoadBalancerListModel, *http.Response, error)

	/*
		UpdateHaGroup Update HA group

		특정 고가용성 그룹의 설명을 수정합니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param beyondLoadBalancerId 수정할 고가용성 로드 밸런서 ID
		@return ApiUpdateHaGroupRequest
	*/
	UpdateHaGroup(ctx context.Context, beyondLoadBalancerId string) ApiUpdateHaGroupRequest

	// UpdateHaGroupExecute executes the request
	//  @return BnsLoadBalancerV1ApiUpdateHaGroupModelResponseBeyondLoadBalancerModel
	UpdateHaGroupExecute(r ApiUpdateHaGroupRequest) (*BnsLoadBalancerV1ApiUpdateHaGroupModelResponseBeyondLoadBalancerModel, *http.Response, error)

	/*
		UpdateHaGroupLoadBalancer Update HA group load balancer

		고가용성 로드 밸런서에 새로운 가용 영역의 로드 밸런서를 추가합니다.

	:::info 안내
	- 기존에 연결되어 있던 로드 밸런서를 포함하여 새로운 가용 영역의 로드 밸런서를 추가해야 합니다.
	- 이미 연결된 가용 영역에 대해 중복 연결을 시도하면 오류가 발생할 수 있습니다.
	- 최소 하나 이상의 로드 밸런서 연결이 필요하며, 연결된 로드 밸런서는 [Detach HA group load balancer](https://docs.kakaocloud.com/openapi/bns/lb/detach-ha-group-load-balancer) API를 통해 연결 해제할 수 있습니다.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param beyondLoadBalancerId 연결 대상 고가용성 로드 밸런서 ID
		@return ApiUpdateHaGroupLoadBalancerRequest
	*/
	UpdateHaGroupLoadBalancer(ctx context.Context, beyondLoadBalancerId string) ApiUpdateHaGroupLoadBalancerRequest

	// UpdateHaGroupLoadBalancerExecute executes the request
	//  @return BnsLoadBalancerV1ApiUpdateHaGroupLoadBalancerModelResponseBeyondLoadBalancerModel
	UpdateHaGroupLoadBalancerExecute(r ApiUpdateHaGroupLoadBalancerRequest) (*BnsLoadBalancerV1ApiUpdateHaGroupLoadBalancerModelResponseBeyondLoadBalancerModel, *http.Response, error)
}

// BeyondLoadBalancerAPIService BeyondLoadBalancerAPI service
type BeyondLoadBalancerAPIService service

type ApiCreateHaGroupRequest struct {
	ctx               context.Context
	ApiService        BeyondLoadBalancerAPI
	xAuthToken        *string
	bodyCreateHaGroup *BodyCreateHaGroup
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiCreateHaGroupRequest) XAuthToken(xAuthToken string) ApiCreateHaGroupRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiCreateHaGroupRequest) BodyCreateHaGroup(bodyCreateHaGroup BodyCreateHaGroup) ApiCreateHaGroupRequest {
	r.bodyCreateHaGroup = &bodyCreateHaGroup
	return r
}

func (r ApiCreateHaGroupRequest) Execute() (*BnsLoadBalancerV1ApiCreateHaGroupModelResponseBeyondLoadBalancerModel, *http.Response, error) {
	return r.ApiService.CreateHaGroupExecute(r)
}

/*
CreateHaGroup Create HA group

[고가용성 그룹(High Availability Group)](https://docs.kakaocloud.com/service/bns/lb/main/lb-high-availability-group)을 생성합니다.
하나의 HA 그룹은 다중 가용 영역에 로드 밸런서를 배치해 장애 대응력을 높이기 위한 상위 논리 구조로, 생성 시 기본 서브넷 및 로드 밸런서 정보를 함께 지정합니다.

:::info 안내
고가용성 그룹 생성 후, 리스너 및 대상 그룹은 별도의 API를 통해 개별 로드 밸런서 단위로 설정해야 합니다.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateHaGroupRequest
*/
func (a *BeyondLoadBalancerAPIService) CreateHaGroup(ctx context.Context) ApiCreateHaGroupRequest {
	return ApiCreateHaGroupRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BnsLoadBalancerV1ApiCreateHaGroupModelResponseBeyondLoadBalancerModel
func (a *BeyondLoadBalancerAPIService) CreateHaGroupExecute(r ApiCreateHaGroupRequest) (*BnsLoadBalancerV1ApiCreateHaGroupModelResponseBeyondLoadBalancerModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BnsLoadBalancerV1ApiCreateHaGroupModelResponseBeyondLoadBalancerModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BeyondLoadBalancerAPIService.CreateHaGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/beyond-load-balancers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}
	if r.bodyCreateHaGroup == nil {
		return localVarReturnValue, nil, reportError("bodyCreateHaGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	// body params
	localVarPostBody = r.bodyCreateHaGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteHaGroupRequest struct {
	ctx                  context.Context
	ApiService           BeyondLoadBalancerAPI
	beyondLoadBalancerId string
	xAuthToken           *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiDeleteHaGroupRequest) XAuthToken(xAuthToken string) ApiDeleteHaGroupRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiDeleteHaGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteHaGroupExecute(r)
}

/*
DeleteHaGroup Delete HA group

특정 고가용성 그룹(High Availability Group)을 삭제합니다.
해당 그룹에 연결된 로드 밸런서, 리스너, 대상 그룹 등 모든 관련 리소스는 함께 삭제되지 않습니다.

:::caution 주의
- 로드 밸런서를 삭제하면 연결된 네트워크 리소스도 함께 삭제되므로, 삭제 전에 구성을 반드시 확인해야 합니다.
- 삭제된 리소스는 복구할 수 없습니다.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param beyondLoadBalancerId 삭제할 고가용성 그룹의 ID
	@return ApiDeleteHaGroupRequest
*/
func (a *BeyondLoadBalancerAPIService) DeleteHaGroup(ctx context.Context, beyondLoadBalancerId string) ApiDeleteHaGroupRequest {
	return ApiDeleteHaGroupRequest{
		ApiService:           a,
		ctx:                  ctx,
		beyondLoadBalancerId: beyondLoadBalancerId,
	}
}

// Execute executes the request
func (a *BeyondLoadBalancerAPIService) DeleteHaGroupExecute(r ApiDeleteHaGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BeyondLoadBalancerAPIService.DeleteHaGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/beyond-load-balancers/{beyond_load_balancer_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"beyond_load_balancer_id"+"}", url.PathEscape(parameterValueToString(r.beyondLoadBalancerId, "beyondLoadBalancerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDetachHaGroupLoadBalancerRequest struct {
	ctx                  context.Context
	ApiService           BeyondLoadBalancerAPI
	beyondLoadBalancerId string
	loadBalancerId       string
	xAuthToken           *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiDetachHaGroupLoadBalancerRequest) XAuthToken(xAuthToken string) ApiDetachHaGroupLoadBalancerRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiDetachHaGroupLoadBalancerRequest) Execute() (*http.Response, error) {
	return r.ApiService.DetachHaGroupLoadBalancerExecute(r)
}

/*
DetachHaGroupLoadBalancer Detach HA group load balancer

지정한 고가용성 그룹(High Availability Group)에서 로드 밸런서를 연결 해제합니다.

:::caution 주의
- 해당 로드 밸런서가 고가용성 그룹에서 마지막으로 연결된 인스턴스인 경우, 전체 트래픽 분산 기능이 중단될 수 있습니다.
- 삭제 전 반드시 가용 영역 구성 및 연결 상태를 확인해야 합니다.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param beyondLoadBalancerId 고가용성 그룹의 ID
	@param loadBalancerId 연결 해제할 로드 밸런서의 ID
	@return ApiDetachHaGroupLoadBalancerRequest
*/
func (a *BeyondLoadBalancerAPIService) DetachHaGroupLoadBalancer(ctx context.Context, beyondLoadBalancerId string, loadBalancerId string) ApiDetachHaGroupLoadBalancerRequest {
	return ApiDetachHaGroupLoadBalancerRequest{
		ApiService:           a,
		ctx:                  ctx,
		beyondLoadBalancerId: beyondLoadBalancerId,
		loadBalancerId:       loadBalancerId,
	}
}

// Execute executes the request
func (a *BeyondLoadBalancerAPIService) DetachHaGroupLoadBalancerExecute(r ApiDetachHaGroupLoadBalancerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BeyondLoadBalancerAPIService.DetachHaGroupLoadBalancer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/beyond-load-balancers/{beyond_load_balancer_id}/subnets/{load_balancer_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"beyond_load_balancer_id"+"}", url.PathEscape(parameterValueToString(r.beyondLoadBalancerId, "beyondLoadBalancerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"load_balancer_id"+"}", url.PathEscape(parameterValueToString(r.loadBalancerId, "loadBalancerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetHaGroupRequest struct {
	ctx                  context.Context
	ApiService           BeyondLoadBalancerAPI
	beyondLoadBalancerId string
	xAuthToken           *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiGetHaGroupRequest) XAuthToken(xAuthToken string) ApiGetHaGroupRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiGetHaGroupRequest) Execute() (*BnsLoadBalancerV1ApiGetHaGroupModelResponseBeyondLoadBalancerModel, *http.Response, error) {
	return r.ApiService.GetHaGroupExecute(r)
}

/*
GetHaGroup Get HA group

지정한 고가용성 그룹(High Availability Group)의 상세 정보를 조회합니다.

:::info 안내
고가용성 그룹은 여러 로드 밸런서를 묶어 고가용성을 제공하는 논리적 그룹으로, 해당 API를 통해 고가용성 그룹에 대한 메타데이터와 연결된 네트워크 구성을 확인할 수 있습니다.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param beyondLoadBalancerId 조회할 고가용성 그룹의 ID
	@return ApiGetHaGroupRequest
*/
func (a *BeyondLoadBalancerAPIService) GetHaGroup(ctx context.Context, beyondLoadBalancerId string) ApiGetHaGroupRequest {
	return ApiGetHaGroupRequest{
		ApiService:           a,
		ctx:                  ctx,
		beyondLoadBalancerId: beyondLoadBalancerId,
	}
}

// Execute executes the request
//
//	@return BnsLoadBalancerV1ApiGetHaGroupModelResponseBeyondLoadBalancerModel
func (a *BeyondLoadBalancerAPIService) GetHaGroupExecute(r ApiGetHaGroupRequest) (*BnsLoadBalancerV1ApiGetHaGroupModelResponseBeyondLoadBalancerModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BnsLoadBalancerV1ApiGetHaGroupModelResponseBeyondLoadBalancerModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BeyondLoadBalancerAPIService.GetHaGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/beyond-load-balancers/{beyond_load_balancer_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"beyond_load_balancer_id"+"}", url.PathEscape(parameterValueToString(r.beyondLoadBalancerId, "beyondLoadBalancerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListHaGroupsRequest struct {
	ctx                context.Context
	ApiService         BeyondLoadBalancerAPI
	xAuthToken         *string
	id                 *string
	name               *string
	dnsName            *string
	scheme             *Scheme
	provisioningStatus *ProvisioningStatus
	operatingStatus    *LoadBalancerOperatingStatus
	type_              *LoadBalancerType
	vpcName            *string
	vpcId              *string
	createdAt          *string
	updatedAt          *string
	sortKeys           *string
	sortDirs           *string
	limit              *int32
	offset             *int32
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiListHaGroupsRequest) XAuthToken(xAuthToken string) ApiListHaGroupsRequest {
	r.xAuthToken = &xAuthToken
	return r
}

// 조회할 고가용성 그룹 ID
func (r ApiListHaGroupsRequest) Id(id string) ApiListHaGroupsRequest {
	r.id = &id
	return r
}

// 고가용성 그룹 이름
func (r ApiListHaGroupsRequest) Name(name string) ApiListHaGroupsRequest {
	r.name = &name
	return r
}

// DNS 이름
func (r ApiListHaGroupsRequest) DnsName(dnsName string) ApiListHaGroupsRequest {
	r.dnsName = &dnsName
	return r
}

// 접근 방식 &lt;br/&gt; - &#x60;internet-facing&#x60;: 인터넷과 연결됨 &lt;br/&gt; - &#x60;internal&#x60;: 내부 전용
func (r ApiListHaGroupsRequest) Scheme(scheme Scheme) ApiListHaGroupsRequest {
	r.scheme = &scheme
	return r
}

// 프로비저닝 상태 &lt;br/&gt; - &#x60;ACTIVE&#x60;: 활성 상태 &lt;br/&gt; - &#x60;DELETED&#x60;: 삭제됨 &lt;br/&gt; - &#x60;ERROR&#x60;: 오류 발생 &lt;br/&gt; - &#x60;PENDING_CREATE&#x60;: 생성 대기 중 &lt;br/&gt; - &#x60;PENDING_UPDATE&#x60;: 업데이트 대기 중 &lt;br/&gt; - &#x60;PENDING_DELETE&#x60;: 삭제 대기 중
func (r ApiListHaGroupsRequest) ProvisioningStatus(provisioningStatus ProvisioningStatus) ApiListHaGroupsRequest {
	r.provisioningStatus = &provisioningStatus
	return r
}

// 운영 상태 &lt;br/&gt; - &#x60;ONLINE&#x60;: 온라인 상태 &lt;br/&gt; - &#x60;DRAINING&#x60;: 연결 종료 중 &lt;br/&gt; - &#x60;OFFLINE&#x60;: 오프라인 상태 &lt;br/&gt; - &#x60;DEGRADED&#x60;: 성능 저하 상태 &lt;br/&gt; - &#x60;ERROR&#x60;: 오류 발생 &lt;br/&gt; - &#x60;NO_MONITOR&#x60;: 모니터링 없음
func (r ApiListHaGroupsRequest) OperatingStatus(operatingStatus LoadBalancerOperatingStatus) ApiListHaGroupsRequest {
	r.operatingStatus = &operatingStatus
	return r
}

// [로드 밸런서 유형](https://docs.kakaocloud.com/service/bns/lb/lb-overview#사용-목적에-따른-로드-밸런서-유형-제공) &lt;br/&gt; - &#x60;ALB&#x60;: Application Load Balancer &lt;br/&gt; - &#x60;NLB&#x60;: Network Load Balancer &lt;br/&gt; - &#x60;NLB_L4_DSR&#x60;: Network Load Balancer (L4 Direct Server Return)
func (r ApiListHaGroupsRequest) Type_(type_ LoadBalancerType) ApiListHaGroupsRequest {
	r.type_ = &type_
	return r
}

// 연결된 VPC 이름
func (r ApiListHaGroupsRequest) VpcName(vpcName string) ApiListHaGroupsRequest {
	r.vpcName = &vpcName
	return r
}

// 연결된 VPC ID
func (r ApiListHaGroupsRequest) VpcId(vpcId string) ApiListHaGroupsRequest {
	r.vpcId = &vpcId
	return r
}

// 리소스가 생성된 시간 &lt;br/&gt; - ISO_8601 형식  &lt;br/&gt; - UTC 기준
func (r ApiListHaGroupsRequest) CreatedAt(createdAt string) ApiListHaGroupsRequest {
	r.createdAt = &createdAt
	return r
}

// 리소스가 마지막으로 수정된 시간 &lt;br/&gt; - ISO_8601 형식  &lt;br/&gt; - UTC 기준
func (r ApiListHaGroupsRequest) UpdatedAt(updatedAt string) ApiListHaGroupsRequest {
	r.updatedAt = &updatedAt
	return r
}

// 정렬할 필드를 콤마(,)로 구분
func (r ApiListHaGroupsRequest) SortKeys(sortKeys string) ApiListHaGroupsRequest {
	r.sortKeys = &sortKeys
	return r
}

// 정렬 방향 (&#x60;asc&#x60;, &#x60;desc&#x60;)
func (r ApiListHaGroupsRequest) SortDirs(sortDirs string) ApiListHaGroupsRequest {
	r.sortDirs = &sortDirs
	return r
}

// 페이지당 최대 반환 항목 수
func (r ApiListHaGroupsRequest) Limit(limit int32) ApiListHaGroupsRequest {
	r.limit = &limit
	return r
}

// 조회 시작 위치
func (r ApiListHaGroupsRequest) Offset(offset int32) ApiListHaGroupsRequest {
	r.offset = &offset
	return r
}

func (r ApiListHaGroupsRequest) Execute() (*BeyondLoadBalancerListModel, *http.Response, error) {
	return r.ApiService.ListHaGroupsExecute(r)
}

/*
ListHaGroups List HA groups

고가용성 그룹(High Availability Group)의 전체 목록을 조회합니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListHaGroupsRequest
*/
func (a *BeyondLoadBalancerAPIService) ListHaGroups(ctx context.Context) ApiListHaGroupsRequest {
	return ApiListHaGroupsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BeyondLoadBalancerListModel
func (a *BeyondLoadBalancerAPIService) ListHaGroupsExecute(r ApiListHaGroupsRequest) (*BeyondLoadBalancerListModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BeyondLoadBalancerListModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BeyondLoadBalancerAPIService.ListHaGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/beyond-load-balancers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.dnsName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dns_name", r.dnsName, "form", "")
	}
	if r.scheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheme", r.scheme, "form", "")
	}
	if r.provisioningStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "provisioning_status", r.provisioningStatus, "form", "")
	}
	if r.operatingStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "operating_status", r.operatingStatus, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.vpcName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_name", r.vpcName, "form", "")
	}
	if r.vpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_id", r.vpcId, "form", "")
	}
	if r.createdAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at", r.createdAt, "form", "")
	}
	if r.updatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at", r.updatedAt, "form", "")
	}
	if r.sortKeys != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_keys", r.sortKeys, "form", "")
	} else {
		var defaultValue string = "created_at"
		r.sortKeys = &defaultValue
	}
	if r.sortDirs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_dirs", r.sortDirs, "form", "")
	} else {
		var defaultValue string = "desc"
		r.sortDirs = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 20
		r.limit = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateHaGroupRequest struct {
	ctx                  context.Context
	ApiService           BeyondLoadBalancerAPI
	beyondLoadBalancerId string
	xAuthToken           *string
	bodyUpdateHaGroup    *BodyUpdateHaGroup
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiUpdateHaGroupRequest) XAuthToken(xAuthToken string) ApiUpdateHaGroupRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiUpdateHaGroupRequest) BodyUpdateHaGroup(bodyUpdateHaGroup BodyUpdateHaGroup) ApiUpdateHaGroupRequest {
	r.bodyUpdateHaGroup = &bodyUpdateHaGroup
	return r
}

func (r ApiUpdateHaGroupRequest) Execute() (*BnsLoadBalancerV1ApiUpdateHaGroupModelResponseBeyondLoadBalancerModel, *http.Response, error) {
	return r.ApiService.UpdateHaGroupExecute(r)
}

/*
UpdateHaGroup Update HA group

특정 고가용성 그룹의 설명을 수정합니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param beyondLoadBalancerId 수정할 고가용성 로드 밸런서 ID
	@return ApiUpdateHaGroupRequest
*/
func (a *BeyondLoadBalancerAPIService) UpdateHaGroup(ctx context.Context, beyondLoadBalancerId string) ApiUpdateHaGroupRequest {
	return ApiUpdateHaGroupRequest{
		ApiService:           a,
		ctx:                  ctx,
		beyondLoadBalancerId: beyondLoadBalancerId,
	}
}

// Execute executes the request
//
//	@return BnsLoadBalancerV1ApiUpdateHaGroupModelResponseBeyondLoadBalancerModel
func (a *BeyondLoadBalancerAPIService) UpdateHaGroupExecute(r ApiUpdateHaGroupRequest) (*BnsLoadBalancerV1ApiUpdateHaGroupModelResponseBeyondLoadBalancerModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BnsLoadBalancerV1ApiUpdateHaGroupModelResponseBeyondLoadBalancerModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BeyondLoadBalancerAPIService.UpdateHaGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/beyond-load-balancers/{beyond_load_balancer_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"beyond_load_balancer_id"+"}", url.PathEscape(parameterValueToString(r.beyondLoadBalancerId, "beyondLoadBalancerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}
	if r.bodyUpdateHaGroup == nil {
		return localVarReturnValue, nil, reportError("bodyUpdateHaGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	// body params
	localVarPostBody = r.bodyUpdateHaGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateHaGroupLoadBalancerRequest struct {
	ctx                           context.Context
	ApiService                    BeyondLoadBalancerAPI
	beyondLoadBalancerId          string
	xAuthToken                    *string
	bodyUpdateHaGroupLoadBalancer *BodyUpdateHaGroupLoadBalancer
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiUpdateHaGroupLoadBalancerRequest) XAuthToken(xAuthToken string) ApiUpdateHaGroupLoadBalancerRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiUpdateHaGroupLoadBalancerRequest) BodyUpdateHaGroupLoadBalancer(bodyUpdateHaGroupLoadBalancer BodyUpdateHaGroupLoadBalancer) ApiUpdateHaGroupLoadBalancerRequest {
	r.bodyUpdateHaGroupLoadBalancer = &bodyUpdateHaGroupLoadBalancer
	return r
}

func (r ApiUpdateHaGroupLoadBalancerRequest) Execute() (*BnsLoadBalancerV1ApiUpdateHaGroupLoadBalancerModelResponseBeyondLoadBalancerModel, *http.Response, error) {
	return r.ApiService.UpdateHaGroupLoadBalancerExecute(r)
}

/*
UpdateHaGroupLoadBalancer Update HA group load balancer

고가용성 로드 밸런서에 새로운 가용 영역의 로드 밸런서를 추가합니다.

:::info 안내
- 기존에 연결되어 있던 로드 밸런서를 포함하여 새로운 가용 영역의 로드 밸런서를 추가해야 합니다.
- 이미 연결된 가용 영역에 대해 중복 연결을 시도하면 오류가 발생할 수 있습니다.
- 최소 하나 이상의 로드 밸런서 연결이 필요하며, 연결된 로드 밸런서는 [Detach HA group load balancer](https://docs.kakaocloud.com/openapi/bns/lb/detach-ha-group-load-balancer) API를 통해 연결 해제할 수 있습니다.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param beyondLoadBalancerId 연결 대상 고가용성 로드 밸런서 ID
	@return ApiUpdateHaGroupLoadBalancerRequest
*/
func (a *BeyondLoadBalancerAPIService) UpdateHaGroupLoadBalancer(ctx context.Context, beyondLoadBalancerId string) ApiUpdateHaGroupLoadBalancerRequest {
	return ApiUpdateHaGroupLoadBalancerRequest{
		ApiService:           a,
		ctx:                  ctx,
		beyondLoadBalancerId: beyondLoadBalancerId,
	}
}

// Execute executes the request
//
//	@return BnsLoadBalancerV1ApiUpdateHaGroupLoadBalancerModelResponseBeyondLoadBalancerModel
func (a *BeyondLoadBalancerAPIService) UpdateHaGroupLoadBalancerExecute(r ApiUpdateHaGroupLoadBalancerRequest) (*BnsLoadBalancerV1ApiUpdateHaGroupLoadBalancerModelResponseBeyondLoadBalancerModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BnsLoadBalancerV1ApiUpdateHaGroupLoadBalancerModelResponseBeyondLoadBalancerModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BeyondLoadBalancerAPIService.UpdateHaGroupLoadBalancer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/beyond-load-balancers/{beyond_load_balancer_id}/subnets"
	localVarPath = strings.Replace(localVarPath, "{"+"beyond_load_balancer_id"+"}", url.PathEscape(parameterValueToString(r.beyondLoadBalancerId, "beyondLoadBalancerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}
	if r.bodyUpdateHaGroupLoadBalancer == nil {
		return localVarReturnValue, nil, reportError("bodyUpdateHaGroupLoadBalancer is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	// body params
	localVarPostBody = r.bodyUpdateHaGroupLoadBalancer
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
