/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type LoadBalancerAPI interface {

	/*
		AssociateNewPublicIp Associate new public IP

		지정한 로드 밸런서에 신규 퍼블릭 IP를 생성하고 자동으로 연결합니다. 퍼블릭 IP는 외부에서 접근 가능한 주소이므로, 보안 그룹 및 네트워크 ACL 설정을 적절히 구성하여 외부 노출을 방지해야 합니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param loadBalancerId 퍼블릭 IP를 연결할 대상 로드 밸런서 ID
		@return ApiAssociateNewPublicIpRequest
	*/
	AssociateNewPublicIp(ctx context.Context, loadBalancerId string) ApiAssociateNewPublicIpRequest

	// AssociateNewPublicIpExecute executes the request
	//  @return BnsLoadBalancerV1ApiAssociateNewPublicIpModelResponsePublicIpModel
	AssociateNewPublicIpExecute(r ApiAssociateNewPublicIpRequest) (*BnsLoadBalancerV1ApiAssociateNewPublicIpModelResponsePublicIpModel, *http.Response, error)

	/*
		AssociatePublicIp Associate public IP

		기존에 생성된 퍼블릭 IP를 지정한 로드 밸런서에 연결합니다.
	퍼블릭 IP는 외부 인터넷에서 접근 가능한 주소이므로, 외부 노출을 최소화하기 위해 보안 그룹 및 ACL 설정을 반드시 검토해야 합니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param loadBalancerId 퍼블릭 IP를 연결할 대상 로드 밸런서 ID
		@param publicIpId 연결할 퍼블릭 IP의 고유 ID
		@return ApiAssociatePublicIpRequest
	*/
	AssociatePublicIp(ctx context.Context, loadBalancerId string, publicIpId string) ApiAssociatePublicIpRequest

	// AssociatePublicIpExecute executes the request
	//  @return BnsLoadBalancerV1ApiAssociatePublicIpModelResponsePublicIpModel
	AssociatePublicIpExecute(r ApiAssociatePublicIpRequest) (*BnsLoadBalancerV1ApiAssociatePublicIpModelResponsePublicIpModel, *http.Response, error)

	/*
		CreateLoadBalancer Create load balancer

		새로운 로드 밸런서를 생성합니다. 리스너에 사용할 프로토콜과 포트를 포함한 초기 설정도 지정할 수 있습니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiCreateLoadBalancerRequest
	*/
	CreateLoadBalancer(ctx context.Context) ApiCreateLoadBalancerRequest

	// CreateLoadBalancerExecute executes the request
	//  @return BnsLoadBalancerV1ApiCreateLoadBalancerModelResponseLoadBalancerModel
	CreateLoadBalancerExecute(r ApiCreateLoadBalancerRequest) (*BnsLoadBalancerV1ApiCreateLoadBalancerModelResponseLoadBalancerModel, *http.Response, error)

	/*
		DeleteLoadBalancer Delete load balancer

		지정한 로드 밸런서를 삭제합니다.

	:::caution 주의
	- 삭제된 로드 밸런서는 복구할 수 없습니다.
	- 삭제 시 연결된 리스너, 대상 그룹 등 관련 리소스가 함께 삭제됩니다.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param loadBalancerId 삭제할 로드 밸런서의 ID
		@return ApiDeleteLoadBalancerRequest
	*/
	DeleteLoadBalancer(ctx context.Context, loadBalancerId string) ApiDeleteLoadBalancerRequest

	// DeleteLoadBalancerExecute executes the request
	DeleteLoadBalancerExecute(r ApiDeleteLoadBalancerRequest) (*http.Response, error)

	/*
		GetLoadBalancer Get load balancer

		특정 로드 밸런서의 상세 정보를 조회합니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param loadBalancerId 조회할 로드 밸런서의 ID
		@return ApiGetLoadBalancerRequest
	*/
	GetLoadBalancer(ctx context.Context, loadBalancerId string) ApiGetLoadBalancerRequest

	// GetLoadBalancerExecute executes the request
	//  @return BnsLoadBalancerV1ApiGetLoadBalancerModelResponseLoadBalancerModel
	GetLoadBalancerExecute(r ApiGetLoadBalancerRequest) (*BnsLoadBalancerV1ApiGetLoadBalancerModelResponseLoadBalancerModel, *http.Response, error)

	/*
		ListLoadBalancers List load balancers

		사용자의 로드 밸런서 전체 목록을 조회합니다. 각 로드 밸런서의 이름, 상태, 유형, 가용 영역, 네트워크 구성 등 주요 메타데이터가 포함됩니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiListLoadBalancersRequest
	*/
	ListLoadBalancers(ctx context.Context) ApiListLoadBalancersRequest

	// ListLoadBalancersExecute executes the request
	//  @return LoadBalancerListModel
	ListLoadBalancersExecute(r ApiListLoadBalancersRequest) (*LoadBalancerListModel, *http.Response, error)

	/*
		RemovePublicIp Remove public IP

		지정한 로드 밸런서에서 퍼블릭 IP를 연결 해제 또는 해제 후 삭제합니다.

	:::info 안내
	- 퍼블릭 IP가 삭제되면 외부와의 연결이 즉시 끊어지며, 연결된 리스너나 트래픽 흐름에 영향을 줄 수 있습니다.
	- 삭제 전 반드시 프로비저닝 상태를 점검하고, 서비스 중단 여부를 확인하세요.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param loadBalancerId 삭제할 퍼블릭 IP ID
		@return ApiRemovePublicIpRequest
	*/
	RemovePublicIp(ctx context.Context, loadBalancerId string) ApiRemovePublicIpRequest

	// RemovePublicIpExecute executes the request
	//  @return BnsLoadBalancerV1ApiRemovePublicIpModelResponsePublicIpModel
	RemovePublicIpExecute(r ApiRemovePublicIpRequest) (*BnsLoadBalancerV1ApiRemovePublicIpModelResponsePublicIpModel, *http.Response, error)

	/*
		UpdateAccessLog Update access log

		지정한 로드 밸런서의 액세스 로그를 버킷에 저장하도록 설정합니다.<br/>
	버킷은 사전에 생성되어 있어야 하며, 지정한 인증 정보에는 해당 버킷에 대한 쓰기 권한이 포함되어야 합니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param loadBalancerId 액세스 로그 설정을 변경할 로드 밸런서 ID
		@return ApiUpdateAccessLogRequest
	*/
	UpdateAccessLog(ctx context.Context, loadBalancerId string) ApiUpdateAccessLogRequest

	// UpdateAccessLogExecute executes the request
	//  @return BnsLoadBalancerV1ApiUpdateAccessLogModelResponseLoadBalancerModel
	UpdateAccessLogExecute(r ApiUpdateAccessLogRequest) (*BnsLoadBalancerV1ApiUpdateAccessLogModelResponseLoadBalancerModel, *http.Response, error)

	/*
		UpdateLoadBalancer Update load balancer

		특정 로드 밸런서의 이름과 설명을 수정합니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param loadBalancerId 수정할 로드 밸런서의 ID
		@return ApiUpdateLoadBalancerRequest
	*/
	UpdateLoadBalancer(ctx context.Context, loadBalancerId string) ApiUpdateLoadBalancerRequest

	// UpdateLoadBalancerExecute executes the request
	//  @return BnsLoadBalancerV1ApiUpdateLoadBalancerModelResponseLoadBalancerModel
	UpdateLoadBalancerExecute(r ApiUpdateLoadBalancerRequest) (*BnsLoadBalancerV1ApiUpdateLoadBalancerModelResponseLoadBalancerModel, *http.Response, error)
}

// LoadBalancerAPIService LoadBalancerAPI service
type LoadBalancerAPIService service

type ApiAssociateNewPublicIpRequest struct {
	ctx            context.Context
	ApiService     LoadBalancerAPI
	loadBalancerId string
	xAuthToken     *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiAssociateNewPublicIpRequest) XAuthToken(xAuthToken string) ApiAssociateNewPublicIpRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiAssociateNewPublicIpRequest) Execute() (*BnsLoadBalancerV1ApiAssociateNewPublicIpModelResponsePublicIpModel, *http.Response, error) {
	return r.ApiService.AssociateNewPublicIpExecute(r)
}

/*
AssociateNewPublicIp Associate new public IP

지정한 로드 밸런서에 신규 퍼블릭 IP를 생성하고 자동으로 연결합니다. 퍼블릭 IP는 외부에서 접근 가능한 주소이므로, 보안 그룹 및 네트워크 ACL 설정을 적절히 구성하여 외부 노출을 방지해야 합니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param loadBalancerId 퍼블릭 IP를 연결할 대상 로드 밸런서 ID
	@return ApiAssociateNewPublicIpRequest
*/
func (a *LoadBalancerAPIService) AssociateNewPublicIp(ctx context.Context, loadBalancerId string) ApiAssociateNewPublicIpRequest {
	return ApiAssociateNewPublicIpRequest{
		ApiService:     a,
		ctx:            ctx,
		loadBalancerId: loadBalancerId,
	}
}

// Execute executes the request
//
//	@return BnsLoadBalancerV1ApiAssociateNewPublicIpModelResponsePublicIpModel
func (a *LoadBalancerAPIService) AssociateNewPublicIpExecute(r ApiAssociateNewPublicIpRequest) (*BnsLoadBalancerV1ApiAssociateNewPublicIpModelResponsePublicIpModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BnsLoadBalancerV1ApiAssociateNewPublicIpModelResponsePublicIpModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoadBalancerAPIService.AssociateNewPublicIp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/load-balancers/{load_balancer_id}/public-ips"
	localVarPath = strings.Replace(localVarPath, "{"+"load_balancer_id"+"}", url.PathEscape(parameterValueToString(r.loadBalancerId, "loadBalancerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAssociatePublicIpRequest struct {
	ctx            context.Context
	ApiService     LoadBalancerAPI
	loadBalancerId string
	publicIpId     string
	xAuthToken     *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiAssociatePublicIpRequest) XAuthToken(xAuthToken string) ApiAssociatePublicIpRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiAssociatePublicIpRequest) Execute() (*BnsLoadBalancerV1ApiAssociatePublicIpModelResponsePublicIpModel, *http.Response, error) {
	return r.ApiService.AssociatePublicIpExecute(r)
}

/*
AssociatePublicIp Associate public IP

기존에 생성된 퍼블릭 IP를 지정한 로드 밸런서에 연결합니다.
퍼블릭 IP는 외부 인터넷에서 접근 가능한 주소이므로, 외부 노출을 최소화하기 위해 보안 그룹 및 ACL 설정을 반드시 검토해야 합니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param loadBalancerId 퍼블릭 IP를 연결할 대상 로드 밸런서 ID
	@param publicIpId 연결할 퍼블릭 IP의 고유 ID
	@return ApiAssociatePublicIpRequest
*/
func (a *LoadBalancerAPIService) AssociatePublicIp(ctx context.Context, loadBalancerId string, publicIpId string) ApiAssociatePublicIpRequest {
	return ApiAssociatePublicIpRequest{
		ApiService:     a,
		ctx:            ctx,
		loadBalancerId: loadBalancerId,
		publicIpId:     publicIpId,
	}
}

// Execute executes the request
//
//	@return BnsLoadBalancerV1ApiAssociatePublicIpModelResponsePublicIpModel
func (a *LoadBalancerAPIService) AssociatePublicIpExecute(r ApiAssociatePublicIpRequest) (*BnsLoadBalancerV1ApiAssociatePublicIpModelResponsePublicIpModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BnsLoadBalancerV1ApiAssociatePublicIpModelResponsePublicIpModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoadBalancerAPIService.AssociatePublicIp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/load-balancers/{load_balancer_id}/public-ips/{public_ip_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"load_balancer_id"+"}", url.PathEscape(parameterValueToString(r.loadBalancerId, "loadBalancerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"public_ip_id"+"}", url.PathEscape(parameterValueToString(r.publicIpId, "publicIpId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateLoadBalancerRequest struct {
	ctx                    context.Context
	ApiService             LoadBalancerAPI
	xAuthToken             *string
	bodyCreateLoadBalancer *BodyCreateLoadBalancer
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiCreateLoadBalancerRequest) XAuthToken(xAuthToken string) ApiCreateLoadBalancerRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiCreateLoadBalancerRequest) BodyCreateLoadBalancer(bodyCreateLoadBalancer BodyCreateLoadBalancer) ApiCreateLoadBalancerRequest {
	r.bodyCreateLoadBalancer = &bodyCreateLoadBalancer
	return r
}

func (r ApiCreateLoadBalancerRequest) Execute() (*BnsLoadBalancerV1ApiCreateLoadBalancerModelResponseLoadBalancerModel, *http.Response, error) {
	return r.ApiService.CreateLoadBalancerExecute(r)
}

/*
CreateLoadBalancer Create load balancer

새로운 로드 밸런서를 생성합니다. 리스너에 사용할 프로토콜과 포트를 포함한 초기 설정도 지정할 수 있습니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateLoadBalancerRequest
*/
func (a *LoadBalancerAPIService) CreateLoadBalancer(ctx context.Context) ApiCreateLoadBalancerRequest {
	return ApiCreateLoadBalancerRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BnsLoadBalancerV1ApiCreateLoadBalancerModelResponseLoadBalancerModel
func (a *LoadBalancerAPIService) CreateLoadBalancerExecute(r ApiCreateLoadBalancerRequest) (*BnsLoadBalancerV1ApiCreateLoadBalancerModelResponseLoadBalancerModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BnsLoadBalancerV1ApiCreateLoadBalancerModelResponseLoadBalancerModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoadBalancerAPIService.CreateLoadBalancer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/load-balancers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}
	if r.bodyCreateLoadBalancer == nil {
		return localVarReturnValue, nil, reportError("bodyCreateLoadBalancer is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	// body params
	localVarPostBody = r.bodyCreateLoadBalancer
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteLoadBalancerRequest struct {
	ctx            context.Context
	ApiService     LoadBalancerAPI
	loadBalancerId string
	xAuthToken     *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiDeleteLoadBalancerRequest) XAuthToken(xAuthToken string) ApiDeleteLoadBalancerRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiDeleteLoadBalancerRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLoadBalancerExecute(r)
}

/*
DeleteLoadBalancer Delete load balancer

지정한 로드 밸런서를 삭제합니다.

:::caution 주의
- 삭제된 로드 밸런서는 복구할 수 없습니다.
- 삭제 시 연결된 리스너, 대상 그룹 등 관련 리소스가 함께 삭제됩니다.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param loadBalancerId 삭제할 로드 밸런서의 ID
	@return ApiDeleteLoadBalancerRequest
*/
func (a *LoadBalancerAPIService) DeleteLoadBalancer(ctx context.Context, loadBalancerId string) ApiDeleteLoadBalancerRequest {
	return ApiDeleteLoadBalancerRequest{
		ApiService:     a,
		ctx:            ctx,
		loadBalancerId: loadBalancerId,
	}
}

// Execute executes the request
func (a *LoadBalancerAPIService) DeleteLoadBalancerExecute(r ApiDeleteLoadBalancerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoadBalancerAPIService.DeleteLoadBalancer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/load-balancers/{load_balancer_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"load_balancer_id"+"}", url.PathEscape(parameterValueToString(r.loadBalancerId, "loadBalancerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetLoadBalancerRequest struct {
	ctx            context.Context
	ApiService     LoadBalancerAPI
	loadBalancerId string
	xAuthToken     *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiGetLoadBalancerRequest) XAuthToken(xAuthToken string) ApiGetLoadBalancerRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiGetLoadBalancerRequest) Execute() (*BnsLoadBalancerV1ApiGetLoadBalancerModelResponseLoadBalancerModel, *http.Response, error) {
	return r.ApiService.GetLoadBalancerExecute(r)
}

/*
GetLoadBalancer Get load balancer

특정 로드 밸런서의 상세 정보를 조회합니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param loadBalancerId 조회할 로드 밸런서의 ID
	@return ApiGetLoadBalancerRequest
*/
func (a *LoadBalancerAPIService) GetLoadBalancer(ctx context.Context, loadBalancerId string) ApiGetLoadBalancerRequest {
	return ApiGetLoadBalancerRequest{
		ApiService:     a,
		ctx:            ctx,
		loadBalancerId: loadBalancerId,
	}
}

// Execute executes the request
//
//	@return BnsLoadBalancerV1ApiGetLoadBalancerModelResponseLoadBalancerModel
func (a *LoadBalancerAPIService) GetLoadBalancerExecute(r ApiGetLoadBalancerRequest) (*BnsLoadBalancerV1ApiGetLoadBalancerModelResponseLoadBalancerModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BnsLoadBalancerV1ApiGetLoadBalancerModelResponseLoadBalancerModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoadBalancerAPIService.GetLoadBalancer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/load-balancers/{load_balancer_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"load_balancer_id"+"}", url.PathEscape(parameterValueToString(r.loadBalancerId, "loadBalancerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListLoadBalancersRequest struct {
	ctx                    context.Context
	ApiService             LoadBalancerAPI
	xAuthToken             *string
	id                     *string
	name                   *string
	type_                  *string
	privateVip             *string
	publicVip              *string
	provisioningStatus     *ProvisioningStatus
	operatingStatus        *LoadBalancerOperatingStatus
	subnetId               *string
	subnetCidrBlock        *string
	vpcId                  *string
	vpcName                *string
	availabilityZone       *AvailabilityZone
	beyondLoadBalancerName *string
	createdAt              *string
	updatedAt              *string
	sortKeys               *string
	sortDirs               *string
	limit                  *int32
	offset                 *int32
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiListLoadBalancersRequest) XAuthToken(xAuthToken string) ApiListLoadBalancersRequest {
	r.xAuthToken = &xAuthToken
	return r
}

// 로드 밸런서 ID
func (r ApiListLoadBalancersRequest) Id(id string) ApiListLoadBalancersRequest {
	r.id = &id
	return r
}

// 로드 밸런서 이름
func (r ApiListLoadBalancersRequest) Name(name string) ApiListLoadBalancersRequest {
	r.name = &name
	return r
}

// [로드 밸런서 유형](https://docs.kakaocloud.com/service/bns/lb/lb-overview#features)&lt;br/&gt;- &#x60;ALB&#x60;: Application Load Balancer&lt;br/&gt;- &#x60;NLB&#x60;: Network Load Balancer&lt;br/&gt;- &#x60;NLB_L4_DSR&#x60;: Direct Server Return Network Load Balancer
func (r ApiListLoadBalancersRequest) Type_(type_ string) ApiListLoadBalancersRequest {
	r.type_ = &type_
	return r
}

// 내부 VIP 주소
func (r ApiListLoadBalancersRequest) PrivateVip(privateVip string) ApiListLoadBalancersRequest {
	r.privateVip = &privateVip
	return r
}

// 외부 VIP 주소
func (r ApiListLoadBalancersRequest) PublicVip(publicVip string) ApiListLoadBalancersRequest {
	r.publicVip = &publicVip
	return r
}

// 프로비저닝 상태 &lt;br/&gt; - &#x60;ACTIVE&#x60;: 활성 &lt;br/&gt; - &#x60;DELETED&#x60;: 삭제됨 &lt;br/&gt; - &#x60;ERROR&#x60;: 오류 &lt;br/&gt; - &#x60;PENDING_CREATE&#x60;: 생성 대기 중 &lt;br/&gt; - &#x60;PENDING_UPDATE&#x60;: 업데이트 대기 중 &lt;br/&gt; - &#x60;PENDING_DELETE&#x60;: 삭제 대기 중
func (r ApiListLoadBalancersRequest) ProvisioningStatus(provisioningStatus ProvisioningStatus) ApiListLoadBalancersRequest {
	r.provisioningStatus = &provisioningStatus
	return r
}

// 운영 상태 &lt;br/&gt; - &#x60;ONLINE&#x60;: 온라인 &lt;br/&gt; - &#x60;DRAINING&#x60;: 연결 종료 중 &lt;br/&gt; - &#x60;OFFLINE&#x60;: 오프라인 &lt;br/&gt; - &#x60;DEGRADED&#x60;: 성능 저하 &lt;br/&gt; - &#x60;ERROR&#x60;: 오류 &lt;br/&gt; - &#x60;NO_MONITOR&#x60;: 모니터링 없음
func (r ApiListLoadBalancersRequest) OperatingStatus(operatingStatus LoadBalancerOperatingStatus) ApiListLoadBalancersRequest {
	r.operatingStatus = &operatingStatus
	return r
}

// 서브넷 ID
func (r ApiListLoadBalancersRequest) SubnetId(subnetId string) ApiListLoadBalancersRequest {
	r.subnetId = &subnetId
	return r
}

// 서브넷의 IPv4 CIDR 블록
func (r ApiListLoadBalancersRequest) SubnetCidrBlock(subnetCidrBlock string) ApiListLoadBalancersRequest {
	r.subnetCidrBlock = &subnetCidrBlock
	return r
}

// VPC의 고유 ID
func (r ApiListLoadBalancersRequest) VpcId(vpcId string) ApiListLoadBalancersRequest {
	r.vpcId = &vpcId
	return r
}

// VPC 이름
func (r ApiListLoadBalancersRequest) VpcName(vpcName string) ApiListLoadBalancersRequest {
	r.vpcName = &vpcName
	return r
}

// 가용 영역
func (r ApiListLoadBalancersRequest) AvailabilityZone(availabilityZone AvailabilityZone) ApiListLoadBalancersRequest {
	r.availabilityZone = &availabilityZone
	return r
}

// 연결된 고가용성 그룹 이름
func (r ApiListLoadBalancersRequest) BeyondLoadBalancerName(beyondLoadBalancerName string) ApiListLoadBalancersRequest {
	r.beyondLoadBalancerName = &beyondLoadBalancerName
	return r
}

// 리소스가 생성된 시간 &lt;br/&gt; - ISO_8601 형식  &lt;br/&gt; - UTC 기준
func (r ApiListLoadBalancersRequest) CreatedAt(createdAt string) ApiListLoadBalancersRequest {
	r.createdAt = &createdAt
	return r
}

// 리소스가 마지막으로 수정된 시간 &lt;br/&gt; - ISO_8601 형식  &lt;br/&gt; - UTC 기준
func (r ApiListLoadBalancersRequest) UpdatedAt(updatedAt string) ApiListLoadBalancersRequest {
	r.updatedAt = &updatedAt
	return r
}

// 정렬할 필드를 콤마(,)로 구분
func (r ApiListLoadBalancersRequest) SortKeys(sortKeys string) ApiListLoadBalancersRequest {
	r.sortKeys = &sortKeys
	return r
}

// 정렬 방향 (&#x60;asc&#x60;, &#x60;desc&#x60;)
func (r ApiListLoadBalancersRequest) SortDirs(sortDirs string) ApiListLoadBalancersRequest {
	r.sortDirs = &sortDirs
	return r
}

// 페이지당 최대 반환 항목 수
func (r ApiListLoadBalancersRequest) Limit(limit int32) ApiListLoadBalancersRequest {
	r.limit = &limit
	return r
}

// 조회 시작 위치
func (r ApiListLoadBalancersRequest) Offset(offset int32) ApiListLoadBalancersRequest {
	r.offset = &offset
	return r
}

func (r ApiListLoadBalancersRequest) Execute() (*LoadBalancerListModel, *http.Response, error) {
	return r.ApiService.ListLoadBalancersExecute(r)
}

/*
ListLoadBalancers List load balancers

사용자의 로드 밸런서 전체 목록을 조회합니다. 각 로드 밸런서의 이름, 상태, 유형, 가용 영역, 네트워크 구성 등 주요 메타데이터가 포함됩니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListLoadBalancersRequest
*/
func (a *LoadBalancerAPIService) ListLoadBalancers(ctx context.Context) ApiListLoadBalancersRequest {
	return ApiListLoadBalancersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return LoadBalancerListModel
func (a *LoadBalancerAPIService) ListLoadBalancersExecute(r ApiListLoadBalancersRequest) (*LoadBalancerListModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LoadBalancerListModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoadBalancerAPIService.ListLoadBalancers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/load-balancers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.privateVip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "private_vip", r.privateVip, "form", "")
	}
	if r.publicVip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "public_vip", r.publicVip, "form", "")
	}
	if r.provisioningStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "provisioning_status", r.provisioningStatus, "form", "")
	}
	if r.operatingStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "operating_status", r.operatingStatus, "form", "")
	}
	if r.subnetId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subnet_id", r.subnetId, "form", "")
	}
	if r.subnetCidrBlock != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subnet_cidr_block", r.subnetCidrBlock, "form", "")
	}
	if r.vpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_id", r.vpcId, "form", "")
	}
	if r.vpcName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_name", r.vpcName, "form", "")
	}
	if r.availabilityZone != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "availability_zone", r.availabilityZone, "form", "")
	}
	if r.beyondLoadBalancerName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "beyond_load_balancer_name", r.beyondLoadBalancerName, "form", "")
	}
	if r.createdAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at", r.createdAt, "form", "")
	}
	if r.updatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at", r.updatedAt, "form", "")
	}
	if r.sortKeys != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_keys", r.sortKeys, "form", "")
	} else {
		var defaultValue string = "created_at"
		r.sortKeys = &defaultValue
	}
	if r.sortDirs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_dirs", r.sortDirs, "form", "")
	} else {
		var defaultValue string = "desc"
		r.sortDirs = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 20
		r.limit = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemovePublicIpRequest struct {
	ctx            context.Context
	ApiService     LoadBalancerAPI
	loadBalancerId string
	xAuthToken     *string
	isDelete       *bool
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiRemovePublicIpRequest) XAuthToken(xAuthToken string) ApiRemovePublicIpRequest {
	r.xAuthToken = &xAuthToken
	return r
}

// - &#x60;true&#x60;로 지정하면 퍼블릭 IP를 함께 삭제함 &lt;br/&gt; - &#x60;false&#x60;인 경우 연결만 해제하고 IP는 유지됨
func (r ApiRemovePublicIpRequest) IsDelete(isDelete bool) ApiRemovePublicIpRequest {
	r.isDelete = &isDelete
	return r
}

func (r ApiRemovePublicIpRequest) Execute() (*BnsLoadBalancerV1ApiRemovePublicIpModelResponsePublicIpModel, *http.Response, error) {
	return r.ApiService.RemovePublicIpExecute(r)
}

/*
RemovePublicIp Remove public IP

지정한 로드 밸런서에서 퍼블릭 IP를 연결 해제 또는 해제 후 삭제합니다.

:::info 안내
- 퍼블릭 IP가 삭제되면 외부와의 연결이 즉시 끊어지며, 연결된 리스너나 트래픽 흐름에 영향을 줄 수 있습니다.
- 삭제 전 반드시 프로비저닝 상태를 점검하고, 서비스 중단 여부를 확인하세요.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param loadBalancerId 삭제할 퍼블릭 IP ID
	@return ApiRemovePublicIpRequest
*/
func (a *LoadBalancerAPIService) RemovePublicIp(ctx context.Context, loadBalancerId string) ApiRemovePublicIpRequest {
	return ApiRemovePublicIpRequest{
		ApiService:     a,
		ctx:            ctx,
		loadBalancerId: loadBalancerId,
	}
}

// Execute executes the request
//
//	@return BnsLoadBalancerV1ApiRemovePublicIpModelResponsePublicIpModel
func (a *LoadBalancerAPIService) RemovePublicIpExecute(r ApiRemovePublicIpRequest) (*BnsLoadBalancerV1ApiRemovePublicIpModelResponsePublicIpModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BnsLoadBalancerV1ApiRemovePublicIpModelResponsePublicIpModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoadBalancerAPIService.RemovePublicIp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/load-balancers/{load_balancer_id}/public-ips"
	localVarPath = strings.Replace(localVarPath, "{"+"load_balancer_id"+"}", url.PathEscape(parameterValueToString(r.loadBalancerId, "loadBalancerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	if r.isDelete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_delete", r.isDelete, "form", "")
	} else {
		var defaultValue bool = false
		r.isDelete = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAccessLogRequest struct {
	ctx                 context.Context
	ApiService          LoadBalancerAPI
	loadBalancerId      string
	xAuthToken          *string
	bodyUpdateAccessLog *BodyUpdateAccessLog
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiUpdateAccessLogRequest) XAuthToken(xAuthToken string) ApiUpdateAccessLogRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiUpdateAccessLogRequest) BodyUpdateAccessLog(bodyUpdateAccessLog BodyUpdateAccessLog) ApiUpdateAccessLogRequest {
	r.bodyUpdateAccessLog = &bodyUpdateAccessLog
	return r
}

func (r ApiUpdateAccessLogRequest) Execute() (*BnsLoadBalancerV1ApiUpdateAccessLogModelResponseLoadBalancerModel, *http.Response, error) {
	return r.ApiService.UpdateAccessLogExecute(r)
}

/*
UpdateAccessLog Update access log

지정한 로드 밸런서의 액세스 로그를 버킷에 저장하도록 설정합니다.<br/>
버킷은 사전에 생성되어 있어야 하며, 지정한 인증 정보에는 해당 버킷에 대한 쓰기 권한이 포함되어야 합니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param loadBalancerId 액세스 로그 설정을 변경할 로드 밸런서 ID
	@return ApiUpdateAccessLogRequest
*/
func (a *LoadBalancerAPIService) UpdateAccessLog(ctx context.Context, loadBalancerId string) ApiUpdateAccessLogRequest {
	return ApiUpdateAccessLogRequest{
		ApiService:     a,
		ctx:            ctx,
		loadBalancerId: loadBalancerId,
	}
}

// Execute executes the request
//
//	@return BnsLoadBalancerV1ApiUpdateAccessLogModelResponseLoadBalancerModel
func (a *LoadBalancerAPIService) UpdateAccessLogExecute(r ApiUpdateAccessLogRequest) (*BnsLoadBalancerV1ApiUpdateAccessLogModelResponseLoadBalancerModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BnsLoadBalancerV1ApiUpdateAccessLogModelResponseLoadBalancerModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoadBalancerAPIService.UpdateAccessLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/load-balancers/{load_balancer_id}/access-log"
	localVarPath = strings.Replace(localVarPath, "{"+"load_balancer_id"+"}", url.PathEscape(parameterValueToString(r.loadBalancerId, "loadBalancerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}
	if r.bodyUpdateAccessLog == nil {
		return localVarReturnValue, nil, reportError("bodyUpdateAccessLog is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	// body params
	localVarPostBody = r.bodyUpdateAccessLog
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateLoadBalancerRequest struct {
	ctx                    context.Context
	ApiService             LoadBalancerAPI
	loadBalancerId         string
	xAuthToken             *string
	bodyUpdateLoadBalancer *BodyUpdateLoadBalancer
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiUpdateLoadBalancerRequest) XAuthToken(xAuthToken string) ApiUpdateLoadBalancerRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiUpdateLoadBalancerRequest) BodyUpdateLoadBalancer(bodyUpdateLoadBalancer BodyUpdateLoadBalancer) ApiUpdateLoadBalancerRequest {
	r.bodyUpdateLoadBalancer = &bodyUpdateLoadBalancer
	return r
}

func (r ApiUpdateLoadBalancerRequest) Execute() (*BnsLoadBalancerV1ApiUpdateLoadBalancerModelResponseLoadBalancerModel, *http.Response, error) {
	return r.ApiService.UpdateLoadBalancerExecute(r)
}

/*
UpdateLoadBalancer Update load balancer

특정 로드 밸런서의 이름과 설명을 수정합니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param loadBalancerId 수정할 로드 밸런서의 ID
	@return ApiUpdateLoadBalancerRequest
*/
func (a *LoadBalancerAPIService) UpdateLoadBalancer(ctx context.Context, loadBalancerId string) ApiUpdateLoadBalancerRequest {
	return ApiUpdateLoadBalancerRequest{
		ApiService:     a,
		ctx:            ctx,
		loadBalancerId: loadBalancerId,
	}
}

// Execute executes the request
//
//	@return BnsLoadBalancerV1ApiUpdateLoadBalancerModelResponseLoadBalancerModel
func (a *LoadBalancerAPIService) UpdateLoadBalancerExecute(r ApiUpdateLoadBalancerRequest) (*BnsLoadBalancerV1ApiUpdateLoadBalancerModelResponseLoadBalancerModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BnsLoadBalancerV1ApiUpdateLoadBalancerModelResponseLoadBalancerModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoadBalancerAPIService.UpdateLoadBalancer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/load-balancers/{load_balancer_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"load_balancer_id"+"}", url.PathEscape(parameterValueToString(r.loadBalancerId, "loadBalancerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}
	if r.bodyUpdateLoadBalancer == nil {
		return localVarReturnValue, nil, reportError("bodyUpdateLoadBalancer is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	// body params
	localVarPostBody = r.bodyUpdateLoadBalancer
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
