/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// checks if the AccessLogs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessLogs{}

// AccessLogs struct for AccessLogs
type AccessLogs struct {
	// 대상 버킷 이름
	Bucket string `json:"bucket"`
	// 액세스 키
	AccessKey string `json:"access_key"`
	// 보안 액세스 키
	SecretKey            string `json:"secret_key"`
	AdditionalProperties map[string]interface{}
}

type _AccessLogs AccessLogs

// NewAccessLogs instantiates a new AccessLogs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessLogs(bucket string, accessKey string, secretKey string) *AccessLogs {
	this := AccessLogs{}
	this.Bucket = bucket
	this.AccessKey = accessKey
	this.SecretKey = secretKey
	return &this
}

// NewAccessLogsWithDefaults instantiates a new AccessLogs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessLogsWithDefaults() *AccessLogs {
	this := AccessLogs{}
	return &this
}

// GetBucket returns the Bucket field value
func (o *AccessLogs) GetBucket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value
// and a boolean to check if the value has been set.
func (o *AccessLogs) GetBucketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bucket, true
}

// SetBucket sets field value
func (o *AccessLogs) SetBucket(v string) {
	o.Bucket = v
}

// GetAccessKey returns the AccessKey field value
func (o *AccessLogs) GetAccessKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value
// and a boolean to check if the value has been set.
func (o *AccessLogs) GetAccessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessKey, true
}

// SetAccessKey sets field value
func (o *AccessLogs) SetAccessKey(v string) {
	o.AccessKey = v
}

// GetSecretKey returns the SecretKey field value
func (o *AccessLogs) GetSecretKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value
// and a boolean to check if the value has been set.
func (o *AccessLogs) GetSecretKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretKey, true
}

// SetSecretKey sets field value
func (o *AccessLogs) SetSecretKey(v string) {
	o.SecretKey = v
}

func (o AccessLogs) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessLogs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucket"] = o.Bucket
	toSerialize["access_key"] = o.AccessKey
	toSerialize["secret_key"] = o.SecretKey

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccessLogs) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bucket",
		"access_key",
		"secret_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessLogs := _AccessLogs{}

	err = json.Unmarshal(data, &varAccessLogs)

	if err != nil {
		return err
	}

	*o = AccessLogs(varAccessLogs)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "bucket")
		delete(additionalProperties, "access_key")
		delete(additionalProperties, "secret_key")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccessLogs struct {
	value *AccessLogs
	isSet bool
}

func (v NullableAccessLogs) Get() *AccessLogs {
	return v.value
}

func (v *NullableAccessLogs) Set(val *AccessLogs) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessLogs) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessLogs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessLogs(val *AccessLogs) *NullableAccessLogs {
	return &NullableAccessLogs{value: val, isSet: true}
}

func (v NullableAccessLogs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessLogs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
