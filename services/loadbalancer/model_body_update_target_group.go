/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// checks if the BodyUpdateTargetGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BodyUpdateTargetGroup{}

// BodyUpdateTargetGroup struct for BodyUpdateTargetGroup
type BodyUpdateTargetGroup struct {
	TargetGroup          EditTargetGroup `json:"target_group"`
	AdditionalProperties map[string]interface{}
}

type _BodyUpdateTargetGroup BodyUpdateTargetGroup

// NewBodyUpdateTargetGroup instantiates a new BodyUpdateTargetGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBodyUpdateTargetGroup(targetGroup EditTargetGroup) *BodyUpdateTargetGroup {
	this := BodyUpdateTargetGroup{}
	this.TargetGroup = targetGroup
	return &this
}

// NewBodyUpdateTargetGroupWithDefaults instantiates a new BodyUpdateTargetGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBodyUpdateTargetGroupWithDefaults() *BodyUpdateTargetGroup {
	this := BodyUpdateTargetGroup{}
	return &this
}

// GetTargetGroup returns the TargetGroup field value
func (o *BodyUpdateTargetGroup) GetTargetGroup() EditTargetGroup {
	if o == nil {
		var ret EditTargetGroup
		return ret
	}

	return o.TargetGroup
}

// GetTargetGroupOk returns a tuple with the TargetGroup field value
// and a boolean to check if the value has been set.
func (o *BodyUpdateTargetGroup) GetTargetGroupOk() (*EditTargetGroup, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetGroup, true
}

// SetTargetGroup sets field value
func (o *BodyUpdateTargetGroup) SetTargetGroup(v EditTargetGroup) {
	o.TargetGroup = v
}

func (o BodyUpdateTargetGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BodyUpdateTargetGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["target_group"] = o.TargetGroup

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BodyUpdateTargetGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"target_group",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBodyUpdateTargetGroup := _BodyUpdateTargetGroup{}

	err = json.Unmarshal(data, &varBodyUpdateTargetGroup)

	if err != nil {
		return err
	}

	*o = BodyUpdateTargetGroup(varBodyUpdateTargetGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "target_group")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBodyUpdateTargetGroup struct {
	value *BodyUpdateTargetGroup
	isSet bool
}

func (v NullableBodyUpdateTargetGroup) Get() *BodyUpdateTargetGroup {
	return v.value
}

func (v *NullableBodyUpdateTargetGroup) Set(val *BodyUpdateTargetGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableBodyUpdateTargetGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableBodyUpdateTargetGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBodyUpdateTargetGroup(val *BodyUpdateTargetGroup) *NullableBodyUpdateTargetGroup {
	return &NullableBodyUpdateTargetGroup{value: val, isSet: true}
}

func (v NullableBodyUpdateTargetGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBodyUpdateTargetGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
