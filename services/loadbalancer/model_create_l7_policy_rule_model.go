/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateL7PolicyRuleModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateL7PolicyRuleModel{}

// CreateL7PolicyRuleModel struct for CreateL7PolicyRuleModel
type CreateL7PolicyRuleModel struct {
	// 규칙 값 비교 방식 <br/> - `CONTAINS`: 포함 <br/> - `ENDS_WITH`: ~로 끝남 <br/> - `EQUAL_TO`: 동일 <br/> - `STARTS_WITH`: ~로 시작함
	CompareType L7RuleCompareType `json:"compare_type"`
	IsInverted  NullableBool      `json:"is_inverted,omitempty"`
	Key         NullableString    `json:"key,omitempty"`
	// 규칙을 검사할 대상 유형 <br/>- `COOKIE`: HTTP 요청의 특정 쿠키 값을 기준으로 검사<br/>- `FILE_TYPE`: 요청한 리소스의 파일 확장자(예: `.jpg`, `.exe`)를 기준으로 검사<br/>- `HEADER`: HTTP 요청 헤더 값을 기준으로 검사<br/>- `HOST_NAME`: 요청의 Host 헤더(도메인 이름)를 기준으로 검사<br/>- `PATH`: 요청 URL 경로(예: `/images/_*`, `/api/v1/_*`)를 기준으로 검사
	Type L7RuleType `json:"type"`
	// 비교할 대상 값
	Value                string `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _CreateL7PolicyRuleModel CreateL7PolicyRuleModel

// NewCreateL7PolicyRuleModel instantiates a new CreateL7PolicyRuleModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateL7PolicyRuleModel(compareType L7RuleCompareType, type_ L7RuleType, value string) *CreateL7PolicyRuleModel {
	this := CreateL7PolicyRuleModel{}
	this.CompareType = compareType
	this.Type = type_
	this.Value = value
	return &this
}

// NewCreateL7PolicyRuleModelWithDefaults instantiates a new CreateL7PolicyRuleModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateL7PolicyRuleModelWithDefaults() *CreateL7PolicyRuleModel {
	this := CreateL7PolicyRuleModel{}
	return &this
}

// GetCompareType returns the CompareType field value
func (o *CreateL7PolicyRuleModel) GetCompareType() L7RuleCompareType {
	if o == nil {
		var ret L7RuleCompareType
		return ret
	}

	return o.CompareType
}

// GetCompareTypeOk returns a tuple with the CompareType field value
// and a boolean to check if the value has been set.
func (o *CreateL7PolicyRuleModel) GetCompareTypeOk() (*L7RuleCompareType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompareType, true
}

// SetCompareType sets field value
func (o *CreateL7PolicyRuleModel) SetCompareType(v L7RuleCompareType) {
	o.CompareType = v
}

// GetIsInverted returns the IsInverted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateL7PolicyRuleModel) GetIsInverted() bool {
	if o == nil || IsNil(o.IsInverted.Get()) {
		var ret bool
		return ret
	}
	return *o.IsInverted.Get()
}

// GetIsInvertedOk returns a tuple with the IsInverted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateL7PolicyRuleModel) GetIsInvertedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsInverted.Get(), o.IsInverted.IsSet()
}

// HasIsInverted returns a boolean if a field has been set.
func (o *CreateL7PolicyRuleModel) HasIsInverted() bool {
	if o != nil && o.IsInverted.IsSet() {
		return true
	}

	return false
}

// SetIsInverted gets a reference to the given NullableBool and assigns it to the IsInverted field.
func (o *CreateL7PolicyRuleModel) SetIsInverted(v bool) {
	o.IsInverted.Set(&v)
}

// SetIsInvertedNil sets the value for IsInverted to be an explicit nil
func (o *CreateL7PolicyRuleModel) SetIsInvertedNil() {
	o.IsInverted.Set(nil)
}

// UnsetIsInverted ensures that no value is present for IsInverted, not even an explicit nil
func (o *CreateL7PolicyRuleModel) UnsetIsInverted() {
	o.IsInverted.Unset()
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateL7PolicyRuleModel) GetKey() string {
	if o == nil || IsNil(o.Key.Get()) {
		var ret string
		return ret
	}
	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateL7PolicyRuleModel) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// HasKey returns a boolean if a field has been set.
func (o *CreateL7PolicyRuleModel) HasKey() bool {
	if o != nil && o.Key.IsSet() {
		return true
	}

	return false
}

// SetKey gets a reference to the given NullableString and assigns it to the Key field.
func (o *CreateL7PolicyRuleModel) SetKey(v string) {
	o.Key.Set(&v)
}

// SetKeyNil sets the value for Key to be an explicit nil
func (o *CreateL7PolicyRuleModel) SetKeyNil() {
	o.Key.Set(nil)
}

// UnsetKey ensures that no value is present for Key, not even an explicit nil
func (o *CreateL7PolicyRuleModel) UnsetKey() {
	o.Key.Unset()
}

// GetType returns the Type field value
func (o *CreateL7PolicyRuleModel) GetType() L7RuleType {
	if o == nil {
		var ret L7RuleType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateL7PolicyRuleModel) GetTypeOk() (*L7RuleType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateL7PolicyRuleModel) SetType(v L7RuleType) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *CreateL7PolicyRuleModel) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CreateL7PolicyRuleModel) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CreateL7PolicyRuleModel) SetValue(v string) {
	o.Value = v
}

func (o CreateL7PolicyRuleModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateL7PolicyRuleModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["compare_type"] = o.CompareType
	if o.IsInverted.IsSet() {
		toSerialize["is_inverted"] = o.IsInverted.Get()
	}
	if o.Key.IsSet() {
		toSerialize["key"] = o.Key.Get()
	}
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateL7PolicyRuleModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"compare_type",
		"type",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateL7PolicyRuleModel := _CreateL7PolicyRuleModel{}

	err = json.Unmarshal(data, &varCreateL7PolicyRuleModel)

	if err != nil {
		return err
	}

	*o = CreateL7PolicyRuleModel(varCreateL7PolicyRuleModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "compare_type")
		delete(additionalProperties, "is_inverted")
		delete(additionalProperties, "key")
		delete(additionalProperties, "type")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateL7PolicyRuleModel struct {
	value *CreateL7PolicyRuleModel
	isSet bool
}

func (v NullableCreateL7PolicyRuleModel) Get() *CreateL7PolicyRuleModel {
	return v.value
}

func (v *NullableCreateL7PolicyRuleModel) Set(val *CreateL7PolicyRuleModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateL7PolicyRuleModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateL7PolicyRuleModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateL7PolicyRuleModel(val *CreateL7PolicyRuleModel) *NullableCreateL7PolicyRuleModel {
	return &NullableCreateL7PolicyRuleModel{value: val, isSet: true}
}

func (v NullableCreateL7PolicyRuleModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateL7PolicyRuleModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
