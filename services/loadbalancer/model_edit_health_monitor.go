/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
)

// checks if the EditHealthMonitor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditHealthMonitor{}

// EditHealthMonitor struct for EditHealthMonitor
type EditHealthMonitor struct {
	Delay NullableInt32 `json:"delay,omitempty"`
	// 정상으로 간주할 응답 코드 범위 (type=HTTP/HTTPS)
	ExpectedCodes *string `json:"expected_codes,omitempty"`
	// HTTP/HTTPS 헬스 체크 시 사용할 메서드 <br/> - `CONNECT`: 서버와 터널 연결 시도 <br/> - `GET`: 리소스 조회 요청 (기본적으로 가장 많이 사용) <br/> - `POST`: 데이터 전송 요청 <br/> - `DELETE`: 리소스 삭제 요청 <br/> - `PATCH`: 리소스 일부 업데이트 요청 <br/> - `PUT`: 리소스 전체 업데이트 요청 <br/> - `HEAD`: 헤더만 조회 (본문 없음, 응답 속도 확인에 유용) <br/> - `OPTIONS`: 서버가 지원하는 메서드 확인 <br/> - `TRACE`: 요청/응답 루프백 테스트
	HttpMethod *HealthMonitorMethod `json:"http_method,omitempty"`
	// HTTP 프로토콜 버전 <br/> - `1.0`: HTTP/1.0 프로토콜<br/>- `1.1`: HTTP/1.1 프로토콜(기본적으로 가장 널리 사용되는 버전)
	HttpVersion          *HealthMonitorHttpVersion `json:"http_version,omitempty"`
	MaxRetries           NullableInt32             `json:"max_retries,omitempty"`
	MaxRetriesDown       NullableInt32             `json:"max_retries_down,omitempty"`
	Timeout              NullableInt32             `json:"timeout,omitempty"`
	UrlPath              NullableString            `json:"url_path,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EditHealthMonitor EditHealthMonitor

// NewEditHealthMonitor instantiates a new EditHealthMonitor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditHealthMonitor() *EditHealthMonitor {
	this := EditHealthMonitor{}
	return &this
}

// NewEditHealthMonitorWithDefaults instantiates a new EditHealthMonitor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditHealthMonitorWithDefaults() *EditHealthMonitor {
	this := EditHealthMonitor{}
	return &this
}

// GetDelay returns the Delay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditHealthMonitor) GetDelay() int32 {
	if o == nil || IsNil(o.Delay.Get()) {
		var ret int32
		return ret
	}
	return *o.Delay.Get()
}

// GetDelayOk returns a tuple with the Delay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditHealthMonitor) GetDelayOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Delay.Get(), o.Delay.IsSet()
}

// HasDelay returns a boolean if a field has been set.
func (o *EditHealthMonitor) HasDelay() bool {
	if o != nil && o.Delay.IsSet() {
		return true
	}

	return false
}

// SetDelay gets a reference to the given NullableInt32 and assigns it to the Delay field.
func (o *EditHealthMonitor) SetDelay(v int32) {
	o.Delay.Set(&v)
}

// SetDelayNil sets the value for Delay to be an explicit nil
func (o *EditHealthMonitor) SetDelayNil() {
	o.Delay.Set(nil)
}

// UnsetDelay ensures that no value is present for Delay, not even an explicit nil
func (o *EditHealthMonitor) UnsetDelay() {
	o.Delay.Unset()
}

// GetExpectedCodes returns the ExpectedCodes field value if set, zero value otherwise.
func (o *EditHealthMonitor) GetExpectedCodes() string {
	if o == nil || IsNil(o.ExpectedCodes) {
		var ret string
		return ret
	}
	return *o.ExpectedCodes
}

// GetExpectedCodesOk returns a tuple with the ExpectedCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditHealthMonitor) GetExpectedCodesOk() (*string, bool) {
	if o == nil || IsNil(o.ExpectedCodes) {
		return nil, false
	}
	return o.ExpectedCodes, true
}

// HasExpectedCodes returns a boolean if a field has been set.
func (o *EditHealthMonitor) HasExpectedCodes() bool {
	if o != nil && !IsNil(o.ExpectedCodes) {
		return true
	}

	return false
}

// SetExpectedCodes gets a reference to the given string and assigns it to the ExpectedCodes field.
func (o *EditHealthMonitor) SetExpectedCodes(v string) {
	o.ExpectedCodes = &v
}

// GetHttpMethod returns the HttpMethod field value if set, zero value otherwise.
func (o *EditHealthMonitor) GetHttpMethod() HealthMonitorMethod {
	if o == nil || IsNil(o.HttpMethod) {
		var ret HealthMonitorMethod
		return ret
	}
	return *o.HttpMethod
}

// GetHttpMethodOk returns a tuple with the HttpMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditHealthMonitor) GetHttpMethodOk() (*HealthMonitorMethod, bool) {
	if o == nil || IsNil(o.HttpMethod) {
		return nil, false
	}
	return o.HttpMethod, true
}

// HasHttpMethod returns a boolean if a field has been set.
func (o *EditHealthMonitor) HasHttpMethod() bool {
	if o != nil && !IsNil(o.HttpMethod) {
		return true
	}

	return false
}

// SetHttpMethod gets a reference to the given HealthMonitorMethod and assigns it to the HttpMethod field.
func (o *EditHealthMonitor) SetHttpMethod(v HealthMonitorMethod) {
	o.HttpMethod = &v
}

// GetHttpVersion returns the HttpVersion field value if set, zero value otherwise.
func (o *EditHealthMonitor) GetHttpVersion() HealthMonitorHttpVersion {
	if o == nil || IsNil(o.HttpVersion) {
		var ret HealthMonitorHttpVersion
		return ret
	}
	return *o.HttpVersion
}

// GetHttpVersionOk returns a tuple with the HttpVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditHealthMonitor) GetHttpVersionOk() (*HealthMonitorHttpVersion, bool) {
	if o == nil || IsNil(o.HttpVersion) {
		return nil, false
	}
	return o.HttpVersion, true
}

// HasHttpVersion returns a boolean if a field has been set.
func (o *EditHealthMonitor) HasHttpVersion() bool {
	if o != nil && !IsNil(o.HttpVersion) {
		return true
	}

	return false
}

// SetHttpVersion gets a reference to the given HealthMonitorHttpVersion and assigns it to the HttpVersion field.
func (o *EditHealthMonitor) SetHttpVersion(v HealthMonitorHttpVersion) {
	o.HttpVersion = &v
}

// GetMaxRetries returns the MaxRetries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditHealthMonitor) GetMaxRetries() int32 {
	if o == nil || IsNil(o.MaxRetries.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxRetries.Get()
}

// GetMaxRetriesOk returns a tuple with the MaxRetries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditHealthMonitor) GetMaxRetriesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxRetries.Get(), o.MaxRetries.IsSet()
}

// HasMaxRetries returns a boolean if a field has been set.
func (o *EditHealthMonitor) HasMaxRetries() bool {
	if o != nil && o.MaxRetries.IsSet() {
		return true
	}

	return false
}

// SetMaxRetries gets a reference to the given NullableInt32 and assigns it to the MaxRetries field.
func (o *EditHealthMonitor) SetMaxRetries(v int32) {
	o.MaxRetries.Set(&v)
}

// SetMaxRetriesNil sets the value for MaxRetries to be an explicit nil
func (o *EditHealthMonitor) SetMaxRetriesNil() {
	o.MaxRetries.Set(nil)
}

// UnsetMaxRetries ensures that no value is present for MaxRetries, not even an explicit nil
func (o *EditHealthMonitor) UnsetMaxRetries() {
	o.MaxRetries.Unset()
}

// GetMaxRetriesDown returns the MaxRetriesDown field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditHealthMonitor) GetMaxRetriesDown() int32 {
	if o == nil || IsNil(o.MaxRetriesDown.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxRetriesDown.Get()
}

// GetMaxRetriesDownOk returns a tuple with the MaxRetriesDown field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditHealthMonitor) GetMaxRetriesDownOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxRetriesDown.Get(), o.MaxRetriesDown.IsSet()
}

// HasMaxRetriesDown returns a boolean if a field has been set.
func (o *EditHealthMonitor) HasMaxRetriesDown() bool {
	if o != nil && o.MaxRetriesDown.IsSet() {
		return true
	}

	return false
}

// SetMaxRetriesDown gets a reference to the given NullableInt32 and assigns it to the MaxRetriesDown field.
func (o *EditHealthMonitor) SetMaxRetriesDown(v int32) {
	o.MaxRetriesDown.Set(&v)
}

// SetMaxRetriesDownNil sets the value for MaxRetriesDown to be an explicit nil
func (o *EditHealthMonitor) SetMaxRetriesDownNil() {
	o.MaxRetriesDown.Set(nil)
}

// UnsetMaxRetriesDown ensures that no value is present for MaxRetriesDown, not even an explicit nil
func (o *EditHealthMonitor) UnsetMaxRetriesDown() {
	o.MaxRetriesDown.Unset()
}

// GetTimeout returns the Timeout field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditHealthMonitor) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout.Get()) {
		var ret int32
		return ret
	}
	return *o.Timeout.Get()
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditHealthMonitor) GetTimeoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timeout.Get(), o.Timeout.IsSet()
}

// HasTimeout returns a boolean if a field has been set.
func (o *EditHealthMonitor) HasTimeout() bool {
	if o != nil && o.Timeout.IsSet() {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given NullableInt32 and assigns it to the Timeout field.
func (o *EditHealthMonitor) SetTimeout(v int32) {
	o.Timeout.Set(&v)
}

// SetTimeoutNil sets the value for Timeout to be an explicit nil
func (o *EditHealthMonitor) SetTimeoutNil() {
	o.Timeout.Set(nil)
}

// UnsetTimeout ensures that no value is present for Timeout, not even an explicit nil
func (o *EditHealthMonitor) UnsetTimeout() {
	o.Timeout.Unset()
}

// GetUrlPath returns the UrlPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditHealthMonitor) GetUrlPath() string {
	if o == nil || IsNil(o.UrlPath.Get()) {
		var ret string
		return ret
	}
	return *o.UrlPath.Get()
}

// GetUrlPathOk returns a tuple with the UrlPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditHealthMonitor) GetUrlPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UrlPath.Get(), o.UrlPath.IsSet()
}

// HasUrlPath returns a boolean if a field has been set.
func (o *EditHealthMonitor) HasUrlPath() bool {
	if o != nil && o.UrlPath.IsSet() {
		return true
	}

	return false
}

// SetUrlPath gets a reference to the given NullableString and assigns it to the UrlPath field.
func (o *EditHealthMonitor) SetUrlPath(v string) {
	o.UrlPath.Set(&v)
}

// SetUrlPathNil sets the value for UrlPath to be an explicit nil
func (o *EditHealthMonitor) SetUrlPathNil() {
	o.UrlPath.Set(nil)
}

// UnsetUrlPath ensures that no value is present for UrlPath, not even an explicit nil
func (o *EditHealthMonitor) UnsetUrlPath() {
	o.UrlPath.Unset()
}

func (o EditHealthMonitor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditHealthMonitor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Delay.IsSet() {
		toSerialize["delay"] = o.Delay.Get()
	}
	if !IsNil(o.ExpectedCodes) {
		toSerialize["expected_codes"] = o.ExpectedCodes
	}
	if !IsNil(o.HttpMethod) {
		toSerialize["http_method"] = o.HttpMethod
	}
	if !IsNil(o.HttpVersion) {
		toSerialize["http_version"] = o.HttpVersion
	}
	if o.MaxRetries.IsSet() {
		toSerialize["max_retries"] = o.MaxRetries.Get()
	}
	if o.MaxRetriesDown.IsSet() {
		toSerialize["max_retries_down"] = o.MaxRetriesDown.Get()
	}
	if o.Timeout.IsSet() {
		toSerialize["timeout"] = o.Timeout.Get()
	}
	if o.UrlPath.IsSet() {
		toSerialize["url_path"] = o.UrlPath.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EditHealthMonitor) UnmarshalJSON(data []byte) (err error) {
	varEditHealthMonitor := _EditHealthMonitor{}

	err = json.Unmarshal(data, &varEditHealthMonitor)

	if err != nil {
		return err
	}

	*o = EditHealthMonitor(varEditHealthMonitor)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "delay")
		delete(additionalProperties, "expected_codes")
		delete(additionalProperties, "http_method")
		delete(additionalProperties, "http_version")
		delete(additionalProperties, "max_retries")
		delete(additionalProperties, "max_retries_down")
		delete(additionalProperties, "timeout")
		delete(additionalProperties, "url_path")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEditHealthMonitor struct {
	value *EditHealthMonitor
	isSet bool
}

func (v NullableEditHealthMonitor) Get() *EditHealthMonitor {
	return v.value
}

func (v *NullableEditHealthMonitor) Set(val *EditHealthMonitor) {
	v.value = val
	v.isSet = true
}

func (v NullableEditHealthMonitor) IsSet() bool {
	return v.isSet
}

func (v *NullableEditHealthMonitor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditHealthMonitor(val *EditHealthMonitor) *NullableEditHealthMonitor {
	return &NullableEditHealthMonitor{value: val, isSet: true}
}

func (v NullableEditHealthMonitor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditHealthMonitor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
