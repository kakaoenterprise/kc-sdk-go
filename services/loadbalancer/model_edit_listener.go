/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
)

// checks if the EditListener type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditListener{}

// EditListener struct for EditListener
type EditListener struct {
	DefaultTlsContainerRef NullableString            `json:"default_tls_container_ref,omitempty"`
	SniContainerRefs       []string                  `json:"sni_container_refs,omitempty"`
	ConnectionLimit        NullableInt32             `json:"connection_limit,omitempty"`
	TargetGroupId          NullableString            `json:"target_group_id,omitempty"`
	TlsMinVersion          NullableTLSVersion        `json:"tls_min_version,omitempty"`
	TimeoutClientData      NullableInt32             `json:"timeout_client_data,omitempty"`
	InsertHeaders          NullableInsertHeaderModel `json:"insert_headers,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _EditListener EditListener

// NewEditListener instantiates a new EditListener object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditListener() *EditListener {
	this := EditListener{}
	return &this
}

// NewEditListenerWithDefaults instantiates a new EditListener object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditListenerWithDefaults() *EditListener {
	this := EditListener{}
	return &this
}

// GetDefaultTlsContainerRef returns the DefaultTlsContainerRef field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditListener) GetDefaultTlsContainerRef() string {
	if o == nil || IsNil(o.DefaultTlsContainerRef.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultTlsContainerRef.Get()
}

// GetDefaultTlsContainerRefOk returns a tuple with the DefaultTlsContainerRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditListener) GetDefaultTlsContainerRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultTlsContainerRef.Get(), o.DefaultTlsContainerRef.IsSet()
}

// HasDefaultTlsContainerRef returns a boolean if a field has been set.
func (o *EditListener) HasDefaultTlsContainerRef() bool {
	if o != nil && o.DefaultTlsContainerRef.IsSet() {
		return true
	}

	return false
}

// SetDefaultTlsContainerRef gets a reference to the given NullableString and assigns it to the DefaultTlsContainerRef field.
func (o *EditListener) SetDefaultTlsContainerRef(v string) {
	o.DefaultTlsContainerRef.Set(&v)
}

// SetDefaultTlsContainerRefNil sets the value for DefaultTlsContainerRef to be an explicit nil
func (o *EditListener) SetDefaultTlsContainerRefNil() {
	o.DefaultTlsContainerRef.Set(nil)
}

// UnsetDefaultTlsContainerRef ensures that no value is present for DefaultTlsContainerRef, not even an explicit nil
func (o *EditListener) UnsetDefaultTlsContainerRef() {
	o.DefaultTlsContainerRef.Unset()
}

// GetSniContainerRefs returns the SniContainerRefs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditListener) GetSniContainerRefs() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SniContainerRefs
}

// GetSniContainerRefsOk returns a tuple with the SniContainerRefs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditListener) GetSniContainerRefsOk() ([]string, bool) {
	if o == nil || IsNil(o.SniContainerRefs) {
		return nil, false
	}
	return o.SniContainerRefs, true
}

// HasSniContainerRefs returns a boolean if a field has been set.
func (o *EditListener) HasSniContainerRefs() bool {
	if o != nil && !IsNil(o.SniContainerRefs) {
		return true
	}

	return false
}

// SetSniContainerRefs gets a reference to the given []string and assigns it to the SniContainerRefs field.
func (o *EditListener) SetSniContainerRefs(v []string) {
	o.SniContainerRefs = v
}

// GetConnectionLimit returns the ConnectionLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditListener) GetConnectionLimit() int32 {
	if o == nil || IsNil(o.ConnectionLimit.Get()) {
		var ret int32
		return ret
	}
	return *o.ConnectionLimit.Get()
}

// GetConnectionLimitOk returns a tuple with the ConnectionLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditListener) GetConnectionLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectionLimit.Get(), o.ConnectionLimit.IsSet()
}

// HasConnectionLimit returns a boolean if a field has been set.
func (o *EditListener) HasConnectionLimit() bool {
	if o != nil && o.ConnectionLimit.IsSet() {
		return true
	}

	return false
}

// SetConnectionLimit gets a reference to the given NullableInt32 and assigns it to the ConnectionLimit field.
func (o *EditListener) SetConnectionLimit(v int32) {
	o.ConnectionLimit.Set(&v)
}

// SetConnectionLimitNil sets the value for ConnectionLimit to be an explicit nil
func (o *EditListener) SetConnectionLimitNil() {
	o.ConnectionLimit.Set(nil)
}

// UnsetConnectionLimit ensures that no value is present for ConnectionLimit, not even an explicit nil
func (o *EditListener) UnsetConnectionLimit() {
	o.ConnectionLimit.Unset()
}

// GetTargetGroupId returns the TargetGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditListener) GetTargetGroupId() string {
	if o == nil || IsNil(o.TargetGroupId.Get()) {
		var ret string
		return ret
	}
	return *o.TargetGroupId.Get()
}

// GetTargetGroupIdOk returns a tuple with the TargetGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditListener) GetTargetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetGroupId.Get(), o.TargetGroupId.IsSet()
}

// HasTargetGroupId returns a boolean if a field has been set.
func (o *EditListener) HasTargetGroupId() bool {
	if o != nil && o.TargetGroupId.IsSet() {
		return true
	}

	return false
}

// SetTargetGroupId gets a reference to the given NullableString and assigns it to the TargetGroupId field.
func (o *EditListener) SetTargetGroupId(v string) {
	o.TargetGroupId.Set(&v)
}

// SetTargetGroupIdNil sets the value for TargetGroupId to be an explicit nil
func (o *EditListener) SetTargetGroupIdNil() {
	o.TargetGroupId.Set(nil)
}

// UnsetTargetGroupId ensures that no value is present for TargetGroupId, not even an explicit nil
func (o *EditListener) UnsetTargetGroupId() {
	o.TargetGroupId.Unset()
}

// GetTlsMinVersion returns the TlsMinVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditListener) GetTlsMinVersion() TLSVersion {
	if o == nil || IsNil(o.TlsMinVersion.Get()) {
		var ret TLSVersion
		return ret
	}
	return *o.TlsMinVersion.Get()
}

// GetTlsMinVersionOk returns a tuple with the TlsMinVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditListener) GetTlsMinVersionOk() (*TLSVersion, bool) {
	if o == nil {
		return nil, false
	}
	return o.TlsMinVersion.Get(), o.TlsMinVersion.IsSet()
}

// HasTlsMinVersion returns a boolean if a field has been set.
func (o *EditListener) HasTlsMinVersion() bool {
	if o != nil && o.TlsMinVersion.IsSet() {
		return true
	}

	return false
}

// SetTlsMinVersion gets a reference to the given NullableTLSVersion and assigns it to the TlsMinVersion field.
func (o *EditListener) SetTlsMinVersion(v TLSVersion) {
	o.TlsMinVersion.Set(&v)
}

// SetTlsMinVersionNil sets the value for TlsMinVersion to be an explicit nil
func (o *EditListener) SetTlsMinVersionNil() {
	o.TlsMinVersion.Set(nil)
}

// UnsetTlsMinVersion ensures that no value is present for TlsMinVersion, not even an explicit nil
func (o *EditListener) UnsetTlsMinVersion() {
	o.TlsMinVersion.Unset()
}

// GetTimeoutClientData returns the TimeoutClientData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditListener) GetTimeoutClientData() int32 {
	if o == nil || IsNil(o.TimeoutClientData.Get()) {
		var ret int32
		return ret
	}
	return *o.TimeoutClientData.Get()
}

// GetTimeoutClientDataOk returns a tuple with the TimeoutClientData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditListener) GetTimeoutClientDataOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeoutClientData.Get(), o.TimeoutClientData.IsSet()
}

// HasTimeoutClientData returns a boolean if a field has been set.
func (o *EditListener) HasTimeoutClientData() bool {
	if o != nil && o.TimeoutClientData.IsSet() {
		return true
	}

	return false
}

// SetTimeoutClientData gets a reference to the given NullableInt32 and assigns it to the TimeoutClientData field.
func (o *EditListener) SetTimeoutClientData(v int32) {
	o.TimeoutClientData.Set(&v)
}

// SetTimeoutClientDataNil sets the value for TimeoutClientData to be an explicit nil
func (o *EditListener) SetTimeoutClientDataNil() {
	o.TimeoutClientData.Set(nil)
}

// UnsetTimeoutClientData ensures that no value is present for TimeoutClientData, not even an explicit nil
func (o *EditListener) UnsetTimeoutClientData() {
	o.TimeoutClientData.Unset()
}

// GetInsertHeaders returns the InsertHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditListener) GetInsertHeaders() InsertHeaderModel {
	if o == nil || IsNil(o.InsertHeaders.Get()) {
		var ret InsertHeaderModel
		return ret
	}
	return *o.InsertHeaders.Get()
}

// GetInsertHeadersOk returns a tuple with the InsertHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditListener) GetInsertHeadersOk() (*InsertHeaderModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.InsertHeaders.Get(), o.InsertHeaders.IsSet()
}

// HasInsertHeaders returns a boolean if a field has been set.
func (o *EditListener) HasInsertHeaders() bool {
	if o != nil && o.InsertHeaders.IsSet() {
		return true
	}

	return false
}

// SetInsertHeaders gets a reference to the given NullableInsertHeaderModel and assigns it to the InsertHeaders field.
func (o *EditListener) SetInsertHeaders(v InsertHeaderModel) {
	o.InsertHeaders.Set(&v)
}

// SetInsertHeadersNil sets the value for InsertHeaders to be an explicit nil
func (o *EditListener) SetInsertHeadersNil() {
	o.InsertHeaders.Set(nil)
}

// UnsetInsertHeaders ensures that no value is present for InsertHeaders, not even an explicit nil
func (o *EditListener) UnsetInsertHeaders() {
	o.InsertHeaders.Unset()
}

func (o EditListener) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditListener) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultTlsContainerRef.IsSet() {
		toSerialize["default_tls_container_ref"] = o.DefaultTlsContainerRef.Get()
	}
	if o.SniContainerRefs != nil {
		toSerialize["sni_container_refs"] = o.SniContainerRefs
	}
	if o.ConnectionLimit.IsSet() {
		toSerialize["connection_limit"] = o.ConnectionLimit.Get()
	}
	if o.TargetGroupId.IsSet() {
		toSerialize["target_group_id"] = o.TargetGroupId.Get()
	}
	if o.TlsMinVersion.IsSet() {
		toSerialize["tls_min_version"] = o.TlsMinVersion.Get()
	}
	if o.TimeoutClientData.IsSet() {
		toSerialize["timeout_client_data"] = o.TimeoutClientData.Get()
	}
	if o.InsertHeaders.IsSet() {
		toSerialize["insert_headers"] = o.InsertHeaders.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EditListener) UnmarshalJSON(data []byte) (err error) {
	varEditListener := _EditListener{}

	err = json.Unmarshal(data, &varEditListener)

	if err != nil {
		return err
	}

	*o = EditListener(varEditListener)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "default_tls_container_ref")
		delete(additionalProperties, "sni_container_refs")
		delete(additionalProperties, "connection_limit")
		delete(additionalProperties, "target_group_id")
		delete(additionalProperties, "tls_min_version")
		delete(additionalProperties, "timeout_client_data")
		delete(additionalProperties, "insert_headers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEditListener struct {
	value *EditListener
	isSet bool
}

func (v NullableEditListener) Get() *EditListener {
	return v.value
}

func (v *NullableEditListener) Set(val *EditListener) {
	v.value = val
	v.isSet = true
}

func (v NullableEditListener) IsSet() bool {
	return v.isSet
}

func (v *NullableEditListener) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditListener(val *EditListener) *NullableEditListener {
	return &NullableEditListener{value: val, isSet: true}
}

func (v NullableEditListener) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditListener) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
