/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
)

// checks if the FlavorListModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlavorListModel{}

// FlavorListModel struct for FlavorListModel
type FlavorListModel struct {
	Flavors              []FlavorModel `json:"flavors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FlavorListModel FlavorListModel

// NewFlavorListModel instantiates a new FlavorListModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlavorListModel() *FlavorListModel {
	this := FlavorListModel{}
	return &this
}

// NewFlavorListModelWithDefaults instantiates a new FlavorListModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlavorListModelWithDefaults() *FlavorListModel {
	this := FlavorListModel{}
	return &this
}

// GetFlavors returns the Flavors field value if set, zero value otherwise.
func (o *FlavorListModel) GetFlavors() []FlavorModel {
	if o == nil || IsNil(o.Flavors) {
		var ret []FlavorModel
		return ret
	}
	return o.Flavors
}

// GetFlavorsOk returns a tuple with the Flavors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorListModel) GetFlavorsOk() ([]FlavorModel, bool) {
	if o == nil || IsNil(o.Flavors) {
		return nil, false
	}
	return o.Flavors, true
}

// HasFlavors returns a boolean if a field has been set.
func (o *FlavorListModel) HasFlavors() bool {
	if o != nil && !IsNil(o.Flavors) {
		return true
	}

	return false
}

// SetFlavors gets a reference to the given []FlavorModel and assigns it to the Flavors field.
func (o *FlavorListModel) SetFlavors(v []FlavorModel) {
	o.Flavors = v
}

func (o FlavorListModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlavorListModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Flavors) {
		toSerialize["flavors"] = o.Flavors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FlavorListModel) UnmarshalJSON(data []byte) (err error) {
	varFlavorListModel := _FlavorListModel{}

	err = json.Unmarshal(data, &varFlavorListModel)

	if err != nil {
		return err
	}

	*o = FlavorListModel(varFlavorListModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "flavors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFlavorListModel struct {
	value *FlavorListModel
	isSet bool
}

func (v NullableFlavorListModel) Get() *FlavorListModel {
	return v.value
}

func (v *NullableFlavorListModel) Set(val *FlavorListModel) {
	v.value = val
	v.isSet = true
}

func (v NullableFlavorListModel) IsSet() bool {
	return v.isSet
}

func (v *NullableFlavorListModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlavorListModel(val *FlavorListModel) *NullableFlavorListModel {
	return &NullableFlavorListModel{value: val, isSet: true}
}

func (v NullableFlavorListModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlavorListModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
