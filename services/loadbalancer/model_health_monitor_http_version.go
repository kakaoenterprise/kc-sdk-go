/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// HealthMonitorHttpVersion the model 'HealthMonitorHttpVersion'
type HealthMonitorHttpVersion string

// List of HealthMonitorHttpVersion
const (
	HEALTHMONITORHTTPVERSION__1_0 HealthMonitorHttpVersion = "1.0"
	HEALTHMONITORHTTPVERSION__1_1 HealthMonitorHttpVersion = "1.1"
)

// All allowed values of HealthMonitorHttpVersion enum
var AllowedHealthMonitorHttpVersionEnumValues = []HealthMonitorHttpVersion{
	"1.0",
	"1.1",
}

func (v *HealthMonitorHttpVersion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HealthMonitorHttpVersion(value)
	for _, existing := range AllowedHealthMonitorHttpVersionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HealthMonitorHttpVersion", value)
}

// NewHealthMonitorHttpVersionFromValue returns a pointer to a valid HealthMonitorHttpVersion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHealthMonitorHttpVersionFromValue(v string) (*HealthMonitorHttpVersion, error) {
	ev := HealthMonitorHttpVersion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HealthMonitorHttpVersion: valid values are %v", v, AllowedHealthMonitorHttpVersionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HealthMonitorHttpVersion) IsValid() bool {
	for _, existing := range AllowedHealthMonitorHttpVersionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HealthMonitorHttpVersion value
func (v HealthMonitorHttpVersion) Ptr() *HealthMonitorHttpVersion {
	return &v
}

type NullableHealthMonitorHttpVersion struct {
	value *HealthMonitorHttpVersion
	isSet bool
}

func (v NullableHealthMonitorHttpVersion) Get() *HealthMonitorHttpVersion {
	return v.value
}

func (v *NullableHealthMonitorHttpVersion) Set(val *HealthMonitorHttpVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthMonitorHttpVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthMonitorHttpVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthMonitorHttpVersion(val *HealthMonitorHttpVersion) *NullableHealthMonitorHttpVersion {
	return &NullableHealthMonitorHttpVersion{value: val, isSet: true}
}

func (v NullableHealthMonitorHttpVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthMonitorHttpVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
