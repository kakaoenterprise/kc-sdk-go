/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// HealthMonitorMethod the model 'HealthMonitorMethod'
type HealthMonitorMethod string

// List of HealthMonitorMethod
const (
	HEALTHMONITORMETHOD_CONNECT HealthMonitorMethod = "CONNECT"
	HEALTHMONITORMETHOD_GET     HealthMonitorMethod = "GET"
	HEALTHMONITORMETHOD_POST    HealthMonitorMethod = "POST"
	HEALTHMONITORMETHOD_DELETE  HealthMonitorMethod = "DELETE"
	HEALTHMONITORMETHOD_PATCH   HealthMonitorMethod = "PATCH"
	HEALTHMONITORMETHOD_PUT     HealthMonitorMethod = "PUT"
	HEALTHMONITORMETHOD_HEAD    HealthMonitorMethod = "HEAD"
	HEALTHMONITORMETHOD_OPTIONS HealthMonitorMethod = "OPTIONS"
	HEALTHMONITORMETHOD_TRACE   HealthMonitorMethod = "TRACE"
)

// All allowed values of HealthMonitorMethod enum
var AllowedHealthMonitorMethodEnumValues = []HealthMonitorMethod{
	"CONNECT",
	"GET",
	"POST",
	"DELETE",
	"PATCH",
	"PUT",
	"HEAD",
	"OPTIONS",
	"TRACE",
}

func (v *HealthMonitorMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HealthMonitorMethod(value)
	for _, existing := range AllowedHealthMonitorMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HealthMonitorMethod", value)
}

// NewHealthMonitorMethodFromValue returns a pointer to a valid HealthMonitorMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHealthMonitorMethodFromValue(v string) (*HealthMonitorMethod, error) {
	ev := HealthMonitorMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HealthMonitorMethod: valid values are %v", v, AllowedHealthMonitorMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HealthMonitorMethod) IsValid() bool {
	for _, existing := range AllowedHealthMonitorMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HealthMonitorMethod value
func (v HealthMonitorMethod) Ptr() *HealthMonitorMethod {
	return &v
}

type NullableHealthMonitorMethod struct {
	value *HealthMonitorMethod
	isSet bool
}

func (v NullableHealthMonitorMethod) Get() *HealthMonitorMethod {
	return v.value
}

func (v *NullableHealthMonitorMethod) Set(val *HealthMonitorMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthMonitorMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthMonitorMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthMonitorMethod(val *HealthMonitorMethod) *NullableHealthMonitorMethod {
	return &NullableHealthMonitorMethod{value: val, isSet: true}
}

func (v NullableHealthMonitorMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthMonitorMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
