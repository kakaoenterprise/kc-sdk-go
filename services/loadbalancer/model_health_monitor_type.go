/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// HealthMonitorType the model 'HealthMonitorType'
type HealthMonitorType string

// List of HealthMonitorType
const (
	HEALTHMONITORTYPE_HTTP  HealthMonitorType = "HTTP"
	HEALTHMONITORTYPE_HTTPS HealthMonitorType = "HTTPS"
	HEALTHMONITORTYPE_TCP   HealthMonitorType = "TCP"
	HEALTHMONITORTYPE_PING  HealthMonitorType = "PING"
)

// All allowed values of HealthMonitorType enum
var AllowedHealthMonitorTypeEnumValues = []HealthMonitorType{
	"HTTP",
	"HTTPS",
	"TCP",
	"PING",
}

func (v *HealthMonitorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HealthMonitorType(value)
	for _, existing := range AllowedHealthMonitorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HealthMonitorType", value)
}

// NewHealthMonitorTypeFromValue returns a pointer to a valid HealthMonitorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHealthMonitorTypeFromValue(v string) (*HealthMonitorType, error) {
	ev := HealthMonitorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HealthMonitorType: valid values are %v", v, AllowedHealthMonitorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HealthMonitorType) IsValid() bool {
	for _, existing := range AllowedHealthMonitorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HealthMonitorType value
func (v HealthMonitorType) Ptr() *HealthMonitorType {
	return &v
}

type NullableHealthMonitorType struct {
	value *HealthMonitorType
	isSet bool
}

func (v NullableHealthMonitorType) Get() *HealthMonitorType {
	return v.value
}

func (v *NullableHealthMonitorType) Set(val *HealthMonitorType) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthMonitorType) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthMonitorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthMonitorType(val *HealthMonitorType) *NullableHealthMonitorType {
	return &NullableHealthMonitorType{value: val, isSet: true}
}

func (v NullableHealthMonitorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthMonitorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
