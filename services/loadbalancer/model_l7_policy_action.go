/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// L7PolicyAction the model 'L7PolicyAction'
type L7PolicyAction string

// List of L7PolicyAction
const (
	L7POLICYACTION_REDIRECT_PREFIX  L7PolicyAction = "REDIRECT_PREFIX"
	L7POLICYACTION_REDIRECT_TO_POOL L7PolicyAction = "REDIRECT_TO_POOL"
	L7POLICYACTION_REDIRECT_TO_URL  L7PolicyAction = "REDIRECT_TO_URL"
)

// All allowed values of L7PolicyAction enum
var AllowedL7PolicyActionEnumValues = []L7PolicyAction{
	"REDIRECT_PREFIX",
	"REDIRECT_TO_POOL",
	"REDIRECT_TO_URL",
}

func (v *L7PolicyAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := L7PolicyAction(value)
	for _, existing := range AllowedL7PolicyActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid L7PolicyAction", value)
}

// NewL7PolicyActionFromValue returns a pointer to a valid L7PolicyAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewL7PolicyActionFromValue(v string) (*L7PolicyAction, error) {
	ev := L7PolicyAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for L7PolicyAction: valid values are %v", v, AllowedL7PolicyActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v L7PolicyAction) IsValid() bool {
	for _, existing := range AllowedL7PolicyActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to L7PolicyAction value
func (v L7PolicyAction) Ptr() *L7PolicyAction {
	return &v
}

type NullableL7PolicyAction struct {
	value *L7PolicyAction
	isSet bool
}

func (v NullableL7PolicyAction) Get() *L7PolicyAction {
	return v.value
}

func (v *NullableL7PolicyAction) Set(val *L7PolicyAction) {
	v.value = val
	v.isSet = true
}

func (v NullableL7PolicyAction) IsSet() bool {
	return v.isSet
}

func (v *NullableL7PolicyAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableL7PolicyAction(val *L7PolicyAction) *NullableL7PolicyAction {
	return &NullableL7PolicyAction{value: val, isSet: true}
}

func (v NullableL7PolicyAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableL7PolicyAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
