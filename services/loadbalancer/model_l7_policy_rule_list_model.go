/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// checks if the L7PolicyRuleListModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &L7PolicyRuleListModel{}

// L7PolicyRuleListModel struct for L7PolicyRuleListModel
type L7PolicyRuleListModel struct {
	L7Rules              []BnsLoadBalancerV1ApiListL7PolicyRulesModelL7PolicyRuleModel `json:"l7_rules,omitempty"`
	Pagination           PaginationModel                                               `json:"pagination"`
	AdditionalProperties map[string]interface{}
}

type _L7PolicyRuleListModel L7PolicyRuleListModel

// NewL7PolicyRuleListModel instantiates a new L7PolicyRuleListModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewL7PolicyRuleListModel(pagination PaginationModel) *L7PolicyRuleListModel {
	this := L7PolicyRuleListModel{}
	this.Pagination = pagination
	return &this
}

// NewL7PolicyRuleListModelWithDefaults instantiates a new L7PolicyRuleListModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewL7PolicyRuleListModelWithDefaults() *L7PolicyRuleListModel {
	this := L7PolicyRuleListModel{}
	return &this
}

// GetL7Rules returns the L7Rules field value if set, zero value otherwise.
func (o *L7PolicyRuleListModel) GetL7Rules() []BnsLoadBalancerV1ApiListL7PolicyRulesModelL7PolicyRuleModel {
	if o == nil || IsNil(o.L7Rules) {
		var ret []BnsLoadBalancerV1ApiListL7PolicyRulesModelL7PolicyRuleModel
		return ret
	}
	return o.L7Rules
}

// GetL7RulesOk returns a tuple with the L7Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *L7PolicyRuleListModel) GetL7RulesOk() ([]BnsLoadBalancerV1ApiListL7PolicyRulesModelL7PolicyRuleModel, bool) {
	if o == nil || IsNil(o.L7Rules) {
		return nil, false
	}
	return o.L7Rules, true
}

// HasL7Rules returns a boolean if a field has been set.
func (o *L7PolicyRuleListModel) HasL7Rules() bool {
	if o != nil && !IsNil(o.L7Rules) {
		return true
	}

	return false
}

// SetL7Rules gets a reference to the given []BnsLoadBalancerV1ApiListL7PolicyRulesModelL7PolicyRuleModel and assigns it to the L7Rules field.
func (o *L7PolicyRuleListModel) SetL7Rules(v []BnsLoadBalancerV1ApiListL7PolicyRulesModelL7PolicyRuleModel) {
	o.L7Rules = v
}

// GetPagination returns the Pagination field value
func (o *L7PolicyRuleListModel) GetPagination() PaginationModel {
	if o == nil {
		var ret PaginationModel
		return ret
	}

	return o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value
// and a boolean to check if the value has been set.
func (o *L7PolicyRuleListModel) GetPaginationOk() (*PaginationModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pagination, true
}

// SetPagination sets field value
func (o *L7PolicyRuleListModel) SetPagination(v PaginationModel) {
	o.Pagination = v
}

func (o L7PolicyRuleListModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o L7PolicyRuleListModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.L7Rules) {
		toSerialize["l7_rules"] = o.L7Rules
	}
	toSerialize["pagination"] = o.Pagination

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *L7PolicyRuleListModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pagination",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varL7PolicyRuleListModel := _L7PolicyRuleListModel{}

	err = json.Unmarshal(data, &varL7PolicyRuleListModel)

	if err != nil {
		return err
	}

	*o = L7PolicyRuleListModel(varL7PolicyRuleListModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "l7_rules")
		delete(additionalProperties, "pagination")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableL7PolicyRuleListModel struct {
	value *L7PolicyRuleListModel
	isSet bool
}

func (v NullableL7PolicyRuleListModel) Get() *L7PolicyRuleListModel {
	return v.value
}

func (v *NullableL7PolicyRuleListModel) Set(val *L7PolicyRuleListModel) {
	v.value = val
	v.isSet = true
}

func (v NullableL7PolicyRuleListModel) IsSet() bool {
	return v.isSet
}

func (v *NullableL7PolicyRuleListModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableL7PolicyRuleListModel(val *L7PolicyRuleListModel) *NullableL7PolicyRuleListModel {
	return &NullableL7PolicyRuleListModel{value: val, isSet: true}
}

func (v NullableL7PolicyRuleListModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableL7PolicyRuleListModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
