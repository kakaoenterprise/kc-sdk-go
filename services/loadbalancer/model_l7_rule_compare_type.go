/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// L7RuleCompareType the model 'L7RuleCompareType'
type L7RuleCompareType string

// List of L7RuleCompareType
const (
	L7RULECOMPARETYPE_CONTAINS    L7RuleCompareType = "CONTAINS"
	L7RULECOMPARETYPE_ENDS_WITH   L7RuleCompareType = "ENDS_WITH"
	L7RULECOMPARETYPE_EQUAL_TO    L7RuleCompareType = "EQUAL_TO"
	L7RULECOMPARETYPE_STARTS_WITH L7RuleCompareType = "STARTS_WITH"
)

// All allowed values of L7RuleCompareType enum
var AllowedL7RuleCompareTypeEnumValues = []L7RuleCompareType{
	"CONTAINS",
	"ENDS_WITH",
	"EQUAL_TO",
	"STARTS_WITH",
}

func (v *L7RuleCompareType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := L7RuleCompareType(value)
	for _, existing := range AllowedL7RuleCompareTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid L7RuleCompareType", value)
}

// NewL7RuleCompareTypeFromValue returns a pointer to a valid L7RuleCompareType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewL7RuleCompareTypeFromValue(v string) (*L7RuleCompareType, error) {
	ev := L7RuleCompareType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for L7RuleCompareType: valid values are %v", v, AllowedL7RuleCompareTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v L7RuleCompareType) IsValid() bool {
	for _, existing := range AllowedL7RuleCompareTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to L7RuleCompareType value
func (v L7RuleCompareType) Ptr() *L7RuleCompareType {
	return &v
}

type NullableL7RuleCompareType struct {
	value *L7RuleCompareType
	isSet bool
}

func (v NullableL7RuleCompareType) Get() *L7RuleCompareType {
	return v.value
}

func (v *NullableL7RuleCompareType) Set(val *L7RuleCompareType) {
	v.value = val
	v.isSet = true
}

func (v NullableL7RuleCompareType) IsSet() bool {
	return v.isSet
}

func (v *NullableL7RuleCompareType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableL7RuleCompareType(val *L7RuleCompareType) *NullableL7RuleCompareType {
	return &NullableL7RuleCompareType{value: val, isSet: true}
}

func (v NullableL7RuleCompareType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableL7RuleCompareType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
