/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// L7RuleType the model 'L7RuleType'
type L7RuleType string

// List of L7RuleType
const (
	L7RULETYPE_COOKIE    L7RuleType = "COOKIE"
	L7RULETYPE_FILE_TYPE L7RuleType = "FILE_TYPE"
	L7RULETYPE_HEADER    L7RuleType = "HEADER"
	L7RULETYPE_HOST_NAME L7RuleType = "HOST_NAME"
	L7RULETYPE_PATH      L7RuleType = "PATH"
)

// All allowed values of L7RuleType enum
var AllowedL7RuleTypeEnumValues = []L7RuleType{
	"COOKIE",
	"FILE_TYPE",
	"HEADER",
	"HOST_NAME",
	"PATH",
}

func (v *L7RuleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := L7RuleType(value)
	for _, existing := range AllowedL7RuleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid L7RuleType", value)
}

// NewL7RuleTypeFromValue returns a pointer to a valid L7RuleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewL7RuleTypeFromValue(v string) (*L7RuleType, error) {
	ev := L7RuleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for L7RuleType: valid values are %v", v, AllowedL7RuleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v L7RuleType) IsValid() bool {
	for _, existing := range AllowedL7RuleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to L7RuleType value
func (v L7RuleType) Ptr() *L7RuleType {
	return &v
}

type NullableL7RuleType struct {
	value *L7RuleType
	isSet bool
}

func (v NullableL7RuleType) Get() *L7RuleType {
	return v.value
}

func (v *NullableL7RuleType) Set(val *L7RuleType) {
	v.value = val
	v.isSet = true
}

func (v NullableL7RuleType) IsSet() bool {
	return v.isSet
}

func (v *NullableL7RuleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableL7RuleType(val *L7RuleType) *NullableL7RuleType {
	return &NullableL7RuleType{value: val, isSet: true}
}

func (v NullableL7RuleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableL7RuleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
