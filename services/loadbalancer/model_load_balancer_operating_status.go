/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// LoadBalancerOperatingStatus the model 'LoadBalancerOperatingStatus'
type LoadBalancerOperatingStatus string

// List of LoadBalancerOperatingStatus
const (
	LOADBALANCEROPERATINGSTATUS_ONLINE     LoadBalancerOperatingStatus = "ONLINE"
	LOADBALANCEROPERATINGSTATUS_DRAINING   LoadBalancerOperatingStatus = "DRAINING"
	LOADBALANCEROPERATINGSTATUS_OFFLINE    LoadBalancerOperatingStatus = "OFFLINE"
	LOADBALANCEROPERATINGSTATUS_DEGRADED   LoadBalancerOperatingStatus = "DEGRADED"
	LOADBALANCEROPERATINGSTATUS_ERROR      LoadBalancerOperatingStatus = "ERROR"
	LOADBALANCEROPERATINGSTATUS_NO_MONITOR LoadBalancerOperatingStatus = "NO_MONITOR"
)

// All allowed values of LoadBalancerOperatingStatus enum
var AllowedLoadBalancerOperatingStatusEnumValues = []LoadBalancerOperatingStatus{
	"ONLINE",
	"DRAINING",
	"OFFLINE",
	"DEGRADED",
	"ERROR",
	"NO_MONITOR",
}

func (v *LoadBalancerOperatingStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LoadBalancerOperatingStatus(value)
	for _, existing := range AllowedLoadBalancerOperatingStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LoadBalancerOperatingStatus", value)
}

// NewLoadBalancerOperatingStatusFromValue returns a pointer to a valid LoadBalancerOperatingStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLoadBalancerOperatingStatusFromValue(v string) (*LoadBalancerOperatingStatus, error) {
	ev := LoadBalancerOperatingStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LoadBalancerOperatingStatus: valid values are %v", v, AllowedLoadBalancerOperatingStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LoadBalancerOperatingStatus) IsValid() bool {
	for _, existing := range AllowedLoadBalancerOperatingStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LoadBalancerOperatingStatus value
func (v LoadBalancerOperatingStatus) Ptr() *LoadBalancerOperatingStatus {
	return &v
}

type NullableLoadBalancerOperatingStatus struct {
	value *LoadBalancerOperatingStatus
	isSet bool
}

func (v NullableLoadBalancerOperatingStatus) Get() *LoadBalancerOperatingStatus {
	return v.value
}

func (v *NullableLoadBalancerOperatingStatus) Set(val *LoadBalancerOperatingStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadBalancerOperatingStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadBalancerOperatingStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadBalancerOperatingStatus(val *LoadBalancerOperatingStatus) *NullableLoadBalancerOperatingStatus {
	return &NullableLoadBalancerOperatingStatus{value: val, isSet: true}
}

func (v NullableLoadBalancerOperatingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadBalancerOperatingStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
