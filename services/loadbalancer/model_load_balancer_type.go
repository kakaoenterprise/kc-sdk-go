/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// LoadBalancerType the model 'LoadBalancerType'
type LoadBalancerType string

// List of LoadBalancerType
const (
	LOADBALANCERTYPE_ALB        LoadBalancerType = "ALB"
	LOADBALANCERTYPE_NLB        LoadBalancerType = "NLB"
	LOADBALANCERTYPE_NLB_L4_DSR LoadBalancerType = "NLB_L4_DSR"
)

// All allowed values of LoadBalancerType enum
var AllowedLoadBalancerTypeEnumValues = []LoadBalancerType{
	"ALB",
	"NLB",
	"NLB_L4_DSR",
}

func (v *LoadBalancerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LoadBalancerType(value)
	for _, existing := range AllowedLoadBalancerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LoadBalancerType", value)
}

// NewLoadBalancerTypeFromValue returns a pointer to a valid LoadBalancerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLoadBalancerTypeFromValue(v string) (*LoadBalancerType, error) {
	ev := LoadBalancerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LoadBalancerType: valid values are %v", v, AllowedLoadBalancerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LoadBalancerType) IsValid() bool {
	for _, existing := range AllowedLoadBalancerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LoadBalancerType value
func (v LoadBalancerType) Ptr() *LoadBalancerType {
	return &v
}

type NullableLoadBalancerType struct {
	value *LoadBalancerType
	isSet bool
}

func (v NullableLoadBalancerType) Get() *LoadBalancerType {
	return v.value
}

func (v *NullableLoadBalancerType) Set(val *LoadBalancerType) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadBalancerType) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadBalancerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadBalancerType(val *LoadBalancerType) *NullableLoadBalancerType {
	return &NullableLoadBalancerType{value: val, isSet: true}
}

func (v NullableLoadBalancerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadBalancerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
