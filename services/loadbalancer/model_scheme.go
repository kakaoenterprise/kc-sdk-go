/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// Scheme the model 'Scheme'
type Scheme string

// List of Scheme
const (
	SCHEME_INTERNET_FACING Scheme = "internet-facing"
	SCHEME_INTERNAL        Scheme = "internal"
)

// All allowed values of Scheme enum
var AllowedSchemeEnumValues = []Scheme{
	"internet-facing",
	"internal",
}

func (v *Scheme) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Scheme(value)
	for _, existing := range AllowedSchemeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Scheme", value)
}

// NewSchemeFromValue returns a pointer to a valid Scheme
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSchemeFromValue(v string) (*Scheme, error) {
	ev := Scheme(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Scheme: valid values are %v", v, AllowedSchemeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Scheme) IsValid() bool {
	for _, existing := range AllowedSchemeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Scheme value
func (v Scheme) Ptr() *Scheme {
	return &v
}

type NullableScheme struct {
	value *Scheme
	isSet bool
}

func (v NullableScheme) Get() *Scheme {
	return v.value
}

func (v *NullableScheme) Set(val *Scheme) {
	v.value = val
	v.isSet = true
}

func (v NullableScheme) IsSet() bool {
	return v.isSet
}

func (v *NullableScheme) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheme(val *Scheme) *NullableScheme {
	return &NullableScheme{value: val, isSet: true}
}

func (v NullableScheme) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheme) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
