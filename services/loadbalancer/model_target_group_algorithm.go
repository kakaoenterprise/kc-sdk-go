/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// TargetGroupAlgorithm the model 'TargetGroupAlgorithm'
type TargetGroupAlgorithm string

// List of TargetGroupAlgorithm
const (
	TARGETGROUPALGORITHM_ROUND_ROBIN       TargetGroupAlgorithm = "ROUND_ROBIN"
	TARGETGROUPALGORITHM_LEAST_CONNECTIONS TargetGroupAlgorithm = "LEAST_CONNECTIONS"
	TARGETGROUPALGORITHM_SOURCE_IP         TargetGroupAlgorithm = "SOURCE_IP"
)

// All allowed values of TargetGroupAlgorithm enum
var AllowedTargetGroupAlgorithmEnumValues = []TargetGroupAlgorithm{
	"ROUND_ROBIN",
	"LEAST_CONNECTIONS",
	"SOURCE_IP",
}

func (v *TargetGroupAlgorithm) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TargetGroupAlgorithm(value)
	for _, existing := range AllowedTargetGroupAlgorithmEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TargetGroupAlgorithm", value)
}

// NewTargetGroupAlgorithmFromValue returns a pointer to a valid TargetGroupAlgorithm
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTargetGroupAlgorithmFromValue(v string) (*TargetGroupAlgorithm, error) {
	ev := TargetGroupAlgorithm(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TargetGroupAlgorithm: valid values are %v", v, AllowedTargetGroupAlgorithmEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TargetGroupAlgorithm) IsValid() bool {
	for _, existing := range AllowedTargetGroupAlgorithmEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TargetGroupAlgorithm value
func (v TargetGroupAlgorithm) Ptr() *TargetGroupAlgorithm {
	return &v
}

type NullableTargetGroupAlgorithm struct {
	value *TargetGroupAlgorithm
	isSet bool
}

func (v NullableTargetGroupAlgorithm) Get() *TargetGroupAlgorithm {
	return v.value
}

func (v *NullableTargetGroupAlgorithm) Set(val *TargetGroupAlgorithm) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetGroupAlgorithm) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetGroupAlgorithm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetGroupAlgorithm(val *TargetGroupAlgorithm) *NullableTargetGroupAlgorithm {
	return &NullableTargetGroupAlgorithm{value: val, isSet: true}
}

func (v NullableTargetGroupAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetGroupAlgorithm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
