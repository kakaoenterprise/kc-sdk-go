/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// TargetGroupProtocol the model 'TargetGroupProtocol'
type TargetGroupProtocol string

// List of TargetGroupProtocol
const (
	TARGETGROUPPROTOCOL_HTTP  TargetGroupProtocol = "HTTP"
	TARGETGROUPPROTOCOL_HTTPS TargetGroupProtocol = "HTTPS"
	TARGETGROUPPROTOCOL_TCP   TargetGroupProtocol = "TCP"
	TARGETGROUPPROTOCOL_UDP   TargetGroupProtocol = "UDP"
	TARGETGROUPPROTOCOL_PROXY TargetGroupProtocol = "PROXY"
)

// All allowed values of TargetGroupProtocol enum
var AllowedTargetGroupProtocolEnumValues = []TargetGroupProtocol{
	"HTTP",
	"HTTPS",
	"TCP",
	"UDP",
	"PROXY",
}

func (v *TargetGroupProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TargetGroupProtocol(value)
	for _, existing := range AllowedTargetGroupProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TargetGroupProtocol", value)
}

// NewTargetGroupProtocolFromValue returns a pointer to a valid TargetGroupProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTargetGroupProtocolFromValue(v string) (*TargetGroupProtocol, error) {
	ev := TargetGroupProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TargetGroupProtocol: valid values are %v", v, AllowedTargetGroupProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TargetGroupProtocol) IsValid() bool {
	for _, existing := range AllowedTargetGroupProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TargetGroupProtocol value
func (v TargetGroupProtocol) Ptr() *TargetGroupProtocol {
	return &v
}

type NullableTargetGroupProtocol struct {
	value *TargetGroupProtocol
	isSet bool
}

func (v NullableTargetGroupProtocol) Get() *TargetGroupProtocol {
	return v.value
}

func (v *NullableTargetGroupProtocol) Set(val *TargetGroupProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetGroupProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetGroupProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetGroupProtocol(val *TargetGroupProtocol) *NullableTargetGroupProtocol {
	return &NullableTargetGroupProtocol{value: val, isSet: true}
}

func (v NullableTargetGroupProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetGroupProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
