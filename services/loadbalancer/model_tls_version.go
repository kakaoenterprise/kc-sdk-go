/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// TLSVersion the model 'TLSVersion'
type TLSVersion string

// List of TLSVersion
const (
	TLSVERSION_TLSV1   TLSVersion = "TLSv1"
	TLSVERSION_TLSV1_1 TLSVersion = "TLSv1.1"
	TLSVERSION_TLSV1_2 TLSVersion = "TLSv1.2"
)

// All allowed values of TLSVersion enum
var AllowedTLSVersionEnumValues = []TLSVersion{
	"TLSv1",
	"TLSv1.1",
	"TLSv1.2",
}

func (v *TLSVersion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TLSVersion(value)
	for _, existing := range AllowedTLSVersionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TLSVersion", value)
}

// NewTLSVersionFromValue returns a pointer to a valid TLSVersion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTLSVersionFromValue(v string) (*TLSVersion, error) {
	ev := TLSVersion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TLSVersion: valid values are %v", v, AllowedTLSVersionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TLSVersion) IsValid() bool {
	for _, existing := range AllowedTLSVersionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TLSVersion value
func (v TLSVersion) Ptr() *TLSVersion {
	return &v
}

type NullableTLSVersion struct {
	value *TLSVersion
	isSet bool
}

func (v NullableTLSVersion) Get() *TLSVersion {
	return v.value
}

func (v *NullableTLSVersion) Set(val *TLSVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableTLSVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableTLSVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTLSVersion(val *TLSVersion) *NullableTLSVersion {
	return &NullableTLSVersion{value: val, isSet: true}
}

func (v NullableTLSVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTLSVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
