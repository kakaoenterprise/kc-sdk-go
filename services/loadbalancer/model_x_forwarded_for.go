/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// XForwardedFor the model 'XForwardedFor'
type XForwardedFor string

// List of XForwardedFor
const (
	XFORWARDEDFOR_TRUE   XForwardedFor = "true"
	XFORWARDEDFOR_FALSE  XForwardedFor = "false"
	XFORWARDEDFOR_REMOVE XForwardedFor = "remove"
)

// All allowed values of XForwardedFor enum
var AllowedXForwardedForEnumValues = []XForwardedFor{
	"true",
	"false",
	"remove",
}

func (v *XForwardedFor) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := XForwardedFor(value)
	for _, existing := range AllowedXForwardedForEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid XForwardedFor", value)
}

// NewXForwardedForFromValue returns a pointer to a valid XForwardedFor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewXForwardedForFromValue(v string) (*XForwardedFor, error) {
	ev := XForwardedFor(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for XForwardedFor: valid values are %v", v, AllowedXForwardedForEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v XForwardedFor) IsValid() bool {
	for _, existing := range AllowedXForwardedForEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to XForwardedFor value
func (v XForwardedFor) Ptr() *XForwardedFor {
	return &v
}

type NullableXForwardedFor struct {
	value *XForwardedFor
	isSet bool
}

func (v NullableXForwardedFor) Get() *XForwardedFor {
	return v.value
}

func (v *NullableXForwardedFor) Set(val *XForwardedFor) {
	v.value = val
	v.isSet = true
}

func (v NullableXForwardedFor) IsSet() bool {
	return v.isSet
}

func (v *NullableXForwardedFor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableXForwardedFor(val *XForwardedFor) *NullableXForwardedFor {
	return &NullableXForwardedFor{value: val, isSet: true}
}

func (v NullableXForwardedFor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableXForwardedFor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
