/*
Beyond Networking Service(BNS) Load Balancer API

BNS Load Balancer API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// XForwardedProto the model 'XForwardedProto'
type XForwardedProto string

// List of XForwardedProto
const (
	XFORWARDEDPROTO_TRUE  XForwardedProto = "true"
	XFORWARDEDPROTO_FALSE XForwardedProto = "false"
)

// All allowed values of XForwardedProto enum
var AllowedXForwardedProtoEnumValues = []XForwardedProto{
	"true",
	"false",
}

func (v *XForwardedProto) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := XForwardedProto(value)
	for _, existing := range AllowedXForwardedProtoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid XForwardedProto", value)
}

// NewXForwardedProtoFromValue returns a pointer to a valid XForwardedProto
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewXForwardedProtoFromValue(v string) (*XForwardedProto, error) {
	ev := XForwardedProto(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for XForwardedProto: valid values are %v", v, AllowedXForwardedProtoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v XForwardedProto) IsValid() bool {
	for _, existing := range AllowedXForwardedProtoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to XForwardedProto value
func (v XForwardedProto) Ptr() *XForwardedProto {
	return &v
}

type NullableXForwardedProto struct {
	value *XForwardedProto
	isSet bool
}

func (v NullableXForwardedProto) Get() *XForwardedProto {
	return v.value
}

func (v *NullableXForwardedProto) Set(val *XForwardedProto) {
	v.value = val
	v.isSet = true
}

func (v NullableXForwardedProto) IsSet() bool {
	return v.isSet
}

func (v *NullableXForwardedProto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableXForwardedProto(val *XForwardedProto) *NullableXForwardedProto {
	return &NullableXForwardedProto{value: val, isSet: true}
}

func (v NullableXForwardedProto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableXForwardedProto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
