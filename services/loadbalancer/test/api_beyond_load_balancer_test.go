/*
Beyond Networking Service(BNS) Load Balancer API

Testing BeyondLoadBalancerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package loadbalancer

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_loadbalancer_BeyondLoadBalancerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BeyondLoadBalancerAPIService CreateHaGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BeyondLoadBalancerAPI.CreateHaGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BeyondLoadBalancerAPIService DeleteHaGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var beyondLoadBalancerId string

		httpRes, err := apiClient.BeyondLoadBalancerAPI.DeleteHaGroup(context.Background(), beyondLoadBalancerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BeyondLoadBalancerAPIService DetachHaGroupLoadBalancer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var beyondLoadBalancerId string
		var loadBalancerId string

		httpRes, err := apiClient.BeyondLoadBalancerAPI.DetachHaGroupLoadBalancer(context.Background(), beyondLoadBalancerId, loadBalancerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BeyondLoadBalancerAPIService GetHaGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var beyondLoadBalancerId string

		resp, httpRes, err := apiClient.BeyondLoadBalancerAPI.GetHaGroup(context.Background(), beyondLoadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BeyondLoadBalancerAPIService ListHaGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BeyondLoadBalancerAPI.ListHaGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BeyondLoadBalancerAPIService UpdateHaGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var beyondLoadBalancerId string

		resp, httpRes, err := apiClient.BeyondLoadBalancerAPI.UpdateHaGroup(context.Background(), beyondLoadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BeyondLoadBalancerAPIService UpdateHaGroupLoadBalancer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var beyondLoadBalancerId string

		resp, httpRes, err := apiClient.BeyondLoadBalancerAPI.UpdateHaGroupLoadBalancer(context.Background(), beyondLoadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
