/*
Beyond Networking Service(BNS) Load Balancer API

Testing LoadBalancerL7PoliciesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package loadbalancer

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_loadbalancer_LoadBalancerL7PoliciesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LoadBalancerL7PoliciesAPIService AddL7PolicyRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var l7PolicyId string

		resp, httpRes, err := apiClient.LoadBalancerL7PoliciesAPI.AddL7PolicyRule(context.Background(), l7PolicyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerL7PoliciesAPIService CreateL7Policy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.LoadBalancerL7PoliciesAPI.CreateL7Policy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerL7PoliciesAPIService DeleteL7Policy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var l7PolicyId string

		httpRes, err := apiClient.LoadBalancerL7PoliciesAPI.DeleteL7Policy(context.Background(), l7PolicyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerL7PoliciesAPIService DeleteL7PolicyRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var l7PolicyId string
		var l7RuleId string

		httpRes, err := apiClient.LoadBalancerL7PoliciesAPI.DeleteL7PolicyRule(context.Background(), l7PolicyId, l7RuleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerL7PoliciesAPIService GetL7Policy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var l7PolicyId string

		resp, httpRes, err := apiClient.LoadBalancerL7PoliciesAPI.GetL7Policy(context.Background(), l7PolicyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerL7PoliciesAPIService GetL7PolicyRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var l7PolicyId string
		var l7RuleId string

		resp, httpRes, err := apiClient.LoadBalancerL7PoliciesAPI.GetL7PolicyRule(context.Background(), l7PolicyId, l7RuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerL7PoliciesAPIService ListL7Policies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var loadBalancerId string
		var listenerId string

		resp, httpRes, err := apiClient.LoadBalancerL7PoliciesAPI.ListL7Policies(context.Background(), loadBalancerId, listenerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerL7PoliciesAPIService ListL7PolicyRules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var l7PolicyId string

		resp, httpRes, err := apiClient.LoadBalancerL7PoliciesAPI.ListL7PolicyRules(context.Background(), l7PolicyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerL7PoliciesAPIService UpdateL7Policy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var l7PolicyId string

		resp, httpRes, err := apiClient.LoadBalancerL7PoliciesAPI.UpdateL7Policy(context.Background(), l7PolicyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerL7PoliciesAPIService UpdateL7PolicyRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var l7PolicyId string
		var l7RuleId string

		resp, httpRes, err := apiClient.LoadBalancerL7PoliciesAPI.UpdateL7PolicyRule(context.Background(), l7PolicyId, l7RuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
