/*
Beyond Networking Service(BNS) Load Balancer API

Testing LoadBalancerListenerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package loadbalancer

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_loadbalancer_LoadBalancerListenerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LoadBalancerListenerAPIService CreateListener", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.LoadBalancerListenerAPI.CreateListener(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerListenerAPIService DeleteListener", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var listenerId string

		httpRes, err := apiClient.LoadBalancerListenerAPI.DeleteListener(context.Background(), listenerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerListenerAPIService GetListener", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var listenerId string

		resp, httpRes, err := apiClient.LoadBalancerListenerAPI.GetListener(context.Background(), listenerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerListenerAPIService ListListeners", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.LoadBalancerListenerAPI.ListListeners(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerListenerAPIService UpdateListener", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var listenerId string

		resp, httpRes, err := apiClient.LoadBalancerListenerAPI.UpdateListener(context.Background(), listenerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
