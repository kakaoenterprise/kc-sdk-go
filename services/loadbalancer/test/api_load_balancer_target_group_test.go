/*
Beyond Networking Service(BNS) Load Balancer API

Testing LoadBalancerTargetGroupAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package loadbalancer

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_loadbalancer_LoadBalancerTargetGroupAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LoadBalancerTargetGroupAPIService AddTarget", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var targetGroupId string

		resp, httpRes, err := apiClient.LoadBalancerTargetGroupAPI.AddTarget(context.Background(), targetGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerTargetGroupAPIService CreateHealthMonitor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.LoadBalancerTargetGroupAPI.CreateHealthMonitor(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerTargetGroupAPIService CreateTargetGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.LoadBalancerTargetGroupAPI.CreateTargetGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerTargetGroupAPIService DeleteHealthMonitor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var healthMonitorId string

		httpRes, err := apiClient.LoadBalancerTargetGroupAPI.DeleteHealthMonitor(context.Background(), healthMonitorId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerTargetGroupAPIService DeleteTargetGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var targetGroupId string

		httpRes, err := apiClient.LoadBalancerTargetGroupAPI.DeleteTargetGroup(context.Background(), targetGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerTargetGroupAPIService GetTargeGroupHealthCheckSubnets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var targetGroupId string

		resp, httpRes, err := apiClient.LoadBalancerTargetGroupAPI.GetTargeGroupHealthCheckSubnets(context.Background(), targetGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerTargetGroupAPIService GetTargeGroupHealthMonitor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var healthMonitorId string

		resp, httpRes, err := apiClient.LoadBalancerTargetGroupAPI.GetTargeGroupHealthMonitor(context.Background(), healthMonitorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerTargetGroupAPIService GetTargetGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var targetGroupId string

		resp, httpRes, err := apiClient.LoadBalancerTargetGroupAPI.GetTargetGroup(context.Background(), targetGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerTargetGroupAPIService ListTargetGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.LoadBalancerTargetGroupAPI.ListTargetGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerTargetGroupAPIService ListTargetsInTargetGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var targetGroupId string

		resp, httpRes, err := apiClient.LoadBalancerTargetGroupAPI.ListTargetsInTargetGroup(context.Background(), targetGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerTargetGroupAPIService RemoveTarget", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var targetGroupId string
		var memberId string

		httpRes, err := apiClient.LoadBalancerTargetGroupAPI.RemoveTarget(context.Background(), targetGroupId, memberId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerTargetGroupAPIService UpdateHealthMonitor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var healthMonitorId string

		resp, httpRes, err := apiClient.LoadBalancerTargetGroupAPI.UpdateHealthMonitor(context.Background(), healthMonitorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerTargetGroupAPIService UpdateTarget", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var targetGroupId string
		var memberId string

		resp, httpRes, err := apiClient.LoadBalancerTargetGroupAPI.UpdateTarget(context.Background(), targetGroupId, memberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerTargetGroupAPIService UpdateTargetGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var targetGroupId string

		resp, httpRes, err := apiClient.LoadBalancerTargetGroupAPI.UpdateTargetGroup(context.Background(), targetGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerTargetGroupAPIService UpdateTargets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var targetGroupId string

		resp, httpRes, err := apiClient.LoadBalancerTargetGroupAPI.UpdateTargets(context.Background(), targetGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
