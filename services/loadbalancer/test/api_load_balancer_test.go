/*
Beyond Networking Service(BNS) Load Balancer API

Testing LoadBalancerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package loadbalancer

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_loadbalancer_LoadBalancerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LoadBalancerAPIService AssociateNewPublicIp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.LoadBalancerAPI.AssociateNewPublicIp(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerAPIService AssociatePublicIp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var loadBalancerId string
		var publicIpId string

		resp, httpRes, err := apiClient.LoadBalancerAPI.AssociatePublicIp(context.Background(), loadBalancerId, publicIpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerAPIService CreateLoadBalancer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.LoadBalancerAPI.CreateLoadBalancer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerAPIService DeleteLoadBalancer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var loadBalancerId string

		httpRes, err := apiClient.LoadBalancerAPI.DeleteLoadBalancer(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerAPIService GetLoadBalancer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.LoadBalancerAPI.GetLoadBalancer(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerAPIService ListLoadBalancers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.LoadBalancerAPI.ListLoadBalancers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerAPIService RemovePublicIp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.LoadBalancerAPI.RemovePublicIp(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerAPIService UpdateAccessLog", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.LoadBalancerAPI.UpdateAccessLog(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancerAPIService UpdateLoadBalancer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var loadBalancerId string

		resp, httpRes, err := apiClient.LoadBalancerAPI.UpdateLoadBalancer(context.Background(), loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
