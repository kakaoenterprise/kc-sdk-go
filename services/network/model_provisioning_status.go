/*
Beyond Networking Service(BNS) Public IP/Security Group API

Public IP/Security Group API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network

import (
	"encoding/json"
	"fmt"
)

// ProvisioningStatus the model 'ProvisioningStatus'
type ProvisioningStatus string

// List of ProvisioningStatus
const (
	PROVISIONINGSTATUS_ACTIVE         ProvisioningStatus = "ACTIVE"
	PROVISIONINGSTATUS_DELETED        ProvisioningStatus = "DELETED"
	PROVISIONINGSTATUS_ERROR          ProvisioningStatus = "ERROR"
	PROVISIONINGSTATUS_PENDING_CREATE ProvisioningStatus = "PENDING_CREATE"
	PROVISIONINGSTATUS_PENDING_UPDATE ProvisioningStatus = "PENDING_UPDATE"
	PROVISIONINGSTATUS_PENDING_DELETE ProvisioningStatus = "PENDING_DELETE"
)

// All allowed values of ProvisioningStatus enum
var AllowedProvisioningStatusEnumValues = []ProvisioningStatus{
	"ACTIVE",
	"DELETED",
	"ERROR",
	"PENDING_CREATE",
	"PENDING_UPDATE",
	"PENDING_DELETE",
}

func (v *ProvisioningStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProvisioningStatus(value)
	for _, existing := range AllowedProvisioningStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProvisioningStatus", value)
}

// NewProvisioningStatusFromValue returns a pointer to a valid ProvisioningStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProvisioningStatusFromValue(v string) (*ProvisioningStatus, error) {
	ev := ProvisioningStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProvisioningStatus: valid values are %v", v, AllowedProvisioningStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProvisioningStatus) IsValid() bool {
	for _, existing := range AllowedProvisioningStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProvisioningStatus value
func (v ProvisioningStatus) Ptr() *ProvisioningStatus {
	return &v
}

type NullableProvisioningStatus struct {
	value *ProvisioningStatus
	isSet bool
}

func (v NullableProvisioningStatus) Get() *ProvisioningStatus {
	return v.value
}

func (v *NullableProvisioningStatus) Set(val *ProvisioningStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisioningStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisioningStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisioningStatus(val *ProvisioningStatus) *NullableProvisioningStatus {
	return &NullableProvisioningStatus{value: val, isSet: true}
}

func (v NullableProvisioningStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisioningStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
