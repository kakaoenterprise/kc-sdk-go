/*
Beyond Networking Service(BNS) Public IP/Security Group API

Public IP/Security Group API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network

import (
	"encoding/json"
	"fmt"
)

// checks if the PublicIpListModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicIpListModel{}

// PublicIpListModel struct for PublicIpListModel
type PublicIpListModel struct {
	PublicIps            []BnsNetworkV1ApiListPublicIpsModelFloatingIpModel `json:"public_ips,omitempty"`
	Pagination           PaginationModel                                    `json:"pagination"`
	AdditionalProperties map[string]interface{}
}

type _PublicIpListModel PublicIpListModel

// NewPublicIpListModel instantiates a new PublicIpListModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicIpListModel(pagination PaginationModel) *PublicIpListModel {
	this := PublicIpListModel{}
	this.Pagination = pagination
	return &this
}

// NewPublicIpListModelWithDefaults instantiates a new PublicIpListModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicIpListModelWithDefaults() *PublicIpListModel {
	this := PublicIpListModel{}
	return &this
}

// GetPublicIps returns the PublicIps field value if set, zero value otherwise.
func (o *PublicIpListModel) GetPublicIps() []BnsNetworkV1ApiListPublicIpsModelFloatingIpModel {
	if o == nil || IsNil(o.PublicIps) {
		var ret []BnsNetworkV1ApiListPublicIpsModelFloatingIpModel
		return ret
	}
	return o.PublicIps
}

// GetPublicIpsOk returns a tuple with the PublicIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicIpListModel) GetPublicIpsOk() ([]BnsNetworkV1ApiListPublicIpsModelFloatingIpModel, bool) {
	if o == nil || IsNil(o.PublicIps) {
		return nil, false
	}
	return o.PublicIps, true
}

// HasPublicIps returns a boolean if a field has been set.
func (o *PublicIpListModel) HasPublicIps() bool {
	if o != nil && !IsNil(o.PublicIps) {
		return true
	}

	return false
}

// SetPublicIps gets a reference to the given []BnsNetworkV1ApiListPublicIpsModelFloatingIpModel and assigns it to the PublicIps field.
func (o *PublicIpListModel) SetPublicIps(v []BnsNetworkV1ApiListPublicIpsModelFloatingIpModel) {
	o.PublicIps = v
}

// GetPagination returns the Pagination field value
func (o *PublicIpListModel) GetPagination() PaginationModel {
	if o == nil {
		var ret PaginationModel
		return ret
	}

	return o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value
// and a boolean to check if the value has been set.
func (o *PublicIpListModel) GetPaginationOk() (*PaginationModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pagination, true
}

// SetPagination sets field value
func (o *PublicIpListModel) SetPagination(v PaginationModel) {
	o.Pagination = v
}

func (o PublicIpListModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicIpListModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PublicIps) {
		toSerialize["public_ips"] = o.PublicIps
	}
	toSerialize["pagination"] = o.Pagination

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PublicIpListModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pagination",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicIpListModel := _PublicIpListModel{}

	err = json.Unmarshal(data, &varPublicIpListModel)

	if err != nil {
		return err
	}

	*o = PublicIpListModel(varPublicIpListModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "public_ips")
		delete(additionalProperties, "pagination")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePublicIpListModel struct {
	value *PublicIpListModel
	isSet bool
}

func (v NullablePublicIpListModel) Get() *PublicIpListModel {
	return v.value
}

func (v *NullablePublicIpListModel) Set(val *PublicIpListModel) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicIpListModel) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicIpListModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicIpListModel(val *PublicIpListModel) *NullablePublicIpListModel {
	return &NullablePublicIpListModel{value: val, isSet: true}
}

func (v NullablePublicIpListModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicIpListModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
