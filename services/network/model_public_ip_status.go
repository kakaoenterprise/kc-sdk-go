/*
Beyond Networking Service(BNS) Public IP/Security Group API

Public IP/Security Group API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network

import (
	"encoding/json"
	"fmt"
)

// PublicIpStatus the model 'PublicIpStatus'
type PublicIpStatus string

// List of PublicIpStatus
const (
	PUBLICIPSTATUS_AVAILABLE PublicIpStatus = "available"
	PUBLICIPSTATUS_IN_USE    PublicIpStatus = "in_use"
	PUBLICIPSTATUS_ATTACHING PublicIpStatus = "attaching"
)

// All allowed values of PublicIpStatus enum
var AllowedPublicIpStatusEnumValues = []PublicIpStatus{
	"available",
	"in_use",
	"attaching",
}

func (v *PublicIpStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PublicIpStatus(value)
	for _, existing := range AllowedPublicIpStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PublicIpStatus", value)
}

// NewPublicIpStatusFromValue returns a pointer to a valid PublicIpStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPublicIpStatusFromValue(v string) (*PublicIpStatus, error) {
	ev := PublicIpStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PublicIpStatus: valid values are %v", v, AllowedPublicIpStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PublicIpStatus) IsValid() bool {
	for _, existing := range AllowedPublicIpStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PublicIpStatus value
func (v PublicIpStatus) Ptr() *PublicIpStatus {
	return &v
}

type NullablePublicIpStatus struct {
	value *PublicIpStatus
	isSet bool
}

func (v NullablePublicIpStatus) Get() *PublicIpStatus {
	return v.value
}

func (v *NullablePublicIpStatus) Set(val *PublicIpStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicIpStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicIpStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicIpStatus(val *PublicIpStatus) *NullablePublicIpStatus {
	return &NullablePublicIpStatus{value: val, isSet: true}
}

func (v NullablePublicIpStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicIpStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
