/*
Beyond Networking Service(BNS) Public IP/Security Group API

Public IP/Security Group API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network

import (
	"encoding/json"
	"fmt"
)

// SecurityGroupRuleDirection the model 'SecurityGroupRuleDirection'
type SecurityGroupRuleDirection string

// List of SecurityGroupRuleDirection
const (
	SECURITYGROUPRULEDIRECTION_INGRESS SecurityGroupRuleDirection = "ingress"
	SECURITYGROUPRULEDIRECTION_EGRESS  SecurityGroupRuleDirection = "egress"
)

// All allowed values of SecurityGroupRuleDirection enum
var AllowedSecurityGroupRuleDirectionEnumValues = []SecurityGroupRuleDirection{
	"ingress",
	"egress",
}

func (v *SecurityGroupRuleDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecurityGroupRuleDirection(value)
	for _, existing := range AllowedSecurityGroupRuleDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SecurityGroupRuleDirection", value)
}

// NewSecurityGroupRuleDirectionFromValue returns a pointer to a valid SecurityGroupRuleDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecurityGroupRuleDirectionFromValue(v string) (*SecurityGroupRuleDirection, error) {
	ev := SecurityGroupRuleDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SecurityGroupRuleDirection: valid values are %v", v, AllowedSecurityGroupRuleDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecurityGroupRuleDirection) IsValid() bool {
	for _, existing := range AllowedSecurityGroupRuleDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SecurityGroupRuleDirection value
func (v SecurityGroupRuleDirection) Ptr() *SecurityGroupRuleDirection {
	return &v
}

type NullableSecurityGroupRuleDirection struct {
	value *SecurityGroupRuleDirection
	isSet bool
}

func (v NullableSecurityGroupRuleDirection) Get() *SecurityGroupRuleDirection {
	return v.value
}

func (v *NullableSecurityGroupRuleDirection) Set(val *SecurityGroupRuleDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityGroupRuleDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityGroupRuleDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityGroupRuleDirection(val *SecurityGroupRuleDirection) *NullableSecurityGroupRuleDirection {
	return &NullableSecurityGroupRuleDirection{value: val, isSet: true}
}

func (v NullableSecurityGroupRuleDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityGroupRuleDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
