/*
Beyond Networking Service(BNS) Public IP/Security Group API

Public IP/Security Group API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network

import (
	"encoding/json"
	"fmt"
)

// SecurityGroupRuleProtocol the model 'SecurityGroupRuleProtocol'
type SecurityGroupRuleProtocol string

// List of SecurityGroupRuleProtocol
const (
	SECURITYGROUPRULEPROTOCOL_TCP  SecurityGroupRuleProtocol = "TCP"
	SECURITYGROUPRULEPROTOCOL_UDP  SecurityGroupRuleProtocol = "UDP"
	SECURITYGROUPRULEPROTOCOL_ICMP SecurityGroupRuleProtocol = "ICMP"
	SECURITYGROUPRULEPROTOCOL_IPIP SecurityGroupRuleProtocol = "IPIP"
	SECURITYGROUPRULEPROTOCOL_ALL  SecurityGroupRuleProtocol = "ALL"
)

// All allowed values of SecurityGroupRuleProtocol enum
var AllowedSecurityGroupRuleProtocolEnumValues = []SecurityGroupRuleProtocol{
	"TCP",
	"UDP",
	"ICMP",
	"IPIP",
	"ALL",
}

func (v *SecurityGroupRuleProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecurityGroupRuleProtocol(value)
	for _, existing := range AllowedSecurityGroupRuleProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SecurityGroupRuleProtocol", value)
}

// NewSecurityGroupRuleProtocolFromValue returns a pointer to a valid SecurityGroupRuleProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecurityGroupRuleProtocolFromValue(v string) (*SecurityGroupRuleProtocol, error) {
	ev := SecurityGroupRuleProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SecurityGroupRuleProtocol: valid values are %v", v, AllowedSecurityGroupRuleProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecurityGroupRuleProtocol) IsValid() bool {
	for _, existing := range AllowedSecurityGroupRuleProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SecurityGroupRuleProtocol value
func (v SecurityGroupRuleProtocol) Ptr() *SecurityGroupRuleProtocol {
	return &v
}

type NullableSecurityGroupRuleProtocol struct {
	value *SecurityGroupRuleProtocol
	isSet bool
}

func (v NullableSecurityGroupRuleProtocol) Get() *SecurityGroupRuleProtocol {
	return v.value
}

func (v *NullableSecurityGroupRuleProtocol) Set(val *SecurityGroupRuleProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityGroupRuleProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityGroupRuleProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityGroupRuleProtocol(val *SecurityGroupRuleProtocol) *NullableSecurityGroupRuleProtocol {
	return &NullableSecurityGroupRuleProtocol{value: val, isSet: true}
}

func (v NullableSecurityGroupRuleProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityGroupRuleProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
