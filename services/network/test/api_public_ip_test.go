/*
Beyond Networking Service(BNS) Public IP/Security Group API

Testing PublicIPAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package network

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_network_PublicIPAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PublicIPAPIService AssociatePublicIp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var publicIpId string
		var networkInterfaceId string

		resp, httpRes, err := apiClient.PublicIPAPI.AssociatePublicIp(context.Background(), publicIpId, networkInterfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicIPAPIService CreatePublicIp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PublicIPAPI.CreatePublicIp(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicIPAPIService DeletePublicIp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var publicIpId string

		httpRes, err := apiClient.PublicIPAPI.DeletePublicIp(context.Background(), publicIpId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicIPAPIService DisassociatePublicIp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var publicIpId string
		var networkInterfaceId string

		resp, httpRes, err := apiClient.PublicIPAPI.DisassociatePublicIp(context.Background(), publicIpId, networkInterfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicIPAPIService GetPublicIp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var publicIpId string

		resp, httpRes, err := apiClient.PublicIPAPI.GetPublicIp(context.Background(), publicIpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicIPAPIService ListPublicIps", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PublicIPAPI.ListPublicIps(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicIPAPIService UpdatePublicIp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var publicIpId string

		resp, httpRes, err := apiClient.PublicIPAPI.UpdatePublicIp(context.Background(), publicIpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
