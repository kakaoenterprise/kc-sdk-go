/*
Beyond Networking Service(BNS) Public IP/Security Group API

Testing SecurityGroupAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package network

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_network_SecurityGroupAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SecurityGroupAPIService CreateSecurityGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityGroupAPI.CreateSecurityGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityGroupAPIService CreateSecurityGroupRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var securityGroupId string

		resp, httpRes, err := apiClient.SecurityGroupAPI.CreateSecurityGroupRule(context.Background(), securityGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityGroupAPIService DeleteSecurityGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var securityGroupId string

		httpRes, err := apiClient.SecurityGroupAPI.DeleteSecurityGroup(context.Background(), securityGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityGroupAPIService DeleteSecurityGroupRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var securityGroupId string
		var securityGroupRuleId string

		httpRes, err := apiClient.SecurityGroupAPI.DeleteSecurityGroupRule(context.Background(), securityGroupId, securityGroupRuleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityGroupAPIService GetSecurityGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var securityGroupId string

		resp, httpRes, err := apiClient.SecurityGroupAPI.GetSecurityGroup(context.Background(), securityGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityGroupAPIService ListSecurityGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityGroupAPI.ListSecurityGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityGroupAPIService UpdateSecurityGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var securityGroupId string

		resp, httpRes, err := apiClient.SecurityGroupAPI.UpdateSecurityGroup(context.Background(), securityGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
