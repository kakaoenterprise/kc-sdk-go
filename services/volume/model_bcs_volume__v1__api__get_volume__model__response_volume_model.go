/*
Beyond Compute Service(BCS) Volume API

Beyond Compute Service Volume API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package volume

import (
	"encoding/json"
	"fmt"
)

// checks if the BcsVolumeV1ApiGetVolumeModelResponseVolumeModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BcsVolumeV1ApiGetVolumeModelResponseVolumeModel{}

// BcsVolumeV1ApiGetVolumeModelResponseVolumeModel struct for BcsVolumeV1ApiGetVolumeModelResponseVolumeModel
type BcsVolumeV1ApiGetVolumeModelResponseVolumeModel struct {
	Volume               BcsVolumeV1ApiGetVolumeModelVolumeModel `json:"volume"`
	AdditionalProperties map[string]interface{}
}

type _BcsVolumeV1ApiGetVolumeModelResponseVolumeModel BcsVolumeV1ApiGetVolumeModelResponseVolumeModel

// NewBcsVolumeV1ApiGetVolumeModelResponseVolumeModel instantiates a new BcsVolumeV1ApiGetVolumeModelResponseVolumeModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBcsVolumeV1ApiGetVolumeModelResponseVolumeModel(volume BcsVolumeV1ApiGetVolumeModelVolumeModel) *BcsVolumeV1ApiGetVolumeModelResponseVolumeModel {
	this := BcsVolumeV1ApiGetVolumeModelResponseVolumeModel{}
	this.Volume = volume
	return &this
}

// NewBcsVolumeV1ApiGetVolumeModelResponseVolumeModelWithDefaults instantiates a new BcsVolumeV1ApiGetVolumeModelResponseVolumeModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBcsVolumeV1ApiGetVolumeModelResponseVolumeModelWithDefaults() *BcsVolumeV1ApiGetVolumeModelResponseVolumeModel {
	this := BcsVolumeV1ApiGetVolumeModelResponseVolumeModel{}
	return &this
}

// GetVolume returns the Volume field value
func (o *BcsVolumeV1ApiGetVolumeModelResponseVolumeModel) GetVolume() BcsVolumeV1ApiGetVolumeModelVolumeModel {
	if o == nil {
		var ret BcsVolumeV1ApiGetVolumeModelVolumeModel
		return ret
	}

	return o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value
// and a boolean to check if the value has been set.
func (o *BcsVolumeV1ApiGetVolumeModelResponseVolumeModel) GetVolumeOk() (*BcsVolumeV1ApiGetVolumeModelVolumeModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Volume, true
}

// SetVolume sets field value
func (o *BcsVolumeV1ApiGetVolumeModelResponseVolumeModel) SetVolume(v BcsVolumeV1ApiGetVolumeModelVolumeModel) {
	o.Volume = v
}

func (o BcsVolumeV1ApiGetVolumeModelResponseVolumeModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BcsVolumeV1ApiGetVolumeModelResponseVolumeModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["volume"] = o.Volume

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BcsVolumeV1ApiGetVolumeModelResponseVolumeModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"volume",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBcsVolumeV1ApiGetVolumeModelResponseVolumeModel := _BcsVolumeV1ApiGetVolumeModelResponseVolumeModel{}

	err = json.Unmarshal(data, &varBcsVolumeV1ApiGetVolumeModelResponseVolumeModel)

	if err != nil {
		return err
	}

	*o = BcsVolumeV1ApiGetVolumeModelResponseVolumeModel(varBcsVolumeV1ApiGetVolumeModelResponseVolumeModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "volume")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBcsVolumeV1ApiGetVolumeModelResponseVolumeModel struct {
	value *BcsVolumeV1ApiGetVolumeModelResponseVolumeModel
	isSet bool
}

func (v NullableBcsVolumeV1ApiGetVolumeModelResponseVolumeModel) Get() *BcsVolumeV1ApiGetVolumeModelResponseVolumeModel {
	return v.value
}

func (v *NullableBcsVolumeV1ApiGetVolumeModelResponseVolumeModel) Set(val *BcsVolumeV1ApiGetVolumeModelResponseVolumeModel) {
	v.value = val
	v.isSet = true
}

func (v NullableBcsVolumeV1ApiGetVolumeModelResponseVolumeModel) IsSet() bool {
	return v.isSet
}

func (v *NullableBcsVolumeV1ApiGetVolumeModelResponseVolumeModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBcsVolumeV1ApiGetVolumeModelResponseVolumeModel(val *BcsVolumeV1ApiGetVolumeModelResponseVolumeModel) *NullableBcsVolumeV1ApiGetVolumeModelResponseVolumeModel {
	return &NullableBcsVolumeV1ApiGetVolumeModelResponseVolumeModel{value: val, isSet: true}
}

func (v NullableBcsVolumeV1ApiGetVolumeModelResponseVolumeModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBcsVolumeV1ApiGetVolumeModelResponseVolumeModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
