/*
Beyond Compute Service(BCS) Volume API

Beyond Compute Service Volume API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package volume

import (
	"encoding/json"
	"fmt"
)

// checks if the BodyCreateImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BodyCreateImage{}

// BodyCreateImage struct for BodyCreateImage
type BodyCreateImage struct {
	Image                CreateVolumeImageModel `json:"image"`
	AdditionalProperties map[string]interface{}
}

type _BodyCreateImage BodyCreateImage

// NewBodyCreateImage instantiates a new BodyCreateImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBodyCreateImage(image CreateVolumeImageModel) *BodyCreateImage {
	this := BodyCreateImage{}
	this.Image = image
	return &this
}

// NewBodyCreateImageWithDefaults instantiates a new BodyCreateImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBodyCreateImageWithDefaults() *BodyCreateImage {
	this := BodyCreateImage{}
	return &this
}

// GetImage returns the Image field value
func (o *BodyCreateImage) GetImage() CreateVolumeImageModel {
	if o == nil {
		var ret CreateVolumeImageModel
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *BodyCreateImage) GetImageOk() (*CreateVolumeImageModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *BodyCreateImage) SetImage(v CreateVolumeImageModel) {
	o.Image = v
}

func (o BodyCreateImage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BodyCreateImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["image"] = o.Image

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BodyCreateImage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBodyCreateImage := _BodyCreateImage{}

	err = json.Unmarshal(data, &varBodyCreateImage)

	if err != nil {
		return err
	}

	*o = BodyCreateImage(varBodyCreateImage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "image")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBodyCreateImage struct {
	value *BodyCreateImage
	isSet bool
}

func (v NullableBodyCreateImage) Get() *BodyCreateImage {
	return v.value
}

func (v *NullableBodyCreateImage) Set(val *BodyCreateImage) {
	v.value = val
	v.isSet = true
}

func (v NullableBodyCreateImage) IsSet() bool {
	return v.isSet
}

func (v *NullableBodyCreateImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBodyCreateImage(val *BodyCreateImage) *NullableBodyCreateImage {
	return &NullableBodyCreateImage{value: val, isSet: true}
}

func (v NullableBodyCreateImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBodyCreateImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
