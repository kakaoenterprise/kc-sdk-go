/*
Beyond Compute Service(BCS) Volume API

Beyond Compute Service Volume API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package volume

import (
	"encoding/json"
	"fmt"
)

// checks if the BodyExtendVolume type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BodyExtendVolume{}

// BodyExtendVolume struct for BodyExtendVolume
type BodyExtendVolume struct {
	Volume               ExtendVolumeModel `json:"volume"`
	AdditionalProperties map[string]interface{}
}

type _BodyExtendVolume BodyExtendVolume

// NewBodyExtendVolume instantiates a new BodyExtendVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBodyExtendVolume(volume ExtendVolumeModel) *BodyExtendVolume {
	this := BodyExtendVolume{}
	this.Volume = volume
	return &this
}

// NewBodyExtendVolumeWithDefaults instantiates a new BodyExtendVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBodyExtendVolumeWithDefaults() *BodyExtendVolume {
	this := BodyExtendVolume{}
	return &this
}

// GetVolume returns the Volume field value
func (o *BodyExtendVolume) GetVolume() ExtendVolumeModel {
	if o == nil {
		var ret ExtendVolumeModel
		return ret
	}

	return o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value
// and a boolean to check if the value has been set.
func (o *BodyExtendVolume) GetVolumeOk() (*ExtendVolumeModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Volume, true
}

// SetVolume sets field value
func (o *BodyExtendVolume) SetVolume(v ExtendVolumeModel) {
	o.Volume = v
}

func (o BodyExtendVolume) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BodyExtendVolume) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["volume"] = o.Volume

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BodyExtendVolume) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"volume",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBodyExtendVolume := _BodyExtendVolume{}

	err = json.Unmarshal(data, &varBodyExtendVolume)

	if err != nil {
		return err
	}

	*o = BodyExtendVolume(varBodyExtendVolume)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "volume")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBodyExtendVolume struct {
	value *BodyExtendVolume
	isSet bool
}

func (v NullableBodyExtendVolume) Get() *BodyExtendVolume {
	return v.value
}

func (v *NullableBodyExtendVolume) Set(val *BodyExtendVolume) {
	v.value = val
	v.isSet = true
}

func (v NullableBodyExtendVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableBodyExtendVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBodyExtendVolume(val *BodyExtendVolume) *NullableBodyExtendVolume {
	return &NullableBodyExtendVolume{value: val, isSet: true}
}

func (v NullableBodyExtendVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBodyExtendVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
