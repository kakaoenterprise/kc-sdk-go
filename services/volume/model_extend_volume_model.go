/*
Beyond Compute Service(BCS) Volume API

Beyond Compute Service Volume API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package volume

import (
	"encoding/json"
	"fmt"
)

// checks if the ExtendVolumeModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtendVolumeModel{}

// ExtendVolumeModel struct for ExtendVolumeModel
type ExtendVolumeModel struct {
	// 변경할 볼륨의 새로운 크기 (GB 단위) <br/> - 기존 크기보다 커야 함
	NewSize              int32 `json:"new_size"`
	AdditionalProperties map[string]interface{}
}

type _ExtendVolumeModel ExtendVolumeModel

// NewExtendVolumeModel instantiates a new ExtendVolumeModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtendVolumeModel(newSize int32) *ExtendVolumeModel {
	this := ExtendVolumeModel{}
	this.NewSize = newSize
	return &this
}

// NewExtendVolumeModelWithDefaults instantiates a new ExtendVolumeModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtendVolumeModelWithDefaults() *ExtendVolumeModel {
	this := ExtendVolumeModel{}
	return &this
}

// GetNewSize returns the NewSize field value
func (o *ExtendVolumeModel) GetNewSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NewSize
}

// GetNewSizeOk returns a tuple with the NewSize field value
// and a boolean to check if the value has been set.
func (o *ExtendVolumeModel) GetNewSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewSize, true
}

// SetNewSize sets field value
func (o *ExtendVolumeModel) SetNewSize(v int32) {
	o.NewSize = v
}

func (o ExtendVolumeModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtendVolumeModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["new_size"] = o.NewSize

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExtendVolumeModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"new_size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtendVolumeModel := _ExtendVolumeModel{}

	err = json.Unmarshal(data, &varExtendVolumeModel)

	if err != nil {
		return err
	}

	*o = ExtendVolumeModel(varExtendVolumeModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "new_size")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExtendVolumeModel struct {
	value *ExtendVolumeModel
	isSet bool
}

func (v NullableExtendVolumeModel) Get() *ExtendVolumeModel {
	return v.value
}

func (v *NullableExtendVolumeModel) Set(val *ExtendVolumeModel) {
	v.value = val
	v.isSet = true
}

func (v NullableExtendVolumeModel) IsSet() bool {
	return v.isSet
}

func (v *NullableExtendVolumeModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtendVolumeModel(val *ExtendVolumeModel) *NullableExtendVolumeModel {
	return &NullableExtendVolumeModel{value: val, isSet: true}
}

func (v NullableExtendVolumeModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtendVolumeModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
