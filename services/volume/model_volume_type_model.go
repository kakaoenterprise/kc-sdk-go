/*
Beyond Compute Service(BCS) Volume API

Beyond Compute Service Volume API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package volume

import (
	"encoding/json"
	"fmt"
)

// checks if the VolumeTypeModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeTypeModel{}

// VolumeTypeModel struct for VolumeTypeModel
type VolumeTypeModel struct {
	// 볼륨의 ID
	Id string `json:"id"`
	// 볼륨 유형 이름
	Name                 string         `json:"name"`
	Description          NullableString `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VolumeTypeModel VolumeTypeModel

// NewVolumeTypeModel instantiates a new VolumeTypeModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeTypeModel(id string, name string) *VolumeTypeModel {
	this := VolumeTypeModel{}
	this.Id = id
	this.Name = name
	return &this
}

// NewVolumeTypeModelWithDefaults instantiates a new VolumeTypeModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeTypeModelWithDefaults() *VolumeTypeModel {
	this := VolumeTypeModel{}
	return &this
}

// GetId returns the Id field value
func (o *VolumeTypeModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VolumeTypeModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VolumeTypeModel) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *VolumeTypeModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VolumeTypeModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VolumeTypeModel) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeTypeModel) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeTypeModel) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *VolumeTypeModel) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *VolumeTypeModel) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *VolumeTypeModel) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *VolumeTypeModel) UnsetDescription() {
	o.Description.Unset()
}

func (o VolumeTypeModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeTypeModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VolumeTypeModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeTypeModel := _VolumeTypeModel{}

	err = json.Unmarshal(data, &varVolumeTypeModel)

	if err != nil {
		return err
	}

	*o = VolumeTypeModel(varVolumeTypeModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVolumeTypeModel struct {
	value *VolumeTypeModel
	isSet bool
}

func (v NullableVolumeTypeModel) Get() *VolumeTypeModel {
	return v.value
}

func (v *NullableVolumeTypeModel) Set(val *VolumeTypeModel) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeTypeModel) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeTypeModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeTypeModel(val *VolumeTypeModel) *NullableVolumeTypeModel {
	return &NullableVolumeTypeModel{value: val, isSet: true}
}

func (v NullableVolumeTypeModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeTypeModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
