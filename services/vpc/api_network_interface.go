/*
Beyond Networking Service(BNS) VPC API

BNS VPC API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type NetworkInterfaceAPI interface {

	/*
		CreateNetworkInterface Create network interface

		신규 네트워크 인터페이스를 생성합니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiCreateNetworkInterfaceRequest
	*/
	CreateNetworkInterface(ctx context.Context) ApiCreateNetworkInterfaceRequest

	// CreateNetworkInterfaceExecute executes the request
	//  @return BnsVpcV1ApiCreateNetworkInterfaceModelResponseNetworkInterfaceModel
	CreateNetworkInterfaceExecute(r ApiCreateNetworkInterfaceRequest) (*BnsVpcV1ApiCreateNetworkInterfaceModelResponseNetworkInterfaceModel, *http.Response, error)

	/*
		DeleteNetworkInterface Delete network interface

		네트워크 인터페이스를 삭제합니다. 단, 인스턴스에 연결되지 않은 `Available` 상태의 네트워크 인터페이스만 삭제할 수 있습니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param networkInterfaceId 삭제할 네트워크 인터페이스 ID
		@return ApiDeleteNetworkInterfaceRequest
	*/
	DeleteNetworkInterface(ctx context.Context, networkInterfaceId string) ApiDeleteNetworkInterfaceRequest

	// DeleteNetworkInterfaceExecute executes the request
	DeleteNetworkInterfaceExecute(r ApiDeleteNetworkInterfaceRequest) (*http.Response, error)

	/*
		GetNetworkInterface Get network interface

		특정 네트워크 인터페이스의 상세 정보를 조회합니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param networkInterfaceId 조회할 네트워크 인터페이스 ID
		@return ApiGetNetworkInterfaceRequest
	*/
	GetNetworkInterface(ctx context.Context, networkInterfaceId string) ApiGetNetworkInterfaceRequest

	// GetNetworkInterfaceExecute executes the request
	//  @return BnsVpcV1ApiGetNetworkInterfaceModelResponseNetworkInterfaceModel
	GetNetworkInterfaceExecute(r ApiGetNetworkInterfaceRequest) (*BnsVpcV1ApiGetNetworkInterfaceModelResponseNetworkInterfaceModel, *http.Response, error)

	/*
		ListNetworkInterfaces List network interfaces

		현재 프로젝트 내에서 생성된 네트워크 인터페이스 목록을 조회합니다.
	필터 조건을 설정하여 특정 조건에 맞는 인터페이스만 조회할 수 있으며, 정렬 및 페이지네이션도 지원합니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiListNetworkInterfacesRequest
	*/
	ListNetworkInterfaces(ctx context.Context) ApiListNetworkInterfacesRequest

	// ListNetworkInterfacesExecute executes the request
	//  @return NetworkInterfaceListModel
	ListNetworkInterfacesExecute(r ApiListNetworkInterfacesRequest) (*NetworkInterfaceListModel, *http.Response, error)

	/*
		UpdateNetworkInterface Update network interface

		네트워크 인터페이스의 이름, 설명, 보안 그룹 정보를 수정합니다.

	:::caution 주의
	보안 그룹 변경은 연결된 인스턴스의 트래픽 흐름에 영향을 줄 수 있으므로 주의가 필요합니다.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param networkInterfaceId 수정할 네트워크 인터페이스 ID
		@return ApiUpdateNetworkInterfaceRequest
	*/
	UpdateNetworkInterface(ctx context.Context, networkInterfaceId string) ApiUpdateNetworkInterfaceRequest

	// UpdateNetworkInterfaceExecute executes the request
	//  @return BnsVpcV1ApiUpdateNetworkInterfaceModelResponseNetworkInterfaceModel
	UpdateNetworkInterfaceExecute(r ApiUpdateNetworkInterfaceRequest) (*BnsVpcV1ApiUpdateNetworkInterfaceModelResponseNetworkInterfaceModel, *http.Response, error)

	/*
		UpdateNetworkInterfaceAllowedAddresses Update network interface allowed addresses

		네트워크 인터페이스에 대해 송신이 허용된 IP 목록을 설정하거나 갱신합니다.

	:::info 안내
	`allowed_address_pairs`를 설정하면, 해당 IP 및 MAC 주소로 송신되는 패킷이 허용됩니다. 주로 L2 보안이 필요한 네트워크 환경에서 사용됩니다.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param networkInterfaceId 설정할 대상 네트워크 인터페이스 ID
		@return ApiUpdateNetworkInterfaceAllowedAddressesRequest
	*/
	UpdateNetworkInterfaceAllowedAddresses(ctx context.Context, networkInterfaceId string) ApiUpdateNetworkInterfaceAllowedAddressesRequest

	// UpdateNetworkInterfaceAllowedAddressesExecute executes the request
	//  @return BnsVpcV1ApiUpdateNetworkInterfaceAllowedAddressesModelResponseNetworkInterfaceModel
	UpdateNetworkInterfaceAllowedAddressesExecute(r ApiUpdateNetworkInterfaceAllowedAddressesRequest) (*BnsVpcV1ApiUpdateNetworkInterfaceAllowedAddressesModelResponseNetworkInterfaceModel, *http.Response, error)
}

// NetworkInterfaceAPIService NetworkInterfaceAPI service
type NetworkInterfaceAPIService service

type ApiCreateNetworkInterfaceRequest struct {
	ctx                        context.Context
	ApiService                 NetworkInterfaceAPI
	xAuthToken                 *string
	bodyCreateNetworkInterface *BodyCreateNetworkInterface
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiCreateNetworkInterfaceRequest) XAuthToken(xAuthToken string) ApiCreateNetworkInterfaceRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiCreateNetworkInterfaceRequest) BodyCreateNetworkInterface(bodyCreateNetworkInterface BodyCreateNetworkInterface) ApiCreateNetworkInterfaceRequest {
	r.bodyCreateNetworkInterface = &bodyCreateNetworkInterface
	return r
}

func (r ApiCreateNetworkInterfaceRequest) Execute() (*BnsVpcV1ApiCreateNetworkInterfaceModelResponseNetworkInterfaceModel, *http.Response, error) {
	return r.ApiService.CreateNetworkInterfaceExecute(r)
}

/*
CreateNetworkInterface Create network interface

신규 네트워크 인터페이스를 생성합니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateNetworkInterfaceRequest
*/
func (a *NetworkInterfaceAPIService) CreateNetworkInterface(ctx context.Context) ApiCreateNetworkInterfaceRequest {
	return ApiCreateNetworkInterfaceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BnsVpcV1ApiCreateNetworkInterfaceModelResponseNetworkInterfaceModel
func (a *NetworkInterfaceAPIService) CreateNetworkInterfaceExecute(r ApiCreateNetworkInterfaceRequest) (*BnsVpcV1ApiCreateNetworkInterfaceModelResponseNetworkInterfaceModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BnsVpcV1ApiCreateNetworkInterfaceModelResponseNetworkInterfaceModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkInterfaceAPIService.CreateNetworkInterface")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/network-interfaces"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}
	if r.bodyCreateNetworkInterface == nil {
		return localVarReturnValue, nil, reportError("bodyCreateNetworkInterface is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	// body params
	localVarPostBody = r.bodyCreateNetworkInterface
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteNetworkInterfaceRequest struct {
	ctx                context.Context
	ApiService         NetworkInterfaceAPI
	networkInterfaceId string
	xAuthToken         *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiDeleteNetworkInterfaceRequest) XAuthToken(xAuthToken string) ApiDeleteNetworkInterfaceRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiDeleteNetworkInterfaceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteNetworkInterfaceExecute(r)
}

/*
DeleteNetworkInterface Delete network interface

네트워크 인터페이스를 삭제합니다. 단, 인스턴스에 연결되지 않은 `Available` 상태의 네트워크 인터페이스만 삭제할 수 있습니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param networkInterfaceId 삭제할 네트워크 인터페이스 ID
	@return ApiDeleteNetworkInterfaceRequest
*/
func (a *NetworkInterfaceAPIService) DeleteNetworkInterface(ctx context.Context, networkInterfaceId string) ApiDeleteNetworkInterfaceRequest {
	return ApiDeleteNetworkInterfaceRequest{
		ApiService:         a,
		ctx:                ctx,
		networkInterfaceId: networkInterfaceId,
	}
}

// Execute executes the request
func (a *NetworkInterfaceAPIService) DeleteNetworkInterfaceExecute(r ApiDeleteNetworkInterfaceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkInterfaceAPIService.DeleteNetworkInterface")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/network-interfaces/{network_interface_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"network_interface_id"+"}", url.PathEscape(parameterValueToString(r.networkInterfaceId, "networkInterfaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetNetworkInterfaceRequest struct {
	ctx                context.Context
	ApiService         NetworkInterfaceAPI
	networkInterfaceId string
	xAuthToken         *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiGetNetworkInterfaceRequest) XAuthToken(xAuthToken string) ApiGetNetworkInterfaceRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiGetNetworkInterfaceRequest) Execute() (*BnsVpcV1ApiGetNetworkInterfaceModelResponseNetworkInterfaceModel, *http.Response, error) {
	return r.ApiService.GetNetworkInterfaceExecute(r)
}

/*
GetNetworkInterface Get network interface

특정 네트워크 인터페이스의 상세 정보를 조회합니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param networkInterfaceId 조회할 네트워크 인터페이스 ID
	@return ApiGetNetworkInterfaceRequest
*/
func (a *NetworkInterfaceAPIService) GetNetworkInterface(ctx context.Context, networkInterfaceId string) ApiGetNetworkInterfaceRequest {
	return ApiGetNetworkInterfaceRequest{
		ApiService:         a,
		ctx:                ctx,
		networkInterfaceId: networkInterfaceId,
	}
}

// Execute executes the request
//
//	@return BnsVpcV1ApiGetNetworkInterfaceModelResponseNetworkInterfaceModel
func (a *NetworkInterfaceAPIService) GetNetworkInterfaceExecute(r ApiGetNetworkInterfaceRequest) (*BnsVpcV1ApiGetNetworkInterfaceModelResponseNetworkInterfaceModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BnsVpcV1ApiGetNetworkInterfaceModelResponseNetworkInterfaceModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkInterfaceAPIService.GetNetworkInterface")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/network-interfaces/{network_interface_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"network_interface_id"+"}", url.PathEscape(parameterValueToString(r.networkInterfaceId, "networkInterfaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListNetworkInterfacesRequest struct {
	ctx               context.Context
	ApiService        NetworkInterfaceAPI
	xAuthToken        *string
	id                *string
	name              *string
	status            *NetworkInterfaceStatus
	privateIp         *string
	publicIp          *string
	deviceId          *string
	deviceOwner       *string
	subnetId          *string
	macAddress        *string
	securityGroupId   *string
	securityGroupName *string
	createdAt         *string
	updatedAt         *string
	sortKeys          *string
	sortDirs          *string
	limit             *int32
	offset            *int32
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiListNetworkInterfacesRequest) XAuthToken(xAuthToken string) ApiListNetworkInterfacesRequest {
	r.xAuthToken = &xAuthToken
	return r
}

// 네트워크 인터페이스 ID
func (r ApiListNetworkInterfacesRequest) Id(id string) ApiListNetworkInterfacesRequest {
	r.id = &id
	return r
}

// 네트워크 인터페이스 이름
func (r ApiListNetworkInterfacesRequest) Name(name string) ApiListNetworkInterfacesRequest {
	r.name = &name
	return r
}

// 네트워크 인터페이스의 상태 &lt;br/&gt; - &#x60;available&#x60;: 사용 가능 상태&lt;br/&gt; - &#x60;in_use&#x60;: 사용 중 상태
func (r ApiListNetworkInterfacesRequest) Status(status NetworkInterfaceStatus) ApiListNetworkInterfacesRequest {
	r.status = &status
	return r
}

// 프라이빗 IP 주소 (IPv4 형식)
func (r ApiListNetworkInterfacesRequest) PrivateIp(privateIp string) ApiListNetworkInterfacesRequest {
	r.privateIp = &privateIp
	return r
}

// 퍼블릭 IP 주소
func (r ApiListNetworkInterfacesRequest) PublicIp(publicIp string) ApiListNetworkInterfacesRequest {
	r.publicIp = &publicIp
	return r
}

// 연결된 디바이스 ID (예: 인스턴스 ID 등)
func (r ApiListNetworkInterfacesRequest) DeviceId(deviceId string) ApiListNetworkInterfacesRequest {
	r.deviceId = &deviceId
	return r
}

// 인터페이스가 연결된 리소스의 소유자 유형 (예: 인스턴스, 라우터 등)
func (r ApiListNetworkInterfacesRequest) DeviceOwner(deviceOwner string) ApiListNetworkInterfacesRequest {
	r.deviceOwner = &deviceOwner
	return r
}

// 연결된 서브넷 ID
func (r ApiListNetworkInterfacesRequest) SubnetId(subnetId string) ApiListNetworkInterfacesRequest {
	r.subnetId = &subnetId
	return r
}

// 네트워크 인터페이스의 MAC 주소
func (r ApiListNetworkInterfacesRequest) MacAddress(macAddress string) ApiListNetworkInterfacesRequest {
	r.macAddress = &macAddress
	return r
}

// 보안 그룹의 고유 ID
func (r ApiListNetworkInterfacesRequest) SecurityGroupId(securityGroupId string) ApiListNetworkInterfacesRequest {
	r.securityGroupId = &securityGroupId
	return r
}

// 보안 그룹 이름
func (r ApiListNetworkInterfacesRequest) SecurityGroupName(securityGroupName string) ApiListNetworkInterfacesRequest {
	r.securityGroupName = &securityGroupName
	return r
}

// 리소스가 생성된 시간 &lt;br/&gt; - ISO_8601 형식  &lt;br/&gt; - UTC 기준
func (r ApiListNetworkInterfacesRequest) CreatedAt(createdAt string) ApiListNetworkInterfacesRequest {
	r.createdAt = &createdAt
	return r
}

// 리소스가 마지막으로 수정된 시간 &lt;br/&gt; - ISO_8601 형식  &lt;br/&gt; - UTC 기준
func (r ApiListNetworkInterfacesRequest) UpdatedAt(updatedAt string) ApiListNetworkInterfacesRequest {
	r.updatedAt = &updatedAt
	return r
}

// 정렬할 필드를 콤마(,)로 구분
func (r ApiListNetworkInterfacesRequest) SortKeys(sortKeys string) ApiListNetworkInterfacesRequest {
	r.sortKeys = &sortKeys
	return r
}

// 정렬 방향 (&#x60;asc&#x60;, &#x60;desc&#x60;)
func (r ApiListNetworkInterfacesRequest) SortDirs(sortDirs string) ApiListNetworkInterfacesRequest {
	r.sortDirs = &sortDirs
	return r
}

// 페이지당 최대 반환 항목 수
func (r ApiListNetworkInterfacesRequest) Limit(limit int32) ApiListNetworkInterfacesRequest {
	r.limit = &limit
	return r
}

// 조회 시작 위치
func (r ApiListNetworkInterfacesRequest) Offset(offset int32) ApiListNetworkInterfacesRequest {
	r.offset = &offset
	return r
}

func (r ApiListNetworkInterfacesRequest) Execute() (*NetworkInterfaceListModel, *http.Response, error) {
	return r.ApiService.ListNetworkInterfacesExecute(r)
}

/*
ListNetworkInterfaces List network interfaces

현재 프로젝트 내에서 생성된 네트워크 인터페이스 목록을 조회합니다.
필터 조건을 설정하여 특정 조건에 맞는 인터페이스만 조회할 수 있으며, 정렬 및 페이지네이션도 지원합니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListNetworkInterfacesRequest
*/
func (a *NetworkInterfaceAPIService) ListNetworkInterfaces(ctx context.Context) ApiListNetworkInterfacesRequest {
	return ApiListNetworkInterfacesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return NetworkInterfaceListModel
func (a *NetworkInterfaceAPIService) ListNetworkInterfacesExecute(r ApiListNetworkInterfacesRequest) (*NetworkInterfaceListModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *NetworkInterfaceListModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkInterfaceAPIService.ListNetworkInterfaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/network-interfaces"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "form", "")
	}
	if r.privateIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "private_ip", r.privateIp, "form", "")
	}
	if r.publicIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "public_ip", r.publicIp, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", r.deviceId, "form", "")
	}
	if r.deviceOwner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "device_owner", r.deviceOwner, "form", "")
	}
	if r.subnetId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subnet_id", r.subnetId, "form", "")
	}
	if r.macAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address", r.macAddress, "form", "")
	}
	if r.securityGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "security_group_id", r.securityGroupId, "form", "")
	}
	if r.securityGroupName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "security_group_name", r.securityGroupName, "form", "")
	}
	if r.createdAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at", r.createdAt, "form", "")
	}
	if r.updatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at", r.updatedAt, "form", "")
	}
	if r.sortKeys != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_keys", r.sortKeys, "form", "")
	} else {
		var defaultValue string = "created_at"
		r.sortKeys = &defaultValue
	}
	if r.sortDirs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_dirs", r.sortDirs, "form", "")
	} else {
		var defaultValue string = "desc"
		r.sortDirs = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 20
		r.limit = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateNetworkInterfaceRequest struct {
	ctx                        context.Context
	ApiService                 NetworkInterfaceAPI
	networkInterfaceId         string
	xAuthToken                 *string
	bodyUpdateNetworkInterface *BodyUpdateNetworkInterface
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiUpdateNetworkInterfaceRequest) XAuthToken(xAuthToken string) ApiUpdateNetworkInterfaceRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiUpdateNetworkInterfaceRequest) BodyUpdateNetworkInterface(bodyUpdateNetworkInterface BodyUpdateNetworkInterface) ApiUpdateNetworkInterfaceRequest {
	r.bodyUpdateNetworkInterface = &bodyUpdateNetworkInterface
	return r
}

func (r ApiUpdateNetworkInterfaceRequest) Execute() (*BnsVpcV1ApiUpdateNetworkInterfaceModelResponseNetworkInterfaceModel, *http.Response, error) {
	return r.ApiService.UpdateNetworkInterfaceExecute(r)
}

/*
UpdateNetworkInterface Update network interface

네트워크 인터페이스의 이름, 설명, 보안 그룹 정보를 수정합니다.

:::caution 주의
보안 그룹 변경은 연결된 인스턴스의 트래픽 흐름에 영향을 줄 수 있으므로 주의가 필요합니다.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param networkInterfaceId 수정할 네트워크 인터페이스 ID
	@return ApiUpdateNetworkInterfaceRequest
*/
func (a *NetworkInterfaceAPIService) UpdateNetworkInterface(ctx context.Context, networkInterfaceId string) ApiUpdateNetworkInterfaceRequest {
	return ApiUpdateNetworkInterfaceRequest{
		ApiService:         a,
		ctx:                ctx,
		networkInterfaceId: networkInterfaceId,
	}
}

// Execute executes the request
//
//	@return BnsVpcV1ApiUpdateNetworkInterfaceModelResponseNetworkInterfaceModel
func (a *NetworkInterfaceAPIService) UpdateNetworkInterfaceExecute(r ApiUpdateNetworkInterfaceRequest) (*BnsVpcV1ApiUpdateNetworkInterfaceModelResponseNetworkInterfaceModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BnsVpcV1ApiUpdateNetworkInterfaceModelResponseNetworkInterfaceModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkInterfaceAPIService.UpdateNetworkInterface")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/network-interfaces/{network_interface_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"network_interface_id"+"}", url.PathEscape(parameterValueToString(r.networkInterfaceId, "networkInterfaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}
	if r.bodyUpdateNetworkInterface == nil {
		return localVarReturnValue, nil, reportError("bodyUpdateNetworkInterface is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	// body params
	localVarPostBody = r.bodyUpdateNetworkInterface
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateNetworkInterfaceAllowedAddressesRequest struct {
	ctx                                        context.Context
	ApiService                                 NetworkInterfaceAPI
	networkInterfaceId                         string
	xAuthToken                                 *string
	bodyUpdateNetworkInterfaceAllowedAddresses *BodyUpdateNetworkInterfaceAllowedAddresses
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiUpdateNetworkInterfaceAllowedAddressesRequest) XAuthToken(xAuthToken string) ApiUpdateNetworkInterfaceAllowedAddressesRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiUpdateNetworkInterfaceAllowedAddressesRequest) BodyUpdateNetworkInterfaceAllowedAddresses(bodyUpdateNetworkInterfaceAllowedAddresses BodyUpdateNetworkInterfaceAllowedAddresses) ApiUpdateNetworkInterfaceAllowedAddressesRequest {
	r.bodyUpdateNetworkInterfaceAllowedAddresses = &bodyUpdateNetworkInterfaceAllowedAddresses
	return r
}

func (r ApiUpdateNetworkInterfaceAllowedAddressesRequest) Execute() (*BnsVpcV1ApiUpdateNetworkInterfaceAllowedAddressesModelResponseNetworkInterfaceModel, *http.Response, error) {
	return r.ApiService.UpdateNetworkInterfaceAllowedAddressesExecute(r)
}

/*
UpdateNetworkInterfaceAllowedAddresses Update network interface allowed addresses

네트워크 인터페이스에 대해 송신이 허용된 IP 목록을 설정하거나 갱신합니다.

:::info 안내
`allowed_address_pairs`를 설정하면, 해당 IP 및 MAC 주소로 송신되는 패킷이 허용됩니다. 주로 L2 보안이 필요한 네트워크 환경에서 사용됩니다.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param networkInterfaceId 설정할 대상 네트워크 인터페이스 ID
	@return ApiUpdateNetworkInterfaceAllowedAddressesRequest
*/
func (a *NetworkInterfaceAPIService) UpdateNetworkInterfaceAllowedAddresses(ctx context.Context, networkInterfaceId string) ApiUpdateNetworkInterfaceAllowedAddressesRequest {
	return ApiUpdateNetworkInterfaceAllowedAddressesRequest{
		ApiService:         a,
		ctx:                ctx,
		networkInterfaceId: networkInterfaceId,
	}
}

// Execute executes the request
//
//	@return BnsVpcV1ApiUpdateNetworkInterfaceAllowedAddressesModelResponseNetworkInterfaceModel
func (a *NetworkInterfaceAPIService) UpdateNetworkInterfaceAllowedAddressesExecute(r ApiUpdateNetworkInterfaceAllowedAddressesRequest) (*BnsVpcV1ApiUpdateNetworkInterfaceAllowedAddressesModelResponseNetworkInterfaceModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BnsVpcV1ApiUpdateNetworkInterfaceAllowedAddressesModelResponseNetworkInterfaceModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkInterfaceAPIService.UpdateNetworkInterfaceAllowedAddresses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/network-interfaces/{network_interface_id}/allowed-address-pairs"
	localVarPath = strings.Replace(localVarPath, "{"+"network_interface_id"+"}", url.PathEscape(parameterValueToString(r.networkInterfaceId, "networkInterfaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}
	if r.bodyUpdateNetworkInterfaceAllowedAddresses == nil {
		return localVarReturnValue, nil, reportError("bodyUpdateNetworkInterfaceAllowedAddresses is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	// body params
	localVarPostBody = r.bodyUpdateNetworkInterfaceAllowedAddresses
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
