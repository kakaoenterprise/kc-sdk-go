/*
Beyond Networking Service(BNS) VPC API

BNS VPC API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type VPCRouteTableAssociationAPI interface {

	/*
		ListRouteTableAssociations List route table associations

		지정한 라우팅 테이블에 연결된 모든 서브넷 목록을 조회합니다.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param routeTableId 라우팅 테이블의 고유 ID
		@return ApiListRouteTableAssociationsRequest
	*/
	ListRouteTableAssociations(ctx context.Context, routeTableId string) ApiListRouteTableAssociationsRequest

	// ListRouteTableAssociationsExecute executes the request
	//  @return RouteTableAssociationListModel
	ListRouteTableAssociationsExecute(r ApiListRouteTableAssociationsRequest) (*RouteTableAssociationListModel, *http.Response, error)

	/*
		UpdateRouteTableAssociation Update route table association

		라우팅 테이블과 서브넷 간 연결 정보를 수정합니다. 라우팅 테이블에 연결되어있는 서브넷을 다른 대상 라우팅 테이블에 연결할 수 있습니다.


	:::caution 주의
	라우팅 테이블과 서브넷 간 연결 정보 수정 시 서브넷이 다른 라우팅 테이블에 연결되어 통신 경로가 변경될 수 있습니다. <br/>변경 전 연결된 서브넷 현황을 확인하는 것을 권장합니다.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param routeTableId 현재 연결에 매핑된 라우팅 테이블 ID
		@param associationId 수정할 라우팅 테이블과 서브넷 연결 정보를 식별하는 ID
		@return ApiUpdateRouteTableAssociationRequest
	*/
	UpdateRouteTableAssociation(ctx context.Context, routeTableId string, associationId string) ApiUpdateRouteTableAssociationRequest

	// UpdateRouteTableAssociationExecute executes the request
	//  @return ResponseRouteTableAssociationModel
	UpdateRouteTableAssociationExecute(r ApiUpdateRouteTableAssociationRequest) (*ResponseRouteTableAssociationModel, *http.Response, error)
}

// VPCRouteTableAssociationAPIService VPCRouteTableAssociationAPI service
type VPCRouteTableAssociationAPIService service

type ApiListRouteTableAssociationsRequest struct {
	ctx          context.Context
	ApiService   VPCRouteTableAssociationAPI
	routeTableId string
	xAuthToken   *string
	limit        *int32
	offset       *int32
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiListRouteTableAssociationsRequest) XAuthToken(xAuthToken string) ApiListRouteTableAssociationsRequest {
	r.xAuthToken = &xAuthToken
	return r
}

// 페이지당 최대 반환 항목 수
func (r ApiListRouteTableAssociationsRequest) Limit(limit int32) ApiListRouteTableAssociationsRequest {
	r.limit = &limit
	return r
}

// 조회 시작 위치
func (r ApiListRouteTableAssociationsRequest) Offset(offset int32) ApiListRouteTableAssociationsRequest {
	r.offset = &offset
	return r
}

func (r ApiListRouteTableAssociationsRequest) Execute() (*RouteTableAssociationListModel, *http.Response, error) {
	return r.ApiService.ListRouteTableAssociationsExecute(r)
}

/*
ListRouteTableAssociations List route table associations

지정한 라우팅 테이블에 연결된 모든 서브넷 목록을 조회합니다.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param routeTableId 라우팅 테이블의 고유 ID
	@return ApiListRouteTableAssociationsRequest
*/
func (a *VPCRouteTableAssociationAPIService) ListRouteTableAssociations(ctx context.Context, routeTableId string) ApiListRouteTableAssociationsRequest {
	return ApiListRouteTableAssociationsRequest{
		ApiService:   a,
		ctx:          ctx,
		routeTableId: routeTableId,
	}
}

// Execute executes the request
//
//	@return RouteTableAssociationListModel
func (a *VPCRouteTableAssociationAPIService) ListRouteTableAssociationsExecute(r ApiListRouteTableAssociationsRequest) (*RouteTableAssociationListModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RouteTableAssociationListModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VPCRouteTableAssociationAPIService.ListRouteTableAssociations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/route-tables/{route_table_id}/associations"
	localVarPath = strings.Replace(localVarPath, "{"+"route_table_id"+"}", url.PathEscape(parameterValueToString(r.routeTableId, "routeTableId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 20
		r.limit = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateRouteTableAssociationRequest struct {
	ctx                             context.Context
	ApiService                      VPCRouteTableAssociationAPI
	routeTableId                    string
	associationId                   string
	xAuthToken                      *string
	bodyUpdateRouteTableAssociation *BodyUpdateRouteTableAssociation
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiUpdateRouteTableAssociationRequest) XAuthToken(xAuthToken string) ApiUpdateRouteTableAssociationRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiUpdateRouteTableAssociationRequest) BodyUpdateRouteTableAssociation(bodyUpdateRouteTableAssociation BodyUpdateRouteTableAssociation) ApiUpdateRouteTableAssociationRequest {
	r.bodyUpdateRouteTableAssociation = &bodyUpdateRouteTableAssociation
	return r
}

func (r ApiUpdateRouteTableAssociationRequest) Execute() (*ResponseRouteTableAssociationModel, *http.Response, error) {
	return r.ApiService.UpdateRouteTableAssociationExecute(r)
}

/*
UpdateRouteTableAssociation Update route table association

라우팅 테이블과 서브넷 간 연결 정보를 수정합니다. 라우팅 테이블에 연결되어있는 서브넷을 다른 대상 라우팅 테이블에 연결할 수 있습니다.

:::caution 주의
라우팅 테이블과 서브넷 간 연결 정보 수정 시 서브넷이 다른 라우팅 테이블에 연결되어 통신 경로가 변경될 수 있습니다. <br/>변경 전 연결된 서브넷 현황을 확인하는 것을 권장합니다.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param routeTableId 현재 연결에 매핑된 라우팅 테이블 ID
	@param associationId 수정할 라우팅 테이블과 서브넷 연결 정보를 식별하는 ID
	@return ApiUpdateRouteTableAssociationRequest
*/
func (a *VPCRouteTableAssociationAPIService) UpdateRouteTableAssociation(ctx context.Context, routeTableId string, associationId string) ApiUpdateRouteTableAssociationRequest {
	return ApiUpdateRouteTableAssociationRequest{
		ApiService:    a,
		ctx:           ctx,
		routeTableId:  routeTableId,
		associationId: associationId,
	}
}

// Execute executes the request
//
//	@return ResponseRouteTableAssociationModel
func (a *VPCRouteTableAssociationAPIService) UpdateRouteTableAssociationExecute(r ApiUpdateRouteTableAssociationRequest) (*ResponseRouteTableAssociationModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResponseRouteTableAssociationModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VPCRouteTableAssociationAPIService.UpdateRouteTableAssociation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/route-tables/{route_table_id}/associations/{association_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"route_table_id"+"}", url.PathEscape(parameterValueToString(r.routeTableId, "routeTableId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"association_id"+"}", url.PathEscape(parameterValueToString(r.associationId, "associationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}
	if r.bodyUpdateRouteTableAssociation == nil {
		return localVarReturnValue, nil, reportError("bodyUpdateRouteTableAssociation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	// body params
	localVarPostBody = r.bodyUpdateRouteTableAssociation
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
