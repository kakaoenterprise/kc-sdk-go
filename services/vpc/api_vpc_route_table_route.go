/*
Beyond Networking Service(BNS) VPC API

BNS VPC API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type VPCRouteTableRouteAPI interface {

	/*
		AddRoute Add route

		라우팅 테이블에 새로운 라우팅 항목을 추가합니다.

	:::info 안내
	- 라우팅 추가/변경/삭제 시 연결된 서브넷의 통신 경로가 변경됩니다. 변경 전 연결된 서브넷 현황을 확인하는 것을 권장합니다.
	- 네트워크 인터페이스가 2개 이상 연결된 인스턴스는 라우팅 테이블의 대상(target)으로 지정할 수 없습니다. 추후 인터페이스 단위 대상 지정이 지원될 예정입니다.
	- 이미 존재하는 경로는 중복 추가할 수 없습니다.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param routeTableId 라우팅을 추가할 대상 라우팅 테이블의 ID <br/> - [List route tables](https://docs.kakaocloud.com/openapi/bns/vpc/list-route-tables) API 참고
		@return ApiAddRouteRequest
	*/
	AddRoute(ctx context.Context, routeTableId string) ApiAddRouteRequest

	// AddRouteExecute executes the request
	//  @return BnsVpcV1ApiAddRouteModelResponseRouteModel
	AddRouteExecute(r ApiAddRouteRequest) (*BnsVpcV1ApiAddRouteModelResponseRouteModel, *http.Response, error)

	/*
		DeleteRoute Delete route

		지정된 라우팅 테이블에서 개별 라우팅(Route) 항목을 삭제합니다.
	삭제된 라우팅은 즉시 네트워크에서 제거되며, 해당 목적지로의 트래픽이 차단될 수 있습니다.

	:::caution 주의
	- 삭제된 라우팅은 복구할 수 없습니다.
	- 라우팅 경로가 제거되면, 해당 CIDR 범위로의 네트워크 통신이 차단될 수 있습니다.
	- 삭제 전에 반드시 라우팅 테이블과 연결된 서브넷 구성과 트래픽 경로를 확인해야 합니다.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param routeTableId 삭제할 라우팅 테이블 ID
		@param routeId 삭제할 라우팅 ID
		@return ApiDeleteRouteRequest
	*/
	DeleteRoute(ctx context.Context, routeTableId string, routeId string) ApiDeleteRouteRequest

	// DeleteRouteExecute executes the request
	DeleteRouteExecute(r ApiDeleteRouteRequest) (*http.Response, error)

	/*
		UpdateRoute Update route

		라우팅 테이블에 등록된 개별 라우팅 항목을 수정합니다. 목적지(CIDR) 또는 대상 리소스(ID)를 변경할 수 있으며, 수정 내용은 즉시 적용됩니다.

	:::info 안내
	- 라우팅 변경 시 연결된 서브넷의 네트워크 경로가 변경될 수 있으므로 사전에 영향도를 충분히 검토해야 합니다.
	- 카카오클라우드 서비스를 위해 사용되는 링크 로컬 주소 대역인 `169.254.0.0/16` 및 이에 포함되는 목적지 CIDR는 경로로 추가할 수 없습니다.
	- 네트워크 인터페이스가 2개 이상 연결된 인스턴스는 대상 리소스로 지정할 수 없습니다. 이 기능은 추후 지원 예정입니다.
	:::

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param routeTableId 라우팅 테이블의 고유 ID
		@param routeId 라우팅의 고유 ID
		@return ApiUpdateRouteRequest
	*/
	UpdateRoute(ctx context.Context, routeTableId string, routeId string) ApiUpdateRouteRequest

	// UpdateRouteExecute executes the request
	//  @return BnsVpcV1ApiUpdateRouteModelResponseRouteModel
	UpdateRouteExecute(r ApiUpdateRouteRequest) (*BnsVpcV1ApiUpdateRouteModelResponseRouteModel, *http.Response, error)
}

// VPCRouteTableRouteAPIService VPCRouteTableRouteAPI service
type VPCRouteTableRouteAPIService service

type ApiAddRouteRequest struct {
	ctx          context.Context
	ApiService   VPCRouteTableRouteAPI
	routeTableId string
	xAuthToken   *string
	bodyAddRoute *BodyAddRoute
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiAddRouteRequest) XAuthToken(xAuthToken string) ApiAddRouteRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiAddRouteRequest) BodyAddRoute(bodyAddRoute BodyAddRoute) ApiAddRouteRequest {
	r.bodyAddRoute = &bodyAddRoute
	return r
}

func (r ApiAddRouteRequest) Execute() (*BnsVpcV1ApiAddRouteModelResponseRouteModel, *http.Response, error) {
	return r.ApiService.AddRouteExecute(r)
}

/*
AddRoute Add route

라우팅 테이블에 새로운 라우팅 항목을 추가합니다.

:::info 안내
- 라우팅 추가/변경/삭제 시 연결된 서브넷의 통신 경로가 변경됩니다. 변경 전 연결된 서브넷 현황을 확인하는 것을 권장합니다.
- 네트워크 인터페이스가 2개 이상 연결된 인스턴스는 라우팅 테이블의 대상(target)으로 지정할 수 없습니다. 추후 인터페이스 단위 대상 지정이 지원될 예정입니다.
- 이미 존재하는 경로는 중복 추가할 수 없습니다.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param routeTableId 라우팅을 추가할 대상 라우팅 테이블의 ID <br/> - [List route tables](https://docs.kakaocloud.com/openapi/bns/vpc/list-route-tables) API 참고
	@return ApiAddRouteRequest
*/
func (a *VPCRouteTableRouteAPIService) AddRoute(ctx context.Context, routeTableId string) ApiAddRouteRequest {
	return ApiAddRouteRequest{
		ApiService:   a,
		ctx:          ctx,
		routeTableId: routeTableId,
	}
}

// Execute executes the request
//
//	@return BnsVpcV1ApiAddRouteModelResponseRouteModel
func (a *VPCRouteTableRouteAPIService) AddRouteExecute(r ApiAddRouteRequest) (*BnsVpcV1ApiAddRouteModelResponseRouteModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BnsVpcV1ApiAddRouteModelResponseRouteModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VPCRouteTableRouteAPIService.AddRoute")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/route-tables/{route_table_id}/routes"
	localVarPath = strings.Replace(localVarPath, "{"+"route_table_id"+"}", url.PathEscape(parameterValueToString(r.routeTableId, "routeTableId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}
	if r.bodyAddRoute == nil {
		return localVarReturnValue, nil, reportError("bodyAddRoute is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	// body params
	localVarPostBody = r.bodyAddRoute
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRouteRequest struct {
	ctx          context.Context
	ApiService   VPCRouteTableRouteAPI
	routeTableId string
	routeId      string
	xAuthToken   *string
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiDeleteRouteRequest) XAuthToken(xAuthToken string) ApiDeleteRouteRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiDeleteRouteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRouteExecute(r)
}

/*
DeleteRoute Delete route

지정된 라우팅 테이블에서 개별 라우팅(Route) 항목을 삭제합니다.
삭제된 라우팅은 즉시 네트워크에서 제거되며, 해당 목적지로의 트래픽이 차단될 수 있습니다.

:::caution 주의
- 삭제된 라우팅은 복구할 수 없습니다.
- 라우팅 경로가 제거되면, 해당 CIDR 범위로의 네트워크 통신이 차단될 수 있습니다.
- 삭제 전에 반드시 라우팅 테이블과 연결된 서브넷 구성과 트래픽 경로를 확인해야 합니다.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param routeTableId 삭제할 라우팅 테이블 ID
	@param routeId 삭제할 라우팅 ID
	@return ApiDeleteRouteRequest
*/
func (a *VPCRouteTableRouteAPIService) DeleteRoute(ctx context.Context, routeTableId string, routeId string) ApiDeleteRouteRequest {
	return ApiDeleteRouteRequest{
		ApiService:   a,
		ctx:          ctx,
		routeTableId: routeTableId,
		routeId:      routeId,
	}
}

// Execute executes the request
func (a *VPCRouteTableRouteAPIService) DeleteRouteExecute(r ApiDeleteRouteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VPCRouteTableRouteAPIService.DeleteRoute")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/route-tables/{route_table_id}/routes/{route_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"route_table_id"+"}", url.PathEscape(parameterValueToString(r.routeTableId, "routeTableId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"route_id"+"}", url.PathEscape(parameterValueToString(r.routeId, "routeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return nil, reportError("xAuthToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateRouteRequest struct {
	ctx             context.Context
	ApiService      VPCRouteTableRouteAPI
	routeTableId    string
	routeId         string
	xAuthToken      *string
	bodyUpdateRoute *BodyUpdateRoute
}

// - [API 인증 토큰](https://docs.kakaocloud.com/openapi/start#api-인증-토큰-발급)
func (r ApiUpdateRouteRequest) XAuthToken(xAuthToken string) ApiUpdateRouteRequest {
	r.xAuthToken = &xAuthToken
	return r
}

func (r ApiUpdateRouteRequest) BodyUpdateRoute(bodyUpdateRoute BodyUpdateRoute) ApiUpdateRouteRequest {
	r.bodyUpdateRoute = &bodyUpdateRoute
	return r
}

func (r ApiUpdateRouteRequest) Execute() (*BnsVpcV1ApiUpdateRouteModelResponseRouteModel, *http.Response, error) {
	return r.ApiService.UpdateRouteExecute(r)
}

/*
UpdateRoute Update route

라우팅 테이블에 등록된 개별 라우팅 항목을 수정합니다. 목적지(CIDR) 또는 대상 리소스(ID)를 변경할 수 있으며, 수정 내용은 즉시 적용됩니다.

:::info 안내
- 라우팅 변경 시 연결된 서브넷의 네트워크 경로가 변경될 수 있으므로 사전에 영향도를 충분히 검토해야 합니다.
- 카카오클라우드 서비스를 위해 사용되는 링크 로컬 주소 대역인 `169.254.0.0/16` 및 이에 포함되는 목적지 CIDR는 경로로 추가할 수 없습니다.
- 네트워크 인터페이스가 2개 이상 연결된 인스턴스는 대상 리소스로 지정할 수 없습니다. 이 기능은 추후 지원 예정입니다.
:::

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param routeTableId 라우팅 테이블의 고유 ID
	@param routeId 라우팅의 고유 ID
	@return ApiUpdateRouteRequest
*/
func (a *VPCRouteTableRouteAPIService) UpdateRoute(ctx context.Context, routeTableId string, routeId string) ApiUpdateRouteRequest {
	return ApiUpdateRouteRequest{
		ApiService:   a,
		ctx:          ctx,
		routeTableId: routeTableId,
		routeId:      routeId,
	}
}

// Execute executes the request
//
//	@return BnsVpcV1ApiUpdateRouteModelResponseRouteModel
func (a *VPCRouteTableRouteAPIService) UpdateRouteExecute(r ApiUpdateRouteRequest) (*BnsVpcV1ApiUpdateRouteModelResponseRouteModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BnsVpcV1ApiUpdateRouteModelResponseRouteModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VPCRouteTableRouteAPIService.UpdateRoute")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/route-tables/{route_table_id}/routes/{route_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"route_table_id"+"}", url.PathEscape(parameterValueToString(r.routeTableId, "routeTableId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"route_id"+"}", url.PathEscape(parameterValueToString(r.routeId, "routeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xAuthToken == nil {
		return localVarReturnValue, nil, reportError("xAuthToken is required and must be specified")
	}
	if r.bodyUpdateRoute == nil {
		return localVarReturnValue, nil, reportError("bodyUpdateRoute is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-auth-token", r.xAuthToken, "simple", "")
	// body params
	localVarPostBody = r.bodyUpdateRoute
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-auth-token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
