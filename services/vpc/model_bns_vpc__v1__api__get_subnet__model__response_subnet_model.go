/*
Beyond Networking Service(BNS) VPC API

BNS VPC API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// checks if the BnsVpcV1ApiGetSubnetModelResponseSubnetModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BnsVpcV1ApiGetSubnetModelResponseSubnetModel{}

// BnsVpcV1ApiGetSubnetModelResponseSubnetModel struct for BnsVpcV1ApiGetSubnetModelResponseSubnetModel
type BnsVpcV1ApiGetSubnetModelResponseSubnetModel struct {
	Subnet               BnsVpcV1ApiGetSubnetModelSubnetModel `json:"subnet"`
	AdditionalProperties map[string]interface{}
}

type _BnsVpcV1ApiGetSubnetModelResponseSubnetModel BnsVpcV1ApiGetSubnetModelResponseSubnetModel

// NewBnsVpcV1ApiGetSubnetModelResponseSubnetModel instantiates a new BnsVpcV1ApiGetSubnetModelResponseSubnetModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBnsVpcV1ApiGetSubnetModelResponseSubnetModel(subnet BnsVpcV1ApiGetSubnetModelSubnetModel) *BnsVpcV1ApiGetSubnetModelResponseSubnetModel {
	this := BnsVpcV1ApiGetSubnetModelResponseSubnetModel{}
	this.Subnet = subnet
	return &this
}

// NewBnsVpcV1ApiGetSubnetModelResponseSubnetModelWithDefaults instantiates a new BnsVpcV1ApiGetSubnetModelResponseSubnetModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBnsVpcV1ApiGetSubnetModelResponseSubnetModelWithDefaults() *BnsVpcV1ApiGetSubnetModelResponseSubnetModel {
	this := BnsVpcV1ApiGetSubnetModelResponseSubnetModel{}
	return &this
}

// GetSubnet returns the Subnet field value
func (o *BnsVpcV1ApiGetSubnetModelResponseSubnetModel) GetSubnet() BnsVpcV1ApiGetSubnetModelSubnetModel {
	if o == nil {
		var ret BnsVpcV1ApiGetSubnetModelSubnetModel
		return ret
	}

	return o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value
// and a boolean to check if the value has been set.
func (o *BnsVpcV1ApiGetSubnetModelResponseSubnetModel) GetSubnetOk() (*BnsVpcV1ApiGetSubnetModelSubnetModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subnet, true
}

// SetSubnet sets field value
func (o *BnsVpcV1ApiGetSubnetModelResponseSubnetModel) SetSubnet(v BnsVpcV1ApiGetSubnetModelSubnetModel) {
	o.Subnet = v
}

func (o BnsVpcV1ApiGetSubnetModelResponseSubnetModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BnsVpcV1ApiGetSubnetModelResponseSubnetModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subnet"] = o.Subnet

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BnsVpcV1ApiGetSubnetModelResponseSubnetModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subnet",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBnsVpcV1ApiGetSubnetModelResponseSubnetModel := _BnsVpcV1ApiGetSubnetModelResponseSubnetModel{}

	err = json.Unmarshal(data, &varBnsVpcV1ApiGetSubnetModelResponseSubnetModel)

	if err != nil {
		return err
	}

	*o = BnsVpcV1ApiGetSubnetModelResponseSubnetModel(varBnsVpcV1ApiGetSubnetModelResponseSubnetModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "subnet")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBnsVpcV1ApiGetSubnetModelResponseSubnetModel struct {
	value *BnsVpcV1ApiGetSubnetModelResponseSubnetModel
	isSet bool
}

func (v NullableBnsVpcV1ApiGetSubnetModelResponseSubnetModel) Get() *BnsVpcV1ApiGetSubnetModelResponseSubnetModel {
	return v.value
}

func (v *NullableBnsVpcV1ApiGetSubnetModelResponseSubnetModel) Set(val *BnsVpcV1ApiGetSubnetModelResponseSubnetModel) {
	v.value = val
	v.isSet = true
}

func (v NullableBnsVpcV1ApiGetSubnetModelResponseSubnetModel) IsSet() bool {
	return v.isSet
}

func (v *NullableBnsVpcV1ApiGetSubnetModelResponseSubnetModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBnsVpcV1ApiGetSubnetModelResponseSubnetModel(val *BnsVpcV1ApiGetSubnetModelResponseSubnetModel) *NullableBnsVpcV1ApiGetSubnetModelResponseSubnetModel {
	return &NullableBnsVpcV1ApiGetSubnetModelResponseSubnetModel{value: val, isSet: true}
}

func (v NullableBnsVpcV1ApiGetSubnetModelResponseSubnetModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBnsVpcV1ApiGetSubnetModelResponseSubnetModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
