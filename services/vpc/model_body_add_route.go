/*
Beyond Networking Service(BNS) VPC API

BNS VPC API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// checks if the BodyAddRoute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BodyAddRoute{}

// BodyAddRoute struct for BodyAddRoute
type BodyAddRoute struct {
	VpcRoute             CreateRouteModel `json:"vpc_route"`
	AdditionalProperties map[string]interface{}
}

type _BodyAddRoute BodyAddRoute

// NewBodyAddRoute instantiates a new BodyAddRoute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBodyAddRoute(vpcRoute CreateRouteModel) *BodyAddRoute {
	this := BodyAddRoute{}
	this.VpcRoute = vpcRoute
	return &this
}

// NewBodyAddRouteWithDefaults instantiates a new BodyAddRoute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBodyAddRouteWithDefaults() *BodyAddRoute {
	this := BodyAddRoute{}
	return &this
}

// GetVpcRoute returns the VpcRoute field value
func (o *BodyAddRoute) GetVpcRoute() CreateRouteModel {
	if o == nil {
		var ret CreateRouteModel
		return ret
	}

	return o.VpcRoute
}

// GetVpcRouteOk returns a tuple with the VpcRoute field value
// and a boolean to check if the value has been set.
func (o *BodyAddRoute) GetVpcRouteOk() (*CreateRouteModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VpcRoute, true
}

// SetVpcRoute sets field value
func (o *BodyAddRoute) SetVpcRoute(v CreateRouteModel) {
	o.VpcRoute = v
}

func (o BodyAddRoute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BodyAddRoute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vpc_route"] = o.VpcRoute

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BodyAddRoute) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vpc_route",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBodyAddRoute := _BodyAddRoute{}

	err = json.Unmarshal(data, &varBodyAddRoute)

	if err != nil {
		return err
	}

	*o = BodyAddRoute(varBodyAddRoute)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vpc_route")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBodyAddRoute struct {
	value *BodyAddRoute
	isSet bool
}

func (v NullableBodyAddRoute) Get() *BodyAddRoute {
	return v.value
}

func (v *NullableBodyAddRoute) Set(val *BodyAddRoute) {
	v.value = val
	v.isSet = true
}

func (v NullableBodyAddRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableBodyAddRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBodyAddRoute(val *BodyAddRoute) *NullableBodyAddRoute {
	return &NullableBodyAddRoute{value: val, isSet: true}
}

func (v NullableBodyAddRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBodyAddRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
