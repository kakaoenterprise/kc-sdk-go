/*
Beyond Networking Service(BNS) VPC API

BNS VPC API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// checks if the BodyCreateRouteTable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BodyCreateRouteTable{}

// BodyCreateRouteTable struct for BodyCreateRouteTable
type BodyCreateRouteTable struct {
	VpcRouteTable        CreateRouteTableModel `json:"vpc_route_table"`
	AdditionalProperties map[string]interface{}
}

type _BodyCreateRouteTable BodyCreateRouteTable

// NewBodyCreateRouteTable instantiates a new BodyCreateRouteTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBodyCreateRouteTable(vpcRouteTable CreateRouteTableModel) *BodyCreateRouteTable {
	this := BodyCreateRouteTable{}
	this.VpcRouteTable = vpcRouteTable
	return &this
}

// NewBodyCreateRouteTableWithDefaults instantiates a new BodyCreateRouteTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBodyCreateRouteTableWithDefaults() *BodyCreateRouteTable {
	this := BodyCreateRouteTable{}
	return &this
}

// GetVpcRouteTable returns the VpcRouteTable field value
func (o *BodyCreateRouteTable) GetVpcRouteTable() CreateRouteTableModel {
	if o == nil {
		var ret CreateRouteTableModel
		return ret
	}

	return o.VpcRouteTable
}

// GetVpcRouteTableOk returns a tuple with the VpcRouteTable field value
// and a boolean to check if the value has been set.
func (o *BodyCreateRouteTable) GetVpcRouteTableOk() (*CreateRouteTableModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VpcRouteTable, true
}

// SetVpcRouteTable sets field value
func (o *BodyCreateRouteTable) SetVpcRouteTable(v CreateRouteTableModel) {
	o.VpcRouteTable = v
}

func (o BodyCreateRouteTable) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BodyCreateRouteTable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vpc_route_table"] = o.VpcRouteTable

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BodyCreateRouteTable) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vpc_route_table",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBodyCreateRouteTable := _BodyCreateRouteTable{}

	err = json.Unmarshal(data, &varBodyCreateRouteTable)

	if err != nil {
		return err
	}

	*o = BodyCreateRouteTable(varBodyCreateRouteTable)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vpc_route_table")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBodyCreateRouteTable struct {
	value *BodyCreateRouteTable
	isSet bool
}

func (v NullableBodyCreateRouteTable) Get() *BodyCreateRouteTable {
	return v.value
}

func (v *NullableBodyCreateRouteTable) Set(val *BodyCreateRouteTable) {
	v.value = val
	v.isSet = true
}

func (v NullableBodyCreateRouteTable) IsSet() bool {
	return v.isSet
}

func (v *NullableBodyCreateRouteTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBodyCreateRouteTable(val *BodyCreateRouteTable) *NullableBodyCreateRouteTable {
	return &NullableBodyCreateRouteTable{value: val, isSet: true}
}

func (v NullableBodyCreateRouteTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBodyCreateRouteTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
