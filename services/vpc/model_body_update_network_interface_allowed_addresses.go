/*
Beyond Networking Service(BNS) VPC API

BNS VPC API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// checks if the BodyUpdateNetworkInterfaceAllowedAddresses type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BodyUpdateNetworkInterfaceAllowedAddresses{}

// BodyUpdateNetworkInterfaceAllowedAddresses struct for BodyUpdateNetworkInterfaceAllowedAddresses
type BodyUpdateNetworkInterfaceAllowedAddresses struct {
	AllowedAddressPairs  []EditAllowedAddressPairModel `json:"allowed_address_pairs"`
	AdditionalProperties map[string]interface{}
}

type _BodyUpdateNetworkInterfaceAllowedAddresses BodyUpdateNetworkInterfaceAllowedAddresses

// NewBodyUpdateNetworkInterfaceAllowedAddresses instantiates a new BodyUpdateNetworkInterfaceAllowedAddresses object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBodyUpdateNetworkInterfaceAllowedAddresses(allowedAddressPairs []EditAllowedAddressPairModel) *BodyUpdateNetworkInterfaceAllowedAddresses {
	this := BodyUpdateNetworkInterfaceAllowedAddresses{}
	this.AllowedAddressPairs = allowedAddressPairs
	return &this
}

// NewBodyUpdateNetworkInterfaceAllowedAddressesWithDefaults instantiates a new BodyUpdateNetworkInterfaceAllowedAddresses object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBodyUpdateNetworkInterfaceAllowedAddressesWithDefaults() *BodyUpdateNetworkInterfaceAllowedAddresses {
	this := BodyUpdateNetworkInterfaceAllowedAddresses{}
	return &this
}

// GetAllowedAddressPairs returns the AllowedAddressPairs field value
func (o *BodyUpdateNetworkInterfaceAllowedAddresses) GetAllowedAddressPairs() []EditAllowedAddressPairModel {
	if o == nil {
		var ret []EditAllowedAddressPairModel
		return ret
	}

	return o.AllowedAddressPairs
}

// GetAllowedAddressPairsOk returns a tuple with the AllowedAddressPairs field value
// and a boolean to check if the value has been set.
func (o *BodyUpdateNetworkInterfaceAllowedAddresses) GetAllowedAddressPairsOk() ([]EditAllowedAddressPairModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowedAddressPairs, true
}

// SetAllowedAddressPairs sets field value
func (o *BodyUpdateNetworkInterfaceAllowedAddresses) SetAllowedAddressPairs(v []EditAllowedAddressPairModel) {
	o.AllowedAddressPairs = v
}

func (o BodyUpdateNetworkInterfaceAllowedAddresses) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BodyUpdateNetworkInterfaceAllowedAddresses) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allowed_address_pairs"] = o.AllowedAddressPairs

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BodyUpdateNetworkInterfaceAllowedAddresses) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allowed_address_pairs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBodyUpdateNetworkInterfaceAllowedAddresses := _BodyUpdateNetworkInterfaceAllowedAddresses{}

	err = json.Unmarshal(data, &varBodyUpdateNetworkInterfaceAllowedAddresses)

	if err != nil {
		return err
	}

	*o = BodyUpdateNetworkInterfaceAllowedAddresses(varBodyUpdateNetworkInterfaceAllowedAddresses)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allowed_address_pairs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBodyUpdateNetworkInterfaceAllowedAddresses struct {
	value *BodyUpdateNetworkInterfaceAllowedAddresses
	isSet bool
}

func (v NullableBodyUpdateNetworkInterfaceAllowedAddresses) Get() *BodyUpdateNetworkInterfaceAllowedAddresses {
	return v.value
}

func (v *NullableBodyUpdateNetworkInterfaceAllowedAddresses) Set(val *BodyUpdateNetworkInterfaceAllowedAddresses) {
	v.value = val
	v.isSet = true
}

func (v NullableBodyUpdateNetworkInterfaceAllowedAddresses) IsSet() bool {
	return v.isSet
}

func (v *NullableBodyUpdateNetworkInterfaceAllowedAddresses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBodyUpdateNetworkInterfaceAllowedAddresses(val *BodyUpdateNetworkInterfaceAllowedAddresses) *NullableBodyUpdateNetworkInterfaceAllowedAddresses {
	return &NullableBodyUpdateNetworkInterfaceAllowedAddresses{value: val, isSet: true}
}

func (v NullableBodyUpdateNetworkInterfaceAllowedAddresses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBodyUpdateNetworkInterfaceAllowedAddresses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
