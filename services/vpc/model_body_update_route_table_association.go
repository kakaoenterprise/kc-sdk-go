/*
Beyond Networking Service(BNS) VPC API

BNS VPC API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// checks if the BodyUpdateRouteTableAssociation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BodyUpdateRouteTableAssociation{}

// BodyUpdateRouteTableAssociation struct for BodyUpdateRouteTableAssociation
type BodyUpdateRouteTableAssociation struct {
	Association          EditAssociationModel `json:"association"`
	AdditionalProperties map[string]interface{}
}

type _BodyUpdateRouteTableAssociation BodyUpdateRouteTableAssociation

// NewBodyUpdateRouteTableAssociation instantiates a new BodyUpdateRouteTableAssociation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBodyUpdateRouteTableAssociation(association EditAssociationModel) *BodyUpdateRouteTableAssociation {
	this := BodyUpdateRouteTableAssociation{}
	this.Association = association
	return &this
}

// NewBodyUpdateRouteTableAssociationWithDefaults instantiates a new BodyUpdateRouteTableAssociation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBodyUpdateRouteTableAssociationWithDefaults() *BodyUpdateRouteTableAssociation {
	this := BodyUpdateRouteTableAssociation{}
	return &this
}

// GetAssociation returns the Association field value
func (o *BodyUpdateRouteTableAssociation) GetAssociation() EditAssociationModel {
	if o == nil {
		var ret EditAssociationModel
		return ret
	}

	return o.Association
}

// GetAssociationOk returns a tuple with the Association field value
// and a boolean to check if the value has been set.
func (o *BodyUpdateRouteTableAssociation) GetAssociationOk() (*EditAssociationModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Association, true
}

// SetAssociation sets field value
func (o *BodyUpdateRouteTableAssociation) SetAssociation(v EditAssociationModel) {
	o.Association = v
}

func (o BodyUpdateRouteTableAssociation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BodyUpdateRouteTableAssociation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["association"] = o.Association

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BodyUpdateRouteTableAssociation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"association",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBodyUpdateRouteTableAssociation := _BodyUpdateRouteTableAssociation{}

	err = json.Unmarshal(data, &varBodyUpdateRouteTableAssociation)

	if err != nil {
		return err
	}

	*o = BodyUpdateRouteTableAssociation(varBodyUpdateRouteTableAssociation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "association")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBodyUpdateRouteTableAssociation struct {
	value *BodyUpdateRouteTableAssociation
	isSet bool
}

func (v NullableBodyUpdateRouteTableAssociation) Get() *BodyUpdateRouteTableAssociation {
	return v.value
}

func (v *NullableBodyUpdateRouteTableAssociation) Set(val *BodyUpdateRouteTableAssociation) {
	v.value = val
	v.isSet = true
}

func (v NullableBodyUpdateRouteTableAssociation) IsSet() bool {
	return v.isSet
}

func (v *NullableBodyUpdateRouteTableAssociation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBodyUpdateRouteTableAssociation(val *BodyUpdateRouteTableAssociation) *NullableBodyUpdateRouteTableAssociation {
	return &NullableBodyUpdateRouteTableAssociation{value: val, isSet: true}
}

func (v NullableBodyUpdateRouteTableAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBodyUpdateRouteTableAssociation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
