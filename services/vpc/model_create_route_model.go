/*
Beyond Networking Service(BNS) VPC API

BNS VPC API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateRouteModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRouteModel{}

// CreateRouteModel struct for CreateRouteModel
type CreateRouteModel struct {
	// 라우팅 대상 유형 <br/> - `igw`: 인터넷 게이트웨이 <br/> - `instance`: 인스턴스 <br/> - `tgw`: Transit Gateway
	RouteType RouteTableRouteType `json:"route_type"`
	// 지정 대상의 리소스 ID
	TargetId string `json:"target_id"`
	// 목적지 네트워크 주소 (CIDR 형식)
	Destination          string `json:"destination"`
	AdditionalProperties map[string]interface{}
}

type _CreateRouteModel CreateRouteModel

// NewCreateRouteModel instantiates a new CreateRouteModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRouteModel(routeType RouteTableRouteType, targetId string, destination string) *CreateRouteModel {
	this := CreateRouteModel{}
	this.RouteType = routeType
	this.TargetId = targetId
	this.Destination = destination
	return &this
}

// NewCreateRouteModelWithDefaults instantiates a new CreateRouteModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRouteModelWithDefaults() *CreateRouteModel {
	this := CreateRouteModel{}
	return &this
}

// GetRouteType returns the RouteType field value
func (o *CreateRouteModel) GetRouteType() RouteTableRouteType {
	if o == nil {
		var ret RouteTableRouteType
		return ret
	}

	return o.RouteType
}

// GetRouteTypeOk returns a tuple with the RouteType field value
// and a boolean to check if the value has been set.
func (o *CreateRouteModel) GetRouteTypeOk() (*RouteTableRouteType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RouteType, true
}

// SetRouteType sets field value
func (o *CreateRouteModel) SetRouteType(v RouteTableRouteType) {
	o.RouteType = v
}

// GetTargetId returns the TargetId field value
func (o *CreateRouteModel) GetTargetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value
// and a boolean to check if the value has been set.
func (o *CreateRouteModel) GetTargetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetId, true
}

// SetTargetId sets field value
func (o *CreateRouteModel) SetTargetId(v string) {
	o.TargetId = v
}

// GetDestination returns the Destination field value
func (o *CreateRouteModel) GetDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *CreateRouteModel) GetDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *CreateRouteModel) SetDestination(v string) {
	o.Destination = v
}

func (o CreateRouteModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRouteModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["route_type"] = o.RouteType
	toSerialize["target_id"] = o.TargetId
	toSerialize["destination"] = o.Destination

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateRouteModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"route_type",
		"target_id",
		"destination",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateRouteModel := _CreateRouteModel{}

	err = json.Unmarshal(data, &varCreateRouteModel)

	if err != nil {
		return err
	}

	*o = CreateRouteModel(varCreateRouteModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "route_type")
		delete(additionalProperties, "target_id")
		delete(additionalProperties, "destination")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateRouteModel struct {
	value *CreateRouteModel
	isSet bool
}

func (v NullableCreateRouteModel) Get() *CreateRouteModel {
	return v.value
}

func (v *NullableCreateRouteModel) Set(val *CreateRouteModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRouteModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRouteModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRouteModel(val *CreateRouteModel) *NullableCreateRouteModel {
	return &NullableCreateRouteModel{value: val, isSet: true}
}

func (v NullableCreateRouteModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRouteModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
