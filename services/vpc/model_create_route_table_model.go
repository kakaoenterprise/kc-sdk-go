/*
Beyond Networking Service(BNS) VPC API

BNS VPC API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateRouteTableModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRouteTableModel{}

// CreateRouteTableModel struct for CreateRouteTableModel
type CreateRouteTableModel struct {
	// 생성할 라우팅 테이블의 이름
	Name string `json:"name"`
	// 라우팅 테이블을 생성할 대상 VPC의 ID
	VpcId                string `json:"vpc_id"`
	AdditionalProperties map[string]interface{}
}

type _CreateRouteTableModel CreateRouteTableModel

// NewCreateRouteTableModel instantiates a new CreateRouteTableModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRouteTableModel(name string, vpcId string) *CreateRouteTableModel {
	this := CreateRouteTableModel{}
	this.Name = name
	this.VpcId = vpcId
	return &this
}

// NewCreateRouteTableModelWithDefaults instantiates a new CreateRouteTableModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRouteTableModelWithDefaults() *CreateRouteTableModel {
	this := CreateRouteTableModel{}
	return &this
}

// GetName returns the Name field value
func (o *CreateRouteTableModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateRouteTableModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateRouteTableModel) SetName(v string) {
	o.Name = v
}

// GetVpcId returns the VpcId field value
func (o *CreateRouteTableModel) GetVpcId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VpcId
}

// GetVpcIdOk returns a tuple with the VpcId field value
// and a boolean to check if the value has been set.
func (o *CreateRouteTableModel) GetVpcIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VpcId, true
}

// SetVpcId sets field value
func (o *CreateRouteTableModel) SetVpcId(v string) {
	o.VpcId = v
}

func (o CreateRouteTableModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRouteTableModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["vpc_id"] = o.VpcId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateRouteTableModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"vpc_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateRouteTableModel := _CreateRouteTableModel{}

	err = json.Unmarshal(data, &varCreateRouteTableModel)

	if err != nil {
		return err
	}

	*o = CreateRouteTableModel(varCreateRouteTableModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "vpc_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateRouteTableModel struct {
	value *CreateRouteTableModel
	isSet bool
}

func (v NullableCreateRouteTableModel) Get() *CreateRouteTableModel {
	return v.value
}

func (v *NullableCreateRouteTableModel) Set(val *CreateRouteTableModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRouteTableModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRouteTableModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRouteTableModel(val *CreateRouteTableModel) *NullableCreateRouteTableModel {
	return &NullableCreateRouteTableModel{value: val, isSet: true}
}

func (v NullableCreateRouteTableModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRouteTableModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
