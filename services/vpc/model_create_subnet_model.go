/*
Beyond Networking Service(BNS) VPC API

BNS VPC API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateSubnetModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSubnetModel{}

// CreateSubnetModel struct for CreateSubnetModel
type CreateSubnetModel struct {
	// 생성할 서브넷 이름
	Name string `json:"name"`
	// 서브넷이 속할 VPC의 ID
	VpcId string `json:"vpc_id"`
	// 서브넷의 IP 주소 범위 (CIDR 형식)<br/> - 예: `10.0.1.0/24`
	CidrBlock string `json:"cidr_block"`
	// 서브넷을 생성할 가용 영역<br/> - `kr-central-2-a`: kr-central-2-a 가용 영역 <br/> - `kr-central-2-b`: kr-central-2-b 가용 영역 <br/> - `kr-central-2-c`: kr-central-2-c 가용 영역
	AvailabilityZone     AvailabilityZone `json:"availability_zone"`
	AdditionalProperties map[string]interface{}
}

type _CreateSubnetModel CreateSubnetModel

// NewCreateSubnetModel instantiates a new CreateSubnetModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSubnetModel(name string, vpcId string, cidrBlock string, availabilityZone AvailabilityZone) *CreateSubnetModel {
	this := CreateSubnetModel{}
	this.Name = name
	this.VpcId = vpcId
	this.CidrBlock = cidrBlock
	this.AvailabilityZone = availabilityZone
	return &this
}

// NewCreateSubnetModelWithDefaults instantiates a new CreateSubnetModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSubnetModelWithDefaults() *CreateSubnetModel {
	this := CreateSubnetModel{}
	return &this
}

// GetName returns the Name field value
func (o *CreateSubnetModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateSubnetModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateSubnetModel) SetName(v string) {
	o.Name = v
}

// GetVpcId returns the VpcId field value
func (o *CreateSubnetModel) GetVpcId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VpcId
}

// GetVpcIdOk returns a tuple with the VpcId field value
// and a boolean to check if the value has been set.
func (o *CreateSubnetModel) GetVpcIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VpcId, true
}

// SetVpcId sets field value
func (o *CreateSubnetModel) SetVpcId(v string) {
	o.VpcId = v
}

// GetCidrBlock returns the CidrBlock field value
func (o *CreateSubnetModel) GetCidrBlock() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CidrBlock
}

// GetCidrBlockOk returns a tuple with the CidrBlock field value
// and a boolean to check if the value has been set.
func (o *CreateSubnetModel) GetCidrBlockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CidrBlock, true
}

// SetCidrBlock sets field value
func (o *CreateSubnetModel) SetCidrBlock(v string) {
	o.CidrBlock = v
}

// GetAvailabilityZone returns the AvailabilityZone field value
func (o *CreateSubnetModel) GetAvailabilityZone() AvailabilityZone {
	if o == nil {
		var ret AvailabilityZone
		return ret
	}

	return o.AvailabilityZone
}

// GetAvailabilityZoneOk returns a tuple with the AvailabilityZone field value
// and a boolean to check if the value has been set.
func (o *CreateSubnetModel) GetAvailabilityZoneOk() (*AvailabilityZone, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailabilityZone, true
}

// SetAvailabilityZone sets field value
func (o *CreateSubnetModel) SetAvailabilityZone(v AvailabilityZone) {
	o.AvailabilityZone = v
}

func (o CreateSubnetModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSubnetModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["vpc_id"] = o.VpcId
	toSerialize["cidr_block"] = o.CidrBlock
	toSerialize["availability_zone"] = o.AvailabilityZone

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateSubnetModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"vpc_id",
		"cidr_block",
		"availability_zone",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateSubnetModel := _CreateSubnetModel{}

	err = json.Unmarshal(data, &varCreateSubnetModel)

	if err != nil {
		return err
	}

	*o = CreateSubnetModel(varCreateSubnetModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "vpc_id")
		delete(additionalProperties, "cidr_block")
		delete(additionalProperties, "availability_zone")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateSubnetModel struct {
	value *CreateSubnetModel
	isSet bool
}

func (v NullableCreateSubnetModel) Get() *CreateSubnetModel {
	return v.value
}

func (v *NullableCreateSubnetModel) Set(val *CreateSubnetModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSubnetModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSubnetModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSubnetModel(val *CreateSubnetModel) *NullableCreateSubnetModel {
	return &NullableCreateSubnetModel{value: val, isSet: true}
}

func (v NullableCreateSubnetModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSubnetModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
