/*
Beyond Networking Service(BNS) VPC API

BNS VPC API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateVPCModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateVPCModel{}

// CreateVPCModel struct for CreateVPCModel
type CreateVPCModel struct {
	// 생성할 VPC의 이름
	Name string `json:"name"`
	// VPC의 IPv4 CIDR 블록 (예: `10.0.0.0/16`)
	CidrBlock string `json:"cidr_block"`
	// 서브넷 정보
	Subnet               *MainSubnet `json:"subnet,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateVPCModel CreateVPCModel

// NewCreateVPCModel instantiates a new CreateVPCModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateVPCModel(name string, cidrBlock string) *CreateVPCModel {
	this := CreateVPCModel{}
	this.Name = name
	this.CidrBlock = cidrBlock
	return &this
}

// NewCreateVPCModelWithDefaults instantiates a new CreateVPCModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateVPCModelWithDefaults() *CreateVPCModel {
	this := CreateVPCModel{}
	return &this
}

// GetName returns the Name field value
func (o *CreateVPCModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateVPCModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateVPCModel) SetName(v string) {
	o.Name = v
}

// GetCidrBlock returns the CidrBlock field value
func (o *CreateVPCModel) GetCidrBlock() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CidrBlock
}

// GetCidrBlockOk returns a tuple with the CidrBlock field value
// and a boolean to check if the value has been set.
func (o *CreateVPCModel) GetCidrBlockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CidrBlock, true
}

// SetCidrBlock sets field value
func (o *CreateVPCModel) SetCidrBlock(v string) {
	o.CidrBlock = v
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *CreateVPCModel) GetSubnet() MainSubnet {
	if o == nil || IsNil(o.Subnet) {
		var ret MainSubnet
		return ret
	}
	return *o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVPCModel) GetSubnetOk() (*MainSubnet, bool) {
	if o == nil || IsNil(o.Subnet) {
		return nil, false
	}
	return o.Subnet, true
}

// HasSubnet returns a boolean if a field has been set.
func (o *CreateVPCModel) HasSubnet() bool {
	if o != nil && !IsNil(o.Subnet) {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given MainSubnet and assigns it to the Subnet field.
func (o *CreateVPCModel) SetSubnet(v MainSubnet) {
	o.Subnet = &v
}

func (o CreateVPCModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateVPCModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["cidr_block"] = o.CidrBlock
	if !IsNil(o.Subnet) {
		toSerialize["subnet"] = o.Subnet
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateVPCModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"cidr_block",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateVPCModel := _CreateVPCModel{}

	err = json.Unmarshal(data, &varCreateVPCModel)

	if err != nil {
		return err
	}

	*o = CreateVPCModel(varCreateVPCModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "cidr_block")
		delete(additionalProperties, "subnet")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateVPCModel struct {
	value *CreateVPCModel
	isSet bool
}

func (v NullableCreateVPCModel) Get() *CreateVPCModel {
	return v.value
}

func (v *NullableCreateVPCModel) Set(val *CreateVPCModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVPCModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVPCModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVPCModel(val *CreateVPCModel) *NullableCreateVPCModel {
	return &NullableCreateVPCModel{value: val, isSet: true}
}

func (v NullableCreateVPCModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVPCModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
