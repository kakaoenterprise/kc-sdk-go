/*
Beyond Networking Service(BNS) VPC API

BNS VPC API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// checks if the EditAssociationModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditAssociationModel{}

// EditAssociationModel struct for EditAssociationModel
type EditAssociationModel struct {
	// 대상 라우팅 테이블의 ID
	TargetRouteTableId   string `json:"target_route_table_id"`
	AdditionalProperties map[string]interface{}
}

type _EditAssociationModel EditAssociationModel

// NewEditAssociationModel instantiates a new EditAssociationModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditAssociationModel(targetRouteTableId string) *EditAssociationModel {
	this := EditAssociationModel{}
	this.TargetRouteTableId = targetRouteTableId
	return &this
}

// NewEditAssociationModelWithDefaults instantiates a new EditAssociationModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditAssociationModelWithDefaults() *EditAssociationModel {
	this := EditAssociationModel{}
	return &this
}

// GetTargetRouteTableId returns the TargetRouteTableId field value
func (o *EditAssociationModel) GetTargetRouteTableId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetRouteTableId
}

// GetTargetRouteTableIdOk returns a tuple with the TargetRouteTableId field value
// and a boolean to check if the value has been set.
func (o *EditAssociationModel) GetTargetRouteTableIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetRouteTableId, true
}

// SetTargetRouteTableId sets field value
func (o *EditAssociationModel) SetTargetRouteTableId(v string) {
	o.TargetRouteTableId = v
}

func (o EditAssociationModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditAssociationModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["target_route_table_id"] = o.TargetRouteTableId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EditAssociationModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"target_route_table_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEditAssociationModel := _EditAssociationModel{}

	err = json.Unmarshal(data, &varEditAssociationModel)

	if err != nil {
		return err
	}

	*o = EditAssociationModel(varEditAssociationModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "target_route_table_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEditAssociationModel struct {
	value *EditAssociationModel
	isSet bool
}

func (v NullableEditAssociationModel) Get() *EditAssociationModel {
	return v.value
}

func (v *NullableEditAssociationModel) Set(val *EditAssociationModel) {
	v.value = val
	v.isSet = true
}

func (v NullableEditAssociationModel) IsSet() bool {
	return v.isSet
}

func (v *NullableEditAssociationModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditAssociationModel(val *EditAssociationModel) *NullableEditAssociationModel {
	return &NullableEditAssociationModel{value: val, isSet: true}
}

func (v NullableEditAssociationModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditAssociationModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
