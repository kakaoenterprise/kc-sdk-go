/*
Beyond Networking Service(BNS) VPC API

BNS VPC API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// checks if the ErrorResponseSubModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorResponseSubModel{}

// ErrorResponseSubModel struct for ErrorResponseSubModel
type ErrorResponseSubModel struct {
	// 에러 코드
	Code string `json:"code"`
	// 상세 에러 메시지
	Message              string `json:"message"`
	AdditionalProperties map[string]interface{}
}

type _ErrorResponseSubModel ErrorResponseSubModel

// NewErrorResponseSubModel instantiates a new ErrorResponseSubModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponseSubModel(code string, message string) *ErrorResponseSubModel {
	this := ErrorResponseSubModel{}
	this.Code = code
	this.Message = message
	return &this
}

// NewErrorResponseSubModelWithDefaults instantiates a new ErrorResponseSubModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseSubModelWithDefaults() *ErrorResponseSubModel {
	this := ErrorResponseSubModel{}
	return &this
}

// GetCode returns the Code field value
func (o *ErrorResponseSubModel) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseSubModel) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ErrorResponseSubModel) SetCode(v string) {
	o.Code = v
}

// GetMessage returns the Message field value
func (o *ErrorResponseSubModel) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseSubModel) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ErrorResponseSubModel) SetMessage(v string) {
	o.Message = v
}

func (o ErrorResponseSubModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorResponseSubModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["message"] = o.Message

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ErrorResponseSubModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorResponseSubModel := _ErrorResponseSubModel{}

	err = json.Unmarshal(data, &varErrorResponseSubModel)

	if err != nil {
		return err
	}

	*o = ErrorResponseSubModel(varErrorResponseSubModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableErrorResponseSubModel struct {
	value *ErrorResponseSubModel
	isSet bool
}

func (v NullableErrorResponseSubModel) Get() *ErrorResponseSubModel {
	return v.value
}

func (v *NullableErrorResponseSubModel) Set(val *ErrorResponseSubModel) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseSubModel) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseSubModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseSubModel(val *ErrorResponseSubModel) *NullableErrorResponseSubModel {
	return &NullableErrorResponseSubModel{value: val, isSet: true}
}

func (v NullableErrorResponseSubModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseSubModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
