/*
Beyond Networking Service(BNS) VPC API

BNS VPC API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// checks if the RouteTableAssociationListModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteTableAssociationListModel{}

// RouteTableAssociationListModel struct for RouteTableAssociationListModel
type RouteTableAssociationListModel struct {
	Associations         []BnsVpcV1ApiListRouteTableAssociationsModelAssociationModel `json:"associations,omitempty"`
	Pagination           PaginationModel                                              `json:"pagination"`
	AdditionalProperties map[string]interface{}
}

type _RouteTableAssociationListModel RouteTableAssociationListModel

// NewRouteTableAssociationListModel instantiates a new RouteTableAssociationListModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteTableAssociationListModel(pagination PaginationModel) *RouteTableAssociationListModel {
	this := RouteTableAssociationListModel{}
	this.Pagination = pagination
	return &this
}

// NewRouteTableAssociationListModelWithDefaults instantiates a new RouteTableAssociationListModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteTableAssociationListModelWithDefaults() *RouteTableAssociationListModel {
	this := RouteTableAssociationListModel{}
	return &this
}

// GetAssociations returns the Associations field value if set, zero value otherwise.
func (o *RouteTableAssociationListModel) GetAssociations() []BnsVpcV1ApiListRouteTableAssociationsModelAssociationModel {
	if o == nil || IsNil(o.Associations) {
		var ret []BnsVpcV1ApiListRouteTableAssociationsModelAssociationModel
		return ret
	}
	return o.Associations
}

// GetAssociationsOk returns a tuple with the Associations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteTableAssociationListModel) GetAssociationsOk() ([]BnsVpcV1ApiListRouteTableAssociationsModelAssociationModel, bool) {
	if o == nil || IsNil(o.Associations) {
		return nil, false
	}
	return o.Associations, true
}

// HasAssociations returns a boolean if a field has been set.
func (o *RouteTableAssociationListModel) HasAssociations() bool {
	if o != nil && !IsNil(o.Associations) {
		return true
	}

	return false
}

// SetAssociations gets a reference to the given []BnsVpcV1ApiListRouteTableAssociationsModelAssociationModel and assigns it to the Associations field.
func (o *RouteTableAssociationListModel) SetAssociations(v []BnsVpcV1ApiListRouteTableAssociationsModelAssociationModel) {
	o.Associations = v
}

// GetPagination returns the Pagination field value
func (o *RouteTableAssociationListModel) GetPagination() PaginationModel {
	if o == nil {
		var ret PaginationModel
		return ret
	}

	return o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value
// and a boolean to check if the value has been set.
func (o *RouteTableAssociationListModel) GetPaginationOk() (*PaginationModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pagination, true
}

// SetPagination sets field value
func (o *RouteTableAssociationListModel) SetPagination(v PaginationModel) {
	o.Pagination = v
}

func (o RouteTableAssociationListModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteTableAssociationListModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Associations) {
		toSerialize["associations"] = o.Associations
	}
	toSerialize["pagination"] = o.Pagination

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RouteTableAssociationListModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pagination",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRouteTableAssociationListModel := _RouteTableAssociationListModel{}

	err = json.Unmarshal(data, &varRouteTableAssociationListModel)

	if err != nil {
		return err
	}

	*o = RouteTableAssociationListModel(varRouteTableAssociationListModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "associations")
		delete(additionalProperties, "pagination")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRouteTableAssociationListModel struct {
	value *RouteTableAssociationListModel
	isSet bool
}

func (v NullableRouteTableAssociationListModel) Get() *RouteTableAssociationListModel {
	return v.value
}

func (v *NullableRouteTableAssociationListModel) Set(val *RouteTableAssociationListModel) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteTableAssociationListModel) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteTableAssociationListModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteTableAssociationListModel(val *RouteTableAssociationListModel) *NullableRouteTableAssociationListModel {
	return &NullableRouteTableAssociationListModel{value: val, isSet: true}
}

func (v NullableRouteTableAssociationListModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteTableAssociationListModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
