/*
Beyond Networking Service(BNS) VPC API

BNS VPC API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// RouteTableRouteType the model 'RouteTableRouteType'
type RouteTableRouteType string

// List of RouteTableRouteType
const (
	ROUTETABLEROUTETYPE_IGW      RouteTableRouteType = "igw"
	ROUTETABLEROUTETYPE_INSTANCE RouteTableRouteType = "instance"
	ROUTETABLEROUTETYPE_TGW      RouteTableRouteType = "tgw"
)

// All allowed values of RouteTableRouteType enum
var AllowedRouteTableRouteTypeEnumValues = []RouteTableRouteType{
	"igw",
	"instance",
	"tgw",
}

func (v *RouteTableRouteType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RouteTableRouteType(value)
	for _, existing := range AllowedRouteTableRouteTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RouteTableRouteType", value)
}

// NewRouteTableRouteTypeFromValue returns a pointer to a valid RouteTableRouteType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRouteTableRouteTypeFromValue(v string) (*RouteTableRouteType, error) {
	ev := RouteTableRouteType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RouteTableRouteType: valid values are %v", v, AllowedRouteTableRouteTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RouteTableRouteType) IsValid() bool {
	for _, existing := range AllowedRouteTableRouteTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RouteTableRouteType value
func (v RouteTableRouteType) Ptr() *RouteTableRouteType {
	return &v
}

type NullableRouteTableRouteType struct {
	value *RouteTableRouteType
	isSet bool
}

func (v NullableRouteTableRouteType) Get() *RouteTableRouteType {
	return v.value
}

func (v *NullableRouteTableRouteType) Set(val *RouteTableRouteType) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteTableRouteType) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteTableRouteType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteTableRouteType(val *RouteTableRouteType) *NullableRouteTableRouteType {
	return &NullableRouteTableRouteType{value: val, isSet: true}
}

func (v NullableRouteTableRouteType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteTableRouteType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
