/*
Beyond Networking Service(BNS) VPC API

BNS VPC API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// checks if the SubnetListModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubnetListModel{}

// SubnetListModel struct for SubnetListModel
type SubnetListModel struct {
	Subnets              []BnsVpcV1ApiListSubnetsModelSubnetModel `json:"subnets,omitempty"`
	Pagination           PaginationModel                          `json:"pagination"`
	AdditionalProperties map[string]interface{}
}

type _SubnetListModel SubnetListModel

// NewSubnetListModel instantiates a new SubnetListModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubnetListModel(pagination PaginationModel) *SubnetListModel {
	this := SubnetListModel{}
	this.Pagination = pagination
	return &this
}

// NewSubnetListModelWithDefaults instantiates a new SubnetListModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubnetListModelWithDefaults() *SubnetListModel {
	this := SubnetListModel{}
	return &this
}

// GetSubnets returns the Subnets field value if set, zero value otherwise.
func (o *SubnetListModel) GetSubnets() []BnsVpcV1ApiListSubnetsModelSubnetModel {
	if o == nil || IsNil(o.Subnets) {
		var ret []BnsVpcV1ApiListSubnetsModelSubnetModel
		return ret
	}
	return o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubnetListModel) GetSubnetsOk() ([]BnsVpcV1ApiListSubnetsModelSubnetModel, bool) {
	if o == nil || IsNil(o.Subnets) {
		return nil, false
	}
	return o.Subnets, true
}

// HasSubnets returns a boolean if a field has been set.
func (o *SubnetListModel) HasSubnets() bool {
	if o != nil && !IsNil(o.Subnets) {
		return true
	}

	return false
}

// SetSubnets gets a reference to the given []BnsVpcV1ApiListSubnetsModelSubnetModel and assigns it to the Subnets field.
func (o *SubnetListModel) SetSubnets(v []BnsVpcV1ApiListSubnetsModelSubnetModel) {
	o.Subnets = v
}

// GetPagination returns the Pagination field value
func (o *SubnetListModel) GetPagination() PaginationModel {
	if o == nil {
		var ret PaginationModel
		return ret
	}

	return o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value
// and a boolean to check if the value has been set.
func (o *SubnetListModel) GetPaginationOk() (*PaginationModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pagination, true
}

// SetPagination sets field value
func (o *SubnetListModel) SetPagination(v PaginationModel) {
	o.Pagination = v
}

func (o SubnetListModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubnetListModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Subnets) {
		toSerialize["subnets"] = o.Subnets
	}
	toSerialize["pagination"] = o.Pagination

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubnetListModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pagination",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubnetListModel := _SubnetListModel{}

	err = json.Unmarshal(data, &varSubnetListModel)

	if err != nil {
		return err
	}

	*o = SubnetListModel(varSubnetListModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "subnets")
		delete(additionalProperties, "pagination")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubnetListModel struct {
	value *SubnetListModel
	isSet bool
}

func (v NullableSubnetListModel) Get() *SubnetListModel {
	return v.value
}

func (v *NullableSubnetListModel) Set(val *SubnetListModel) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnetListModel) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnetListModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnetListModel(val *SubnetListModel) *NullableSubnetListModel {
	return &NullableSubnetListModel{value: val, isSet: true}
}

func (v NullableSubnetListModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnetListModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
