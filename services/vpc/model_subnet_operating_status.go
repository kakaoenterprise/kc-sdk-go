/*
Beyond Networking Service(BNS) VPC API

BNS VPC API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// SubnetOperatingStatus the model 'SubnetOperatingStatus'
type SubnetOperatingStatus string

// List of SubnetOperatingStatus
const (
	SUBNETOPERATINGSTATUS_ONLINE         SubnetOperatingStatus = "ONLINE"
	SUBNETOPERATINGSTATUS_OFFLINE        SubnetOperatingStatus = "OFFLINE"
	SUBNETOPERATINGSTATUS_IN_MAINTENANCE SubnetOperatingStatus = "IN_MAINTENANCE"
	SUBNETOPERATINGSTATUS_ERROR          SubnetOperatingStatus = "ERROR"
)

// All allowed values of SubnetOperatingStatus enum
var AllowedSubnetOperatingStatusEnumValues = []SubnetOperatingStatus{
	"ONLINE",
	"OFFLINE",
	"IN_MAINTENANCE",
	"ERROR",
}

func (v *SubnetOperatingStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubnetOperatingStatus(value)
	for _, existing := range AllowedSubnetOperatingStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubnetOperatingStatus", value)
}

// NewSubnetOperatingStatusFromValue returns a pointer to a valid SubnetOperatingStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubnetOperatingStatusFromValue(v string) (*SubnetOperatingStatus, error) {
	ev := SubnetOperatingStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubnetOperatingStatus: valid values are %v", v, AllowedSubnetOperatingStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubnetOperatingStatus) IsValid() bool {
	for _, existing := range AllowedSubnetOperatingStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubnetOperatingStatus value
func (v SubnetOperatingStatus) Ptr() *SubnetOperatingStatus {
	return &v
}

type NullableSubnetOperatingStatus struct {
	value *SubnetOperatingStatus
	isSet bool
}

func (v NullableSubnetOperatingStatus) Get() *SubnetOperatingStatus {
	return v.value
}

func (v *NullableSubnetOperatingStatus) Set(val *SubnetOperatingStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnetOperatingStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnetOperatingStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnetOperatingStatus(val *SubnetOperatingStatus) *NullableSubnetOperatingStatus {
	return &NullableSubnetOperatingStatus{value: val, isSet: true}
}

func (v NullableSubnetOperatingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnetOperatingStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
