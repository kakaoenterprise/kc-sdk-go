/*
Beyond Networking Service(BNS) VPC API

BNS VPC API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// VPCOperatingStatus the model 'VPCOperatingStatus'
type VPCOperatingStatus string

// List of VPCOperatingStatus
const (
	VPCOPERATINGSTATUS_ONLINE     VPCOperatingStatus = "ONLINE"
	VPCOPERATINGSTATUS_DRAINING   VPCOperatingStatus = "DRAINING"
	VPCOPERATINGSTATUS_OFFLINE    VPCOperatingStatus = "OFFLINE"
	VPCOPERATINGSTATUS_DEGRADED   VPCOperatingStatus = "DEGRADED"
	VPCOPERATINGSTATUS_ERROR      VPCOperatingStatus = "ERROR"
	VPCOPERATINGSTATUS_NO_MONITOR VPCOperatingStatus = "NO_MONITOR"
)

// All allowed values of VPCOperatingStatus enum
var AllowedVPCOperatingStatusEnumValues = []VPCOperatingStatus{
	"ONLINE",
	"DRAINING",
	"OFFLINE",
	"DEGRADED",
	"ERROR",
	"NO_MONITOR",
}

func (v *VPCOperatingStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VPCOperatingStatus(value)
	for _, existing := range AllowedVPCOperatingStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VPCOperatingStatus", value)
}

// NewVPCOperatingStatusFromValue returns a pointer to a valid VPCOperatingStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVPCOperatingStatusFromValue(v string) (*VPCOperatingStatus, error) {
	ev := VPCOperatingStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VPCOperatingStatus: valid values are %v", v, AllowedVPCOperatingStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VPCOperatingStatus) IsValid() bool {
	for _, existing := range AllowedVPCOperatingStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VPCOperatingStatus value
func (v VPCOperatingStatus) Ptr() *VPCOperatingStatus {
	return &v
}

type NullableVPCOperatingStatus struct {
	value *VPCOperatingStatus
	isSet bool
}

func (v NullableVPCOperatingStatus) Get() *VPCOperatingStatus {
	return v.value
}

func (v *NullableVPCOperatingStatus) Set(val *VPCOperatingStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVPCOperatingStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVPCOperatingStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVPCOperatingStatus(val *VPCOperatingStatus) *NullableVPCOperatingStatus {
	return &NullableVPCOperatingStatus{value: val, isSet: true}
}

func (v NullableVPCOperatingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVPCOperatingStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
