/*
Beyond Networking Service(BNS) VPC API

Testing VPCSubnetAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package vpc

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_vpc_VPCSubnetAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VPCSubnetAPIService CreateSubnet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VPCSubnetAPI.CreateSubnet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VPCSubnetAPIService DeleteSubnet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var subnetId string

		httpRes, err := apiClient.VPCSubnetAPI.DeleteSubnet(context.Background(), subnetId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VPCSubnetAPIService GetSubnet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var subnetId string

		resp, httpRes, err := apiClient.VPCSubnetAPI.GetSubnet(context.Background(), subnetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VPCSubnetAPIService ListSubnetSharedProjects", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var subnetId string

		resp, httpRes, err := apiClient.VPCSubnetAPI.ListSubnetSharedProjects(context.Background(), subnetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VPCSubnetAPIService ListSubnets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VPCSubnetAPI.ListSubnets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VPCSubnetAPIService ShareSubnet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var subnetId string
		var projectId string

		resp, httpRes, err := apiClient.VPCSubnetAPI.ShareSubnet(context.Background(), subnetId, projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VPCSubnetAPIService UnshareSubnet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var subnetId string
		var projectId string

		httpRes, err := apiClient.VPCSubnetAPI.UnshareSubnet(context.Background(), subnetId, projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VPCSubnetAPIService UpdateSubnet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var subnetId string

		resp, httpRes, err := apiClient.VPCSubnetAPI.UpdateSubnet(context.Background(), subnetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
